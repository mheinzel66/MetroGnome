
Metronome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000100  00800100  00004b52  00004be6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004b52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004fb  00800200  00800200  00004ce6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004ce6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004d18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a98  00000000  00000000  00004d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00022744  00000000  00000000  000057f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000050c8  00000000  00000000  00027f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000044c8  00000000  00000000  0002cffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000256c  00000000  00000000  000314c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005c04  00000000  00000000  00033a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ecce  00000000  00000000  00039634  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000db8  00000000  00000000  00048302  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__ctors_end>
       4:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
       8:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
       c:	0c 94 49 04 	jmp	0x892	; 0x892 <__vector_3>
      10:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      14:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__vector_5>
      18:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      1c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      20:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      24:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      28:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      2c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      30:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      34:	0c 94 e9 1a 	jmp	0x35d2	; 0x35d2 <__vector_13>
      38:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      3c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      40:	0c 94 50 22 	jmp	0x44a0	; 0x44a0 <__vector_16>
      44:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      48:	0c 94 6c 20 	jmp	0x40d8	; 0x40d8 <__vector_18>
      4c:	0c 94 9e 20 	jmp	0x413c	; 0x413c <__vector_19>
      50:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      54:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      58:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      5c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
      60:	0c 94 ad 1b 	jmp	0x375a	; 0x375a <__vector_24>
      64:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	7c 3c       	cpi	r23, 0xCC	; 204
      6a:	3e 5e       	subi	r19, 0xEE	; 238
      6c:	2b 3d       	cpi	r18, 0xDB	; 219
      6e:	3f 2f       	mov	r19, r31
      70:	5b 5d       	subi	r21, 0xDB	; 219
      72:	3b 2c       	mov	r3, r11
      74:	2a 22       	and	r2, r26
      76:	5c 00       	.word	0x005c	; ????

00000078 <digital_pin_to_timer_PGM>:
      78:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      88:	00 00 00 00                                         ....

0000008c <digital_pin_to_bit_mask_PGM>:
      8c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      9c:	04 08 10 20                                         ... 

000000a0 <digital_pin_to_port_PGM>:
      a0:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      b0:	03 03 03 03                                         ....

000000b4 <port_to_input_PGM>:
      b4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000be <port_to_output_PGM>:
      be:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000c8 <port_to_mode_PGM>:
      c8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000d2 <__ctors_start>:
      d2:	86 04       	cpc	r8, r6
      d4:	94 0b       	sbc	r25, r20
      d6:	db 0e       	add	r13, r27
      d8:	9f 1d       	adc	r25, r15
      da:	ce 20       	and	r12, r14

000000dc <__ctors_end>:
      dc:	11 24       	eor	r1, r1
      de:	1f be       	out	0x3f, r1	; 63
      e0:	cf ef       	ldi	r28, 0xFF	; 255
      e2:	d8 e0       	ldi	r29, 0x08	; 8
      e4:	de bf       	out	0x3e, r29	; 62
      e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_copy_data>:
      e8:	12 e0       	ldi	r17, 0x02	; 2
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	e2 e5       	ldi	r30, 0x52	; 82
      f0:	fb e4       	ldi	r31, 0x4B	; 75
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x10>
      f4:	05 90       	lpm	r0, Z+
      f6:	0d 92       	st	X+, r0
      f8:	a0 30       	cpi	r26, 0x00	; 0
      fa:	b1 07       	cpc	r27, r17
      fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0xc>

000000fe <__do_clear_bss>:
      fe:	26 e0       	ldi	r18, 0x06	; 6
     100:	a0 e0       	ldi	r26, 0x00	; 0
     102:	b2 e0       	ldi	r27, 0x02	; 2
     104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
     106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
     108:	ab 3f       	cpi	r26, 0xFB	; 251
     10a:	b2 07       	cpc	r27, r18
     10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>

0000010e <__do_global_ctors>:
     10e:	10 e0       	ldi	r17, 0x00	; 0
     110:	ce e6       	ldi	r28, 0x6E	; 110
     112:	d0 e0       	ldi	r29, 0x00	; 0
     114:	04 c0       	rjmp	.+8      	; 0x11e <__do_global_ctors+0x10>
     116:	21 97       	sbiw	r28, 0x01	; 1
     118:	fe 01       	movw	r30, r28
     11a:	0e 94 39 24 	call	0x4872	; 0x4872 <__tablejump2__>
     11e:	c9 36       	cpi	r28, 0x69	; 105
     120:	d1 07       	cpc	r29, r17
     122:	c9 f7       	brne	.-14     	; 0x116 <__do_global_ctors+0x8>
     124:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <main>
     128:	0c 94 a7 25 	jmp	0x4b4e	; 0x4b4e <_exit>

0000012c <__bad_interrupt>:
     12c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000130 <_Z16toggle_indicatorv>:
//////////////////////////
//
/////////////////////////
void toggle_indicator()
{
  digitalWrite(INDICATOR_PIN, digitalRead(INDICATOR_PIN) ^ 1);  
     130:	8d e0       	ldi	r24, 0x0D	; 13
     132:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <digitalRead>
     136:	61 e0       	ldi	r22, 0x01	; 1
     138:	68 27       	eor	r22, r24
     13a:	8d e0       	ldi	r24, 0x0D	; 13
     13c:	0c 94 b2 23 	jmp	0x4764	; 0x4764 <digitalWrite>

00000140 <loop>:


//////////////////////////
//
/////////////////////////
void loop() {
     140:	ff cf       	rjmp	.-2      	; 0x140 <loop>

00000142 <_Z23calc_timer_val_from_bpmh>:

//////////////////////////
//
/////////////////////////
unsigned long calc_timer_val_from_bpm(uint8_t bpm)
{
     142:	cf 92       	push	r12
     144:	df 92       	push	r13
     146:	ef 92       	push	r14
     148:	ff 92       	push	r15
     14a:	cf 93       	push	r28
     14c:	c8 2f       	mov	r28, r24
 //  1 000 000 uS/ beats_second = total uS interval 
  //timer interval = total uS interval/2
 //
  //timer_val = ( 1/(bpm/60)/1000000) /2;
  
  float bps = ( (float)bpm/60.0);
     14e:	68 2f       	mov	r22, r24
     150:	70 e0       	ldi	r23, 0x00	; 0
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <__floatunsisf>
     15a:	20 e0       	ldi	r18, 0x00	; 0
     15c:	30 e0       	ldi	r19, 0x00	; 0
     15e:	40 e7       	ldi	r20, 0x70	; 112
     160:	52 e4       	ldi	r21, 0x42	; 66
     162:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <__divsf3>
     166:	9b 01       	movw	r18, r22
     168:	ac 01       	movw	r20, r24
  
 // Serial.print("BPS: "); 
  //Serial.println(bps); 

  float full_interval = 1000000/bps;
     16a:	60 e0       	ldi	r22, 0x00	; 0
     16c:	74 e2       	ldi	r23, 0x24	; 36
     16e:	84 e7       	ldi	r24, 0x74	; 116
     170:	99 e4       	ldi	r25, 0x49	; 73
     172:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <__divsf3>
    
  timer_val = full_interval/2;
     176:	20 e0       	ldi	r18, 0x00	; 0
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	40 e0       	ldi	r20, 0x00	; 0
     17c:	5f e3       	ldi	r21, 0x3F	; 63
     17e:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__mulsf3>
     182:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__fixunssfsi>
     186:	6b 01       	movw	r12, r22
     188:	7c 01       	movw	r14, r24
  
  #ifdef DEBUG_ON
    Serial.print("timer_val: "); 
     18a:	6d e5       	ldi	r22, 0x5D	; 93
     18c:	71 e0       	ldi	r23, 0x01	; 1
     18e:	81 e5       	ldi	r24, 0x51	; 81
     190:	96 e0       	ldi	r25, 0x06	; 6
     192:	0e 94 4b 21 	call	0x4296	; 0x4296 <_ZN5Print5printEPKc>
    Serial.println(timer_val); 
     196:	2a e0       	ldi	r18, 0x0A	; 10
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	b7 01       	movw	r22, r14
     19c:	a6 01       	movw	r20, r12
     19e:	81 e5       	ldi	r24, 0x51	; 81
     1a0:	96 e0       	ldi	r25, 0x06	; 6
     1a2:	0e 94 3e 22 	call	0x447c	; 0x447c <_ZN5Print7printlnEmi>
    
    Serial.print("bpm ");      
     1a6:	6b e0       	ldi	r22, 0x0B	; 11
     1a8:	71 e0       	ldi	r23, 0x01	; 1
     1aa:	81 e5       	ldi	r24, 0x51	; 81
     1ac:	96 e0       	ldi	r25, 0x06	; 6
     1ae:	0e 94 4b 21 	call	0x4296	; 0x4296 <_ZN5Print5printEPKc>
    Serial.println(bpm);  
     1b2:	4a e0       	ldi	r20, 0x0A	; 10
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	6c 2f       	mov	r22, r28
     1b8:	81 e5       	ldi	r24, 0x51	; 81
     1ba:	96 e0       	ldi	r25, 0x06	; 6
     1bc:	0e 94 27 22 	call	0x444e	; 0x444e <_ZN5Print7printlnEhi>
  #endif  

   
  return  timer_val;
}
     1c0:	c7 01       	movw	r24, r14
     1c2:	b6 01       	movw	r22, r12
     1c4:	cf 91       	pop	r28
     1c6:	ff 90       	pop	r15
     1c8:	ef 90       	pop	r14
     1ca:	df 90       	pop	r13
     1cc:	cf 90       	pop	r12
     1ce:	08 95       	ret

000001d0 <_Z9initTimerv>:
//////////////////////////
//
/////////////////////////
void initTimer()
{
  unsigned long timer_val = calc_timer_val_from_bpm(current_bpm);
     1d0:	80 91 06 01 	lds	r24, 0x0106
     1d4:	0e 94 a1 00 	call	0x142	; 0x142 <_Z23calc_timer_val_from_bpmh>
  public:
    //****************************
    //  Configuration
    //****************************
    void initialize(unsigned long microseconds=1000000) __attribute__((always_inline)) {
	TCCR1B = _BV(WGM13);        // set mode as phase and frequency correct pwm, stop the timer
     1d8:	20 e1       	ldi	r18, 0x10	; 16
     1da:	20 93 81 00 	sts	0x0081, r18
	TCCR1A = 0;                 // clear control register A 
     1de:	10 92 80 00 	sts	0x0080, r1
	setPeriod(microseconds);
    }
    void setPeriod(unsigned long microseconds) __attribute__((always_inline)) {
	const unsigned long cycles = (F_CPU / 2000000) * microseconds;
     1e2:	dc 01       	movw	r26, r24
     1e4:	cb 01       	movw	r24, r22
     1e6:	73 e0       	ldi	r23, 0x03	; 3
     1e8:	88 0f       	add	r24, r24
     1ea:	99 1f       	adc	r25, r25
     1ec:	aa 1f       	adc	r26, r26
     1ee:	bb 1f       	adc	r27, r27
     1f0:	7a 95       	dec	r23
     1f2:	d1 f7       	brne	.-12     	; 0x1e8 <_Z9initTimerv+0x18>
	if (cycles < TIMER1_RESOLUTION) {
     1f4:	00 97       	sbiw	r24, 0x00	; 0
     1f6:	21 e0       	ldi	r18, 0x01	; 1
     1f8:	a2 07       	cpc	r26, r18
     1fa:	b1 05       	cpc	r27, r1
     1fc:	20 f4       	brcc	.+8      	; 0x206 <_Z9initTimerv+0x36>
		clockSelectBits = _BV(CS10);
     1fe:	21 e0       	ldi	r18, 0x01	; 1
     200:	20 93 8e 05 	sts	0x058E, r18
     204:	42 c0       	rjmp	.+132    	; 0x28a <_Z9initTimerv+0xba>
		pwmPeriod = cycles;
	} else
	if (cycles < TIMER1_RESOLUTION * 8) {
     206:	00 97       	sbiw	r24, 0x00	; 0
     208:	28 e0       	ldi	r18, 0x08	; 8
     20a:	a2 07       	cpc	r26, r18
     20c:	b1 05       	cpc	r27, r1
     20e:	58 f4       	brcc	.+22     	; 0x226 <_Z9initTimerv+0x56>
		clockSelectBits = _BV(CS11);
     210:	22 e0       	ldi	r18, 0x02	; 2
     212:	20 93 8e 05 	sts	0x058E, r18
		pwmPeriod = cycles / 8;
     216:	63 e0       	ldi	r22, 0x03	; 3
     218:	b6 95       	lsr	r27
     21a:	a7 95       	ror	r26
     21c:	97 95       	ror	r25
     21e:	87 95       	ror	r24
     220:	6a 95       	dec	r22
     222:	d1 f7       	brne	.-12     	; 0x218 <_Z9initTimerv+0x48>
     224:	32 c0       	rjmp	.+100    	; 0x28a <_Z9initTimerv+0xba>
	} else
	if (cycles < TIMER1_RESOLUTION * 64) {
     226:	00 97       	sbiw	r24, 0x00	; 0
     228:	20 e4       	ldi	r18, 0x40	; 64
     22a:	a2 07       	cpc	r26, r18
     22c:	b1 05       	cpc	r27, r1
     22e:	58 f4       	brcc	.+22     	; 0x246 <_Z9initTimerv+0x76>
		clockSelectBits = _BV(CS11) | _BV(CS10);
     230:	23 e0       	ldi	r18, 0x03	; 3
     232:	20 93 8e 05 	sts	0x058E, r18
		pwmPeriod = cycles / 64;
     236:	56 e0       	ldi	r21, 0x06	; 6
     238:	b6 95       	lsr	r27
     23a:	a7 95       	ror	r26
     23c:	97 95       	ror	r25
     23e:	87 95       	ror	r24
     240:	5a 95       	dec	r21
     242:	d1 f7       	brne	.-12     	; 0x238 <_Z9initTimerv+0x68>
     244:	22 c0       	rjmp	.+68     	; 0x28a <_Z9initTimerv+0xba>
	} else
	if (cycles < TIMER1_RESOLUTION * 256) {
     246:	00 97       	sbiw	r24, 0x00	; 0
     248:	a1 05       	cpc	r26, r1
     24a:	21 e0       	ldi	r18, 0x01	; 1
     24c:	b2 07       	cpc	r27, r18
     24e:	40 f4       	brcc	.+16     	; 0x260 <_Z9initTimerv+0x90>
		clockSelectBits = _BV(CS12);
     250:	24 e0       	ldi	r18, 0x04	; 4
     252:	20 93 8e 05 	sts	0x058E, r18
		pwmPeriod = cycles / 256;
     256:	89 2f       	mov	r24, r25
     258:	9a 2f       	mov	r25, r26
     25a:	ab 2f       	mov	r26, r27
     25c:	bb 27       	eor	r27, r27
     25e:	15 c0       	rjmp	.+42     	; 0x28a <_Z9initTimerv+0xba>
	} else
	if (cycles < TIMER1_RESOLUTION * 1024) {
     260:	00 97       	sbiw	r24, 0x00	; 0
     262:	a1 05       	cpc	r26, r1
     264:	24 e0       	ldi	r18, 0x04	; 4
     266:	b2 07       	cpc	r27, r18
     268:	58 f4       	brcc	.+22     	; 0x280 <_Z9initTimerv+0xb0>
		clockSelectBits = _BV(CS12) | _BV(CS10);
     26a:	25 e0       	ldi	r18, 0x05	; 5
     26c:	20 93 8e 05 	sts	0x058E, r18
		pwmPeriod = cycles / 1024;
     270:	3a e0       	ldi	r19, 0x0A	; 10
     272:	b6 95       	lsr	r27
     274:	a7 95       	ror	r26
     276:	97 95       	ror	r25
     278:	87 95       	ror	r24
     27a:	3a 95       	dec	r19
     27c:	d1 f7       	brne	.-12     	; 0x272 <_Z9initTimerv+0xa2>
     27e:	05 c0       	rjmp	.+10     	; 0x28a <_Z9initTimerv+0xba>
	} else {
		clockSelectBits = _BV(CS12) | _BV(CS10);
     280:	85 e0       	ldi	r24, 0x05	; 5
     282:	80 93 8e 05 	sts	0x058E, r24
		pwmPeriod = TIMER1_RESOLUTION - 1;
     286:	8f ef       	ldi	r24, 0xFF	; 255
     288:	9f ef       	ldi	r25, 0xFF	; 255
     28a:	90 93 90 05 	sts	0x0590, r25
     28e:	80 93 8f 05 	sts	0x058F, r24
	}
	ICR1 = pwmPeriod;
     292:	80 91 8f 05 	lds	r24, 0x058F
     296:	90 91 90 05 	lds	r25, 0x0590
     29a:	90 93 87 00 	sts	0x0087, r25
     29e:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = _BV(WGM13) | clockSelectBits;
     2a2:	80 91 8e 05 	lds	r24, 0x058E
     2a6:	80 61       	ori	r24, 0x10	; 16
     2a8:	80 93 81 00 	sts	0x0081, r24
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) OCR1C = dutyCycle;
	#endif
    }
    void pwm(char pin, unsigned int duty) __attribute__((always_inline)) {
	if (pin == TIMER1_A_PIN) { pinMode(TIMER1_A_PIN, OUTPUT); TCCR1A |= _BV(COM1A1); }
     2ac:	61 e0       	ldi	r22, 0x01	; 1
     2ae:	89 e0       	ldi	r24, 0x09	; 9
     2b0:	0e 94 76 23 	call	0x46ec	; 0x46ec <pinMode>
     2b4:	80 91 80 00 	lds	r24, 0x0080
     2b8:	80 68       	ori	r24, 0x80	; 128
     2ba:	80 93 80 00 	sts	0x0080, r24

    //****************************
    //  PWM outputs
    //****************************
    void setPwmDuty(char pin, unsigned int duty) __attribute__((always_inline)) {
	unsigned long dutyCycle = pwmPeriod;
     2be:	80 91 8f 05 	lds	r24, 0x058F
     2c2:	90 91 90 05 	lds	r25, 0x0590
	dutyCycle *= duty;
     2c6:	a0 e0       	ldi	r26, 0x00	; 0
     2c8:	b0 e0       	ldi	r27, 0x00	; 0
	dutyCycle >>= 10;
     2ca:	b6 95       	lsr	r27
     2cc:	a7 95       	ror	r26
     2ce:	97 95       	ror	r25
     2d0:	87 95       	ror	r24
	if (pin == TIMER1_A_PIN) OCR1A = dutyCycle;
     2d2:	90 93 89 00 	sts	0x0089, r25
     2d6:	80 93 88 00 	sts	0x0088, r24
	#endif
	#ifdef TIMER1_C_PIN
	else if (pin == TIMER1_C_PIN) { pinMode(TIMER1_C_PIN, OUTPUT); TCCR1A |= _BV(COM1C1); }
	#endif
	setPwmDuty(pin, duty);
	TCCR1B = _BV(WGM13) | clockSelectBits;
     2da:	80 91 8e 05 	lds	r24, 0x058E
     2de:	80 61       	ori	r24, 0x10	; 16
     2e0:	80 93 81 00 	sts	0x0081, r24

    //****************************
    //  Interrupt Function
    //****************************
    void attachInterrupt(void (*isr)()) __attribute__((always_inline)) {
	isrCallback = isr;
     2e4:	88 e9       	ldi	r24, 0x98	; 152
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	90 93 8d 05 	sts	0x058D, r25
     2ec:	80 93 8c 05 	sts	0x058C, r24
	TIMSK1 = _BV(TOIE1);
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	80 93 6f 00 	sts	0x006F, r24
     2f6:	08 95       	ret

000002f8 <_Z17update_start_stopv>:

//////////////////////////
//update_start_stop
/////////////////////////
void update_start_stop()
{
     2f8:	cf 93       	push	r28
    start_stop_flag = start_stop_flag ^ 1;
     2fa:	80 91 32 03 	lds	r24, 0x0332
     2fe:	c1 e0       	ldi	r28, 0x01	; 1
     300:	8c 27       	eor	r24, r28
     302:	80 93 32 03 	sts	0x0332, r24
       
  //  Serial.print("start_stop_flag: "); 
   // Serial.println(start_stop_flag); 
    
    if (start_stop_flag == 0)
     306:	80 91 32 03 	lds	r24, 0x0332
     30a:	81 11       	cpse	r24, r1
     30c:	0a c0       	rjmp	.+20     	; 0x322 <_Z17update_start_stopv+0x2a>
	TCCR1B = 0;
	TCNT1 = 0;		// TODO: does this cause an undesired interrupt?
	resume();
    }
    void stop() __attribute__((always_inline)) {
	TCCR1B = _BV(WGM13);
     30e:	80 e1       	ldi	r24, 0x10	; 16
     310:	80 93 81 00 	sts	0x0081, r24
    {   
      Timer1.stop(); 
      digitalWrite(INDICATOR_PIN, 0);
     314:	60 e0       	ldi	r22, 0x00	; 0
     316:	8d e0       	ldi	r24, 0x0D	; 13
     318:	0e 94 b2 23 	call	0x4764	; 0x4764 <digitalWrite>
        
      #ifdef DEBUG_ON
        Serial.println("Timer Stop ");
     31c:	60 e1       	ldi	r22, 0x10	; 16
     31e:	71 e0       	ldi	r23, 0x01	; 1
     320:	75 c0       	rjmp	.+234    	; 0x40c <_Z17update_start_stopv+0x114>
      #endif  
    }      
    else
    {    
       long interval =  calc_timer_val_from_bpm(current_bpm);
     322:	80 91 06 01 	lds	r24, 0x0106
     326:	0e 94 a1 00 	call	0x142	; 0x142 <_Z23calc_timer_val_from_bpmh>
  public:
    //****************************
    //  Configuration
    //****************************
    void initialize(unsigned long microseconds=1000000) __attribute__((always_inline)) {
	TCCR1B = _BV(WGM13);        // set mode as phase and frequency correct pwm, stop the timer
     32a:	20 e1       	ldi	r18, 0x10	; 16
     32c:	20 93 81 00 	sts	0x0081, r18
	TCCR1A = 0;                 // clear control register A 
     330:	10 92 80 00 	sts	0x0080, r1
	setPeriod(microseconds);
    }
    void setPeriod(unsigned long microseconds) __attribute__((always_inline)) {
	const unsigned long cycles = (F_CPU / 2000000) * microseconds;
     334:	dc 01       	movw	r26, r24
     336:	cb 01       	movw	r24, r22
     338:	63 e0       	ldi	r22, 0x03	; 3
     33a:	88 0f       	add	r24, r24
     33c:	99 1f       	adc	r25, r25
     33e:	aa 1f       	adc	r26, r26
     340:	bb 1f       	adc	r27, r27
     342:	6a 95       	dec	r22
     344:	d1 f7       	brne	.-12     	; 0x33a <_Z17update_start_stopv+0x42>
	if (cycles < TIMER1_RESOLUTION) {
     346:	00 97       	sbiw	r24, 0x00	; 0
     348:	21 e0       	ldi	r18, 0x01	; 1
     34a:	a2 07       	cpc	r26, r18
     34c:	b1 05       	cpc	r27, r1
     34e:	18 f4       	brcc	.+6      	; 0x356 <_Z17update_start_stopv+0x5e>
		clockSelectBits = _BV(CS10);
     350:	c0 93 8e 05 	sts	0x058E, r28
     354:	42 c0       	rjmp	.+132    	; 0x3da <_Z17update_start_stopv+0xe2>
		pwmPeriod = cycles;
	} else
	if (cycles < TIMER1_RESOLUTION * 8) {
     356:	00 97       	sbiw	r24, 0x00	; 0
     358:	28 e0       	ldi	r18, 0x08	; 8
     35a:	a2 07       	cpc	r26, r18
     35c:	b1 05       	cpc	r27, r1
     35e:	58 f4       	brcc	.+22     	; 0x376 <_Z17update_start_stopv+0x7e>
		clockSelectBits = _BV(CS11);
     360:	22 e0       	ldi	r18, 0x02	; 2
     362:	20 93 8e 05 	sts	0x058E, r18
		pwmPeriod = cycles / 8;
     366:	53 e0       	ldi	r21, 0x03	; 3
     368:	b6 95       	lsr	r27
     36a:	a7 95       	ror	r26
     36c:	97 95       	ror	r25
     36e:	87 95       	ror	r24
     370:	5a 95       	dec	r21
     372:	d1 f7       	brne	.-12     	; 0x368 <_Z17update_start_stopv+0x70>
     374:	32 c0       	rjmp	.+100    	; 0x3da <_Z17update_start_stopv+0xe2>
	} else
	if (cycles < TIMER1_RESOLUTION * 64) {
     376:	00 97       	sbiw	r24, 0x00	; 0
     378:	20 e4       	ldi	r18, 0x40	; 64
     37a:	a2 07       	cpc	r26, r18
     37c:	b1 05       	cpc	r27, r1
     37e:	58 f4       	brcc	.+22     	; 0x396 <_Z17update_start_stopv+0x9e>
		clockSelectBits = _BV(CS11) | _BV(CS10);
     380:	23 e0       	ldi	r18, 0x03	; 3
     382:	20 93 8e 05 	sts	0x058E, r18
		pwmPeriod = cycles / 64;
     386:	46 e0       	ldi	r20, 0x06	; 6
     388:	b6 95       	lsr	r27
     38a:	a7 95       	ror	r26
     38c:	97 95       	ror	r25
     38e:	87 95       	ror	r24
     390:	4a 95       	dec	r20
     392:	d1 f7       	brne	.-12     	; 0x388 <_Z17update_start_stopv+0x90>
     394:	22 c0       	rjmp	.+68     	; 0x3da <_Z17update_start_stopv+0xe2>
	} else
	if (cycles < TIMER1_RESOLUTION * 256) {
     396:	00 97       	sbiw	r24, 0x00	; 0
     398:	a1 05       	cpc	r26, r1
     39a:	21 e0       	ldi	r18, 0x01	; 1
     39c:	b2 07       	cpc	r27, r18
     39e:	40 f4       	brcc	.+16     	; 0x3b0 <_Z17update_start_stopv+0xb8>
		clockSelectBits = _BV(CS12);
     3a0:	24 e0       	ldi	r18, 0x04	; 4
     3a2:	20 93 8e 05 	sts	0x058E, r18
		pwmPeriod = cycles / 256;
     3a6:	89 2f       	mov	r24, r25
     3a8:	9a 2f       	mov	r25, r26
     3aa:	ab 2f       	mov	r26, r27
     3ac:	bb 27       	eor	r27, r27
     3ae:	15 c0       	rjmp	.+42     	; 0x3da <_Z17update_start_stopv+0xe2>
	} else
	if (cycles < TIMER1_RESOLUTION * 1024) {
     3b0:	00 97       	sbiw	r24, 0x00	; 0
     3b2:	a1 05       	cpc	r26, r1
     3b4:	24 e0       	ldi	r18, 0x04	; 4
     3b6:	b2 07       	cpc	r27, r18
     3b8:	58 f4       	brcc	.+22     	; 0x3d0 <_Z17update_start_stopv+0xd8>
		clockSelectBits = _BV(CS12) | _BV(CS10);
     3ba:	25 e0       	ldi	r18, 0x05	; 5
     3bc:	20 93 8e 05 	sts	0x058E, r18
		pwmPeriod = cycles / 1024;
     3c0:	2a e0       	ldi	r18, 0x0A	; 10
     3c2:	b6 95       	lsr	r27
     3c4:	a7 95       	ror	r26
     3c6:	97 95       	ror	r25
     3c8:	87 95       	ror	r24
     3ca:	2a 95       	dec	r18
     3cc:	d1 f7       	brne	.-12     	; 0x3c2 <_Z17update_start_stopv+0xca>
     3ce:	05 c0       	rjmp	.+10     	; 0x3da <_Z17update_start_stopv+0xe2>
	} else {
		clockSelectBits = _BV(CS12) | _BV(CS10);
     3d0:	85 e0       	ldi	r24, 0x05	; 5
     3d2:	80 93 8e 05 	sts	0x058E, r24
		pwmPeriod = TIMER1_RESOLUTION - 1;
     3d6:	8f ef       	ldi	r24, 0xFF	; 255
     3d8:	9f ef       	ldi	r25, 0xFF	; 255
     3da:	90 93 90 05 	sts	0x0590, r25
     3de:	80 93 8f 05 	sts	0x058F, r24
	}
	ICR1 = pwmPeriod;
     3e2:	80 91 8f 05 	lds	r24, 0x058F
     3e6:	90 91 90 05 	lds	r25, 0x0590
     3ea:	90 93 87 00 	sts	0x0087, r25
     3ee:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = _BV(WGM13) | clockSelectBits;
     3f2:	80 91 8e 05 	lds	r24, 0x058E
     3f6:	80 61       	ori	r24, 0x10	; 16
     3f8:	80 93 81 00 	sts	0x0081, r24
       Timer1.initialize(interval) ;
       
       #ifdef DEBUG_ON
          Serial.println("------------------------" ); 
     3fc:	6c e1       	ldi	r22, 0x1C	; 28
     3fe:	71 e0       	ldi	r23, 0x01	; 1
     400:	81 e5       	ldi	r24, 0x51	; 81
     402:	96 e0       	ldi	r25, 0x06	; 6
     404:	0e 94 58 21 	call	0x42b0	; 0x42b0 <_ZN5Print7printlnEPKc>
          Serial.println("Timer Start ");     
     408:	65 e3       	ldi	r22, 0x35	; 53
     40a:	71 e0       	ldi	r23, 0x01	; 1
     40c:	81 e5       	ldi	r24, 0x51	; 81
     40e:	96 e0       	ldi	r25, 0x06	; 6
     // Serial.println(interval); 
     //  Serial.println("------------------------\n" );    
       #endif  
                    
     }  
}
     410:	cf 91       	pop	r28
       long interval =  calc_timer_val_from_bpm(current_bpm);
       Timer1.initialize(interval) ;
       
       #ifdef DEBUG_ON
          Serial.println("------------------------" ); 
          Serial.println("Timer Start ");     
     412:	0c 94 58 21 	jmp	0x42b0	; 0x42b0 <_ZN5Print7printlnEPKc>

00000416 <_Z13decrement_bpmv>:

//////////////////////////
//
/////////////////////////
void decrement_bpm()
{
     416:	cf 92       	push	r12
     418:	df 92       	push	r13
     41a:	ef 92       	push	r14
     41c:	ff 92       	push	r15
  if( (current_bpm+1) > MIN_BPM)
     41e:	80 91 06 01 	lds	r24, 0x0106
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	c2 97       	sbiw	r24, 0x32	; 50
     426:	0c f4       	brge	.+2      	; 0x42a <_Z13decrement_bpmv+0x14>
     428:	a2 c0       	rjmp	.+324    	; 0x56e <_Z13decrement_bpmv+0x158>
  {
    current_bpm = current_bpm - 1;
     42a:	80 91 06 01 	lds	r24, 0x0106
     42e:	81 50       	subi	r24, 0x01	; 1
     430:	80 93 06 01 	sts	0x0106, r24
    long val =  calc_timer_val_from_bpm(current_bpm);
     434:	80 91 06 01 	lds	r24, 0x0106
     438:	0e 94 a1 00 	call	0x142	; 0x142 <_Z23calc_timer_val_from_bpmh>
     43c:	6b 01       	movw	r12, r22
     43e:	7c 01       	movw	r14, r24
	TCCR1B = _BV(WGM13);        // set mode as phase and frequency correct pwm, stop the timer
	TCCR1A = 0;                 // clear control register A 
	setPeriod(microseconds);
    }
    void setPeriod(unsigned long microseconds) __attribute__((always_inline)) {
	const unsigned long cycles = (F_CPU / 2000000) * microseconds;
     440:	dc 01       	movw	r26, r24
     442:	cb 01       	movw	r24, r22
     444:	63 e0       	ldi	r22, 0x03	; 3
     446:	88 0f       	add	r24, r24
     448:	99 1f       	adc	r25, r25
     44a:	aa 1f       	adc	r26, r26
     44c:	bb 1f       	adc	r27, r27
     44e:	6a 95       	dec	r22
     450:	d1 f7       	brne	.-12     	; 0x446 <_Z13decrement_bpmv+0x30>
	if (cycles < TIMER1_RESOLUTION) {
     452:	00 97       	sbiw	r24, 0x00	; 0
     454:	21 e0       	ldi	r18, 0x01	; 1
     456:	a2 07       	cpc	r26, r18
     458:	b1 05       	cpc	r27, r1
     45a:	20 f4       	brcc	.+8      	; 0x464 <_Z13decrement_bpmv+0x4e>
		clockSelectBits = _BV(CS10);
     45c:	21 e0       	ldi	r18, 0x01	; 1
     45e:	20 93 8e 05 	sts	0x058E, r18
     462:	42 c0       	rjmp	.+132    	; 0x4e8 <_Z13decrement_bpmv+0xd2>
		pwmPeriod = cycles;
	} else
	if (cycles < TIMER1_RESOLUTION * 8) {
     464:	00 97       	sbiw	r24, 0x00	; 0
     466:	28 e0       	ldi	r18, 0x08	; 8
     468:	a2 07       	cpc	r26, r18
     46a:	b1 05       	cpc	r27, r1
     46c:	58 f4       	brcc	.+22     	; 0x484 <_Z13decrement_bpmv+0x6e>
		clockSelectBits = _BV(CS11);
     46e:	22 e0       	ldi	r18, 0x02	; 2
     470:	20 93 8e 05 	sts	0x058E, r18
		pwmPeriod = cycles / 8;
     474:	53 e0       	ldi	r21, 0x03	; 3
     476:	b6 95       	lsr	r27
     478:	a7 95       	ror	r26
     47a:	97 95       	ror	r25
     47c:	87 95       	ror	r24
     47e:	5a 95       	dec	r21
     480:	d1 f7       	brne	.-12     	; 0x476 <_Z13decrement_bpmv+0x60>
     482:	32 c0       	rjmp	.+100    	; 0x4e8 <_Z13decrement_bpmv+0xd2>
	} else
	if (cycles < TIMER1_RESOLUTION * 64) {
     484:	00 97       	sbiw	r24, 0x00	; 0
     486:	20 e4       	ldi	r18, 0x40	; 64
     488:	a2 07       	cpc	r26, r18
     48a:	b1 05       	cpc	r27, r1
     48c:	58 f4       	brcc	.+22     	; 0x4a4 <_Z13decrement_bpmv+0x8e>
		clockSelectBits = _BV(CS11) | _BV(CS10);
     48e:	23 e0       	ldi	r18, 0x03	; 3
     490:	20 93 8e 05 	sts	0x058E, r18
		pwmPeriod = cycles / 64;
     494:	46 e0       	ldi	r20, 0x06	; 6
     496:	b6 95       	lsr	r27
     498:	a7 95       	ror	r26
     49a:	97 95       	ror	r25
     49c:	87 95       	ror	r24
     49e:	4a 95       	dec	r20
     4a0:	d1 f7       	brne	.-12     	; 0x496 <_Z13decrement_bpmv+0x80>
     4a2:	22 c0       	rjmp	.+68     	; 0x4e8 <_Z13decrement_bpmv+0xd2>
	} else
	if (cycles < TIMER1_RESOLUTION * 256) {
     4a4:	00 97       	sbiw	r24, 0x00	; 0
     4a6:	a1 05       	cpc	r26, r1
     4a8:	21 e0       	ldi	r18, 0x01	; 1
     4aa:	b2 07       	cpc	r27, r18
     4ac:	40 f4       	brcc	.+16     	; 0x4be <_Z13decrement_bpmv+0xa8>
		clockSelectBits = _BV(CS12);
     4ae:	24 e0       	ldi	r18, 0x04	; 4
     4b0:	20 93 8e 05 	sts	0x058E, r18
		pwmPeriod = cycles / 256;
     4b4:	89 2f       	mov	r24, r25
     4b6:	9a 2f       	mov	r25, r26
     4b8:	ab 2f       	mov	r26, r27
     4ba:	bb 27       	eor	r27, r27
     4bc:	15 c0       	rjmp	.+42     	; 0x4e8 <_Z13decrement_bpmv+0xd2>
	} else
	if (cycles < TIMER1_RESOLUTION * 1024) {
     4be:	00 97       	sbiw	r24, 0x00	; 0
     4c0:	a1 05       	cpc	r26, r1
     4c2:	24 e0       	ldi	r18, 0x04	; 4
     4c4:	b2 07       	cpc	r27, r18
     4c6:	58 f4       	brcc	.+22     	; 0x4de <_Z13decrement_bpmv+0xc8>
		clockSelectBits = _BV(CS12) | _BV(CS10);
     4c8:	25 e0       	ldi	r18, 0x05	; 5
     4ca:	20 93 8e 05 	sts	0x058E, r18
		pwmPeriod = cycles / 1024;
     4ce:	2a e0       	ldi	r18, 0x0A	; 10
     4d0:	b6 95       	lsr	r27
     4d2:	a7 95       	ror	r26
     4d4:	97 95       	ror	r25
     4d6:	87 95       	ror	r24
     4d8:	2a 95       	dec	r18
     4da:	d1 f7       	brne	.-12     	; 0x4d0 <_Z13decrement_bpmv+0xba>
     4dc:	05 c0       	rjmp	.+10     	; 0x4e8 <_Z13decrement_bpmv+0xd2>
	} else {
		clockSelectBits = _BV(CS12) | _BV(CS10);
     4de:	85 e0       	ldi	r24, 0x05	; 5
     4e0:	80 93 8e 05 	sts	0x058E, r24
		pwmPeriod = TIMER1_RESOLUTION - 1;
     4e4:	8f ef       	ldi	r24, 0xFF	; 255
     4e6:	9f ef       	ldi	r25, 0xFF	; 255
     4e8:	90 93 90 05 	sts	0x0590, r25
     4ec:	80 93 8f 05 	sts	0x058F, r24
	}
	ICR1 = pwmPeriod;
     4f0:	80 91 8f 05 	lds	r24, 0x058F
     4f4:	90 91 90 05 	lds	r25, 0x0590
     4f8:	90 93 87 00 	sts	0x0087, r25
     4fc:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = _BV(WGM13) | clockSelectBits;
     500:	80 91 8e 05 	lds	r24, 0x058E
     504:	80 61       	ori	r24, 0x10	; 16
     506:	80 93 81 00 	sts	0x0081, r24
    Timer1.setPeriod(val);    

    #ifdef DEBUG_ON
      Serial.println("-------------------");
     50a:	61 e2       	ldi	r22, 0x21	; 33
     50c:	71 e0       	ldi	r23, 0x01	; 1
     50e:	81 e5       	ldi	r24, 0x51	; 81
     510:	96 e0       	ldi	r25, 0x06	; 6
     512:	0e 94 58 21 	call	0x42b0	; 0x42b0 <_ZN5Print7printlnEPKc>
      Serial.println("Dec BPM");
     516:	62 e4       	ldi	r22, 0x42	; 66
     518:	71 e0       	ldi	r23, 0x01	; 1
     51a:	81 e5       	ldi	r24, 0x51	; 81
     51c:	96 e0       	ldi	r25, 0x06	; 6
     51e:	0e 94 58 21 	call	0x42b0	; 0x42b0 <_ZN5Print7printlnEPKc>
      Serial.print("current_bpm: ");
     522:	6a e4       	ldi	r22, 0x4A	; 74
     524:	71 e0       	ldi	r23, 0x01	; 1
     526:	81 e5       	ldi	r24, 0x51	; 81
     528:	96 e0       	ldi	r25, 0x06	; 6
     52a:	0e 94 4b 21 	call	0x4296	; 0x4296 <_ZN5Print5printEPKc>
      Serial.println(current_bpm);
     52e:	60 91 06 01 	lds	r22, 0x0106
     532:	4a e0       	ldi	r20, 0x0A	; 10
     534:	50 e0       	ldi	r21, 0x00	; 0
     536:	81 e5       	ldi	r24, 0x51	; 81
     538:	96 e0       	ldi	r25, 0x06	; 6
     53a:	0e 94 27 22 	call	0x444e	; 0x444e <_ZN5Print7printlnEhi>
              
      Serial.print("calc_timer_val: ");
     53e:	68 e5       	ldi	r22, 0x58	; 88
     540:	71 e0       	ldi	r23, 0x01	; 1
     542:	81 e5       	ldi	r24, 0x51	; 81
     544:	96 e0       	ldi	r25, 0x06	; 6
     546:	0e 94 4b 21 	call	0x4296	; 0x4296 <_ZN5Print5printEPKc>
      Serial.println(val);
     54a:	2a e0       	ldi	r18, 0x0A	; 10
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	b7 01       	movw	r22, r14
     550:	a6 01       	movw	r20, r12
     552:	81 e5       	ldi	r24, 0x51	; 81
     554:	96 e0       	ldi	r25, 0x06	; 6
     556:	0e 94 08 22 	call	0x4410	; 0x4410 <_ZN5Print7printlnEli>
      Serial.println("-------------------");
     55a:	61 e2       	ldi	r22, 0x21	; 33
     55c:	71 e0       	ldi	r23, 0x01	; 1
     55e:	81 e5       	ldi	r24, 0x51	; 81
     560:	96 e0       	ldi	r25, 0x06	; 6
    #endif  
  }
}
     562:	ff 90       	pop	r15
     564:	ef 90       	pop	r14
     566:	df 90       	pop	r13
     568:	cf 90       	pop	r12
      Serial.print("current_bpm: ");
      Serial.println(current_bpm);
              
      Serial.print("calc_timer_val: ");
      Serial.println(val);
      Serial.println("-------------------");
     56a:	0c 94 58 21 	jmp	0x42b0	; 0x42b0 <_ZN5Print7printlnEPKc>
    #endif  
  }
}
     56e:	ff 90       	pop	r15
     570:	ef 90       	pop	r14
     572:	df 90       	pop	r13
     574:	cf 90       	pop	r12
     576:	08 95       	ret

00000578 <_Z13increment_bpmv>:

//////////////////////////
//
/////////////////////////
void increment_bpm()
{   
     578:	cf 92       	push	r12
     57a:	df 92       	push	r13
     57c:	ef 92       	push	r14
     57e:	ff 92       	push	r15
  if( (current_bpm+1) < MAX_BPM)
     580:	80 91 06 01 	lds	r24, 0x0106
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	8b 3d       	cpi	r24, 0xDB	; 219
     588:	91 05       	cpc	r25, r1
     58a:	0c f0       	brlt	.+2      	; 0x58e <_Z13increment_bpmv+0x16>
     58c:	a7 c0       	rjmp	.+334    	; 0x6dc <_Z13increment_bpmv+0x164>
  {
    current_bpm = current_bpm + 1;
     58e:	80 91 06 01 	lds	r24, 0x0106
     592:	8f 5f       	subi	r24, 0xFF	; 255
     594:	80 93 06 01 	sts	0x0106, r24
    long val =  calc_timer_val_from_bpm(current_bpm);
     598:	80 91 06 01 	lds	r24, 0x0106
     59c:	0e 94 a1 00 	call	0x142	; 0x142 <_Z23calc_timer_val_from_bpmh>
     5a0:	6b 01       	movw	r12, r22
     5a2:	7c 01       	movw	r14, r24
  public:
    //****************************
    //  Configuration
    //****************************
    void initialize(unsigned long microseconds=1000000) __attribute__((always_inline)) {
	TCCR1B = _BV(WGM13);        // set mode as phase and frequency correct pwm, stop the timer
     5a4:	80 e1       	ldi	r24, 0x10	; 16
     5a6:	80 93 81 00 	sts	0x0081, r24
	TCCR1A = 0;                 // clear control register A 
     5aa:	10 92 80 00 	sts	0x0080, r1
	setPeriod(microseconds);
    }
    void setPeriod(unsigned long microseconds) __attribute__((always_inline)) {
	const unsigned long cycles = (F_CPU / 2000000) * microseconds;
     5ae:	d7 01       	movw	r26, r14
     5b0:	c6 01       	movw	r24, r12
     5b2:	63 e0       	ldi	r22, 0x03	; 3
     5b4:	88 0f       	add	r24, r24
     5b6:	99 1f       	adc	r25, r25
     5b8:	aa 1f       	adc	r26, r26
     5ba:	bb 1f       	adc	r27, r27
     5bc:	6a 95       	dec	r22
     5be:	d1 f7       	brne	.-12     	; 0x5b4 <_Z13increment_bpmv+0x3c>
	if (cycles < TIMER1_RESOLUTION) {
     5c0:	00 97       	sbiw	r24, 0x00	; 0
     5c2:	21 e0       	ldi	r18, 0x01	; 1
     5c4:	a2 07       	cpc	r26, r18
     5c6:	b1 05       	cpc	r27, r1
     5c8:	20 f4       	brcc	.+8      	; 0x5d2 <_Z13increment_bpmv+0x5a>
		clockSelectBits = _BV(CS10);
     5ca:	21 e0       	ldi	r18, 0x01	; 1
     5cc:	20 93 8e 05 	sts	0x058E, r18
     5d0:	42 c0       	rjmp	.+132    	; 0x656 <_Z13increment_bpmv+0xde>
		pwmPeriod = cycles;
	} else
	if (cycles < TIMER1_RESOLUTION * 8) {
     5d2:	00 97       	sbiw	r24, 0x00	; 0
     5d4:	28 e0       	ldi	r18, 0x08	; 8
     5d6:	a2 07       	cpc	r26, r18
     5d8:	b1 05       	cpc	r27, r1
     5da:	58 f4       	brcc	.+22     	; 0x5f2 <_Z13increment_bpmv+0x7a>
		clockSelectBits = _BV(CS11);
     5dc:	22 e0       	ldi	r18, 0x02	; 2
     5de:	20 93 8e 05 	sts	0x058E, r18
		pwmPeriod = cycles / 8;
     5e2:	53 e0       	ldi	r21, 0x03	; 3
     5e4:	b6 95       	lsr	r27
     5e6:	a7 95       	ror	r26
     5e8:	97 95       	ror	r25
     5ea:	87 95       	ror	r24
     5ec:	5a 95       	dec	r21
     5ee:	d1 f7       	brne	.-12     	; 0x5e4 <_Z13increment_bpmv+0x6c>
     5f0:	32 c0       	rjmp	.+100    	; 0x656 <_Z13increment_bpmv+0xde>
	} else
	if (cycles < TIMER1_RESOLUTION * 64) {
     5f2:	00 97       	sbiw	r24, 0x00	; 0
     5f4:	20 e4       	ldi	r18, 0x40	; 64
     5f6:	a2 07       	cpc	r26, r18
     5f8:	b1 05       	cpc	r27, r1
     5fa:	58 f4       	brcc	.+22     	; 0x612 <_Z13increment_bpmv+0x9a>
		clockSelectBits = _BV(CS11) | _BV(CS10);
     5fc:	23 e0       	ldi	r18, 0x03	; 3
     5fe:	20 93 8e 05 	sts	0x058E, r18
		pwmPeriod = cycles / 64;
     602:	46 e0       	ldi	r20, 0x06	; 6
     604:	b6 95       	lsr	r27
     606:	a7 95       	ror	r26
     608:	97 95       	ror	r25
     60a:	87 95       	ror	r24
     60c:	4a 95       	dec	r20
     60e:	d1 f7       	brne	.-12     	; 0x604 <_Z13increment_bpmv+0x8c>
     610:	22 c0       	rjmp	.+68     	; 0x656 <_Z13increment_bpmv+0xde>
	} else
	if (cycles < TIMER1_RESOLUTION * 256) {
     612:	00 97       	sbiw	r24, 0x00	; 0
     614:	a1 05       	cpc	r26, r1
     616:	21 e0       	ldi	r18, 0x01	; 1
     618:	b2 07       	cpc	r27, r18
     61a:	40 f4       	brcc	.+16     	; 0x62c <_Z13increment_bpmv+0xb4>
		clockSelectBits = _BV(CS12);
     61c:	24 e0       	ldi	r18, 0x04	; 4
     61e:	20 93 8e 05 	sts	0x058E, r18
		pwmPeriod = cycles / 256;
     622:	89 2f       	mov	r24, r25
     624:	9a 2f       	mov	r25, r26
     626:	ab 2f       	mov	r26, r27
     628:	bb 27       	eor	r27, r27
     62a:	15 c0       	rjmp	.+42     	; 0x656 <_Z13increment_bpmv+0xde>
	} else
	if (cycles < TIMER1_RESOLUTION * 1024) {
     62c:	00 97       	sbiw	r24, 0x00	; 0
     62e:	a1 05       	cpc	r26, r1
     630:	24 e0       	ldi	r18, 0x04	; 4
     632:	b2 07       	cpc	r27, r18
     634:	58 f4       	brcc	.+22     	; 0x64c <_Z13increment_bpmv+0xd4>
		clockSelectBits = _BV(CS12) | _BV(CS10);
     636:	25 e0       	ldi	r18, 0x05	; 5
     638:	20 93 8e 05 	sts	0x058E, r18
		pwmPeriod = cycles / 1024;
     63c:	2a e0       	ldi	r18, 0x0A	; 10
     63e:	b6 95       	lsr	r27
     640:	a7 95       	ror	r26
     642:	97 95       	ror	r25
     644:	87 95       	ror	r24
     646:	2a 95       	dec	r18
     648:	d1 f7       	brne	.-12     	; 0x63e <_Z13increment_bpmv+0xc6>
     64a:	05 c0       	rjmp	.+10     	; 0x656 <_Z13increment_bpmv+0xde>
	} else {
		clockSelectBits = _BV(CS12) | _BV(CS10);
     64c:	85 e0       	ldi	r24, 0x05	; 5
     64e:	80 93 8e 05 	sts	0x058E, r24
		pwmPeriod = TIMER1_RESOLUTION - 1;
     652:	8f ef       	ldi	r24, 0xFF	; 255
     654:	9f ef       	ldi	r25, 0xFF	; 255
     656:	90 93 90 05 	sts	0x0590, r25
     65a:	80 93 8f 05 	sts	0x058F, r24
	}
	ICR1 = pwmPeriod;
     65e:	80 91 8f 05 	lds	r24, 0x058F
     662:	90 91 90 05 	lds	r25, 0x0590
     666:	90 93 87 00 	sts	0x0087, r25
     66a:	80 93 86 00 	sts	0x0086, r24
	TCCR1B = _BV(WGM13) | clockSelectBits;
     66e:	80 91 8e 05 	lds	r24, 0x058E
     672:	80 61       	ori	r24, 0x10	; 16
     674:	80 93 81 00 	sts	0x0081, r24
    
    Timer1.initialize(val) ;    
       
    #ifdef DEBUG_ON      
      Serial.println("-------------------");
     678:	61 e2       	ldi	r22, 0x21	; 33
     67a:	71 e0       	ldi	r23, 0x01	; 1
     67c:	81 e5       	ldi	r24, 0x51	; 81
     67e:	96 e0       	ldi	r25, 0x06	; 6
     680:	0e 94 58 21 	call	0x42b0	; 0x42b0 <_ZN5Print7printlnEPKc>
      Serial.println("Dec BPM");    
     684:	62 e4       	ldi	r22, 0x42	; 66
     686:	71 e0       	ldi	r23, 0x01	; 1
     688:	81 e5       	ldi	r24, 0x51	; 81
     68a:	96 e0       	ldi	r25, 0x06	; 6
     68c:	0e 94 58 21 	call	0x42b0	; 0x42b0 <_ZN5Print7printlnEPKc>
      Serial.print("current_bpm: ");
     690:	6a e4       	ldi	r22, 0x4A	; 74
     692:	71 e0       	ldi	r23, 0x01	; 1
     694:	81 e5       	ldi	r24, 0x51	; 81
     696:	96 e0       	ldi	r25, 0x06	; 6
     698:	0e 94 4b 21 	call	0x4296	; 0x4296 <_ZN5Print5printEPKc>
      Serial.println(current_bpm);
     69c:	60 91 06 01 	lds	r22, 0x0106
     6a0:	4a e0       	ldi	r20, 0x0A	; 10
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	81 e5       	ldi	r24, 0x51	; 81
     6a6:	96 e0       	ldi	r25, 0x06	; 6
     6a8:	0e 94 27 22 	call	0x444e	; 0x444e <_ZN5Print7printlnEhi>
      
      Serial.print("calc_timer_val");
     6ac:	69 e6       	ldi	r22, 0x69	; 105
     6ae:	71 e0       	ldi	r23, 0x01	; 1
     6b0:	81 e5       	ldi	r24, 0x51	; 81
     6b2:	96 e0       	ldi	r25, 0x06	; 6
     6b4:	0e 94 4b 21 	call	0x4296	; 0x4296 <_ZN5Print5printEPKc>
      Serial.println(val);
     6b8:	2a e0       	ldi	r18, 0x0A	; 10
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	b7 01       	movw	r22, r14
     6be:	a6 01       	movw	r20, r12
     6c0:	81 e5       	ldi	r24, 0x51	; 81
     6c2:	96 e0       	ldi	r25, 0x06	; 6
     6c4:	0e 94 08 22 	call	0x4410	; 0x4410 <_ZN5Print7printlnEli>
      Serial.println("-------------------");    
     6c8:	61 e2       	ldi	r22, 0x21	; 33
     6ca:	71 e0       	ldi	r23, 0x01	; 1
     6cc:	81 e5       	ldi	r24, 0x51	; 81
     6ce:	96 e0       	ldi	r25, 0x06	; 6
    #endif    
  }      
}
     6d0:	ff 90       	pop	r15
     6d2:	ef 90       	pop	r14
     6d4:	df 90       	pop	r13
     6d6:	cf 90       	pop	r12
      Serial.print("current_bpm: ");
      Serial.println(current_bpm);
      
      Serial.print("calc_timer_val");
      Serial.println(val);
      Serial.println("-------------------");    
     6d8:	0c 94 58 21 	jmp	0x42b0	; 0x42b0 <_ZN5Print7printlnEPKc>
    #endif    
  }      
}
     6dc:	ff 90       	pop	r15
     6de:	ef 90       	pop	r14
     6e0:	df 90       	pop	r13
     6e2:	cf 90       	pop	r12
     6e4:	08 95       	ret

000006e6 <_Z8pciSetuph>:
//////////////////////////
//
/////////////////////////
void pciSetup(byte pin)
{
  *digitalPinToPCMSK(pin) |= bit (digitalPinToPCMSKbit(pin));  // enable pin
     6e6:	88 30       	cpi	r24, 0x08	; 8
     6e8:	38 f0       	brcs	.+14     	; 0x6f8 <_Z8pciSetuph+0x12>
     6ea:	8e 30       	cpi	r24, 0x0E	; 14
     6ec:	40 f0       	brcs	.+16     	; 0x6fe <_Z8pciSetuph+0x18>
     6ee:	86 31       	cpi	r24, 0x16	; 22
     6f0:	48 f4       	brcc	.+18     	; 0x704 <_Z8pciSetuph+0x1e>
     6f2:	ec e6       	ldi	r30, 0x6C	; 108
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	08 c0       	rjmp	.+16     	; 0x708 <_Z8pciSetuph+0x22>
     6f8:	ed e6       	ldi	r30, 0x6D	; 109
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	05 c0       	rjmp	.+10     	; 0x708 <_Z8pciSetuph+0x22>
     6fe:	eb e6       	ldi	r30, 0x6B	; 107
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	02 c0       	rjmp	.+4      	; 0x708 <_Z8pciSetuph+0x22>
     704:	e0 e0       	ldi	r30, 0x00	; 0
     706:	f0 e0       	ldi	r31, 0x00	; 0
     708:	90 81       	ld	r25, Z
     70a:	88 30       	cpi	r24, 0x08	; 8
     70c:	68 f4       	brcc	.+26     	; 0x728 <_Z8pciSetuph+0x42>
     70e:	41 e0       	ldi	r20, 0x01	; 1
     710:	50 e0       	ldi	r21, 0x00	; 0
     712:	60 e0       	ldi	r22, 0x00	; 0
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	08 2e       	mov	r0, r24
     718:	04 c0       	rjmp	.+8      	; 0x722 <_Z8pciSetuph+0x3c>
     71a:	44 0f       	add	r20, r20
     71c:	55 1f       	adc	r21, r21
     71e:	66 1f       	adc	r22, r22
     720:	77 1f       	adc	r23, r23
     722:	0a 94       	dec	r0
     724:	d2 f7       	brpl	.-12     	; 0x71a <_Z8pciSetuph+0x34>
     726:	14 c0       	rjmp	.+40     	; 0x750 <_Z8pciSetuph+0x6a>
     728:	28 2f       	mov	r18, r24
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	8e 30       	cpi	r24, 0x0E	; 14
     72e:	18 f4       	brcc	.+6      	; 0x736 <_Z8pciSetuph+0x50>
     730:	28 50       	subi	r18, 0x08	; 8
     732:	31 09       	sbc	r19, r1
     734:	02 c0       	rjmp	.+4      	; 0x73a <_Z8pciSetuph+0x54>
     736:	2e 50       	subi	r18, 0x0E	; 14
     738:	31 09       	sbc	r19, r1
     73a:	41 e0       	ldi	r20, 0x01	; 1
     73c:	50 e0       	ldi	r21, 0x00	; 0
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	04 c0       	rjmp	.+8      	; 0x74c <_Z8pciSetuph+0x66>
     744:	44 0f       	add	r20, r20
     746:	55 1f       	adc	r21, r21
     748:	66 1f       	adc	r22, r22
     74a:	77 1f       	adc	r23, r23
     74c:	2a 95       	dec	r18
     74e:	d2 f7       	brpl	.-12     	; 0x744 <_Z8pciSetuph+0x5e>
     750:	49 2b       	or	r20, r25
     752:	40 83       	st	Z, r20
  PCIFR  |= bit (digitalPinToPCICRbit(pin)); // clear any outstanding interrupt
     754:	2b b3       	in	r18, 0x1b	; 27
     756:	88 30       	cpi	r24, 0x08	; 8
     758:	50 f0       	brcs	.+20     	; 0x76e <_Z8pciSetuph+0x88>
     75a:	31 e0       	ldi	r19, 0x01	; 1
     75c:	8e 30       	cpi	r24, 0x0E	; 14
     75e:	08 f4       	brcc	.+2      	; 0x762 <_Z8pciSetuph+0x7c>
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	91 e0       	ldi	r25, 0x01	; 1
     764:	01 c0       	rjmp	.+2      	; 0x768 <_Z8pciSetuph+0x82>
     766:	99 0f       	add	r25, r25
     768:	3a 95       	dec	r19
     76a:	ea f7       	brpl	.-6      	; 0x766 <_Z8pciSetuph+0x80>
     76c:	01 c0       	rjmp	.+2      	; 0x770 <_Z8pciSetuph+0x8a>
     76e:	94 e0       	ldi	r25, 0x04	; 4
     770:	92 2b       	or	r25, r18
     772:	9b bb       	out	0x1b, r25	; 27
  PCICR  |= bit (digitalPinToPCICRbit(pin)); // enable interrupt for the group
     774:	90 91 68 00 	lds	r25, 0x0068
     778:	88 30       	cpi	r24, 0x08	; 8
     77a:	50 f0       	brcs	.+20     	; 0x790 <_Z8pciSetuph+0xaa>
     77c:	21 e0       	ldi	r18, 0x01	; 1
     77e:	8e 30       	cpi	r24, 0x0E	; 14
     780:	08 f4       	brcc	.+2      	; 0x784 <_Z8pciSetuph+0x9e>
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	01 c0       	rjmp	.+2      	; 0x78a <_Z8pciSetuph+0xa4>
     788:	88 0f       	add	r24, r24
     78a:	2a 95       	dec	r18
     78c:	ea f7       	brpl	.-6      	; 0x788 <_Z8pciSetuph+0xa2>
     78e:	01 c0       	rjmp	.+2      	; 0x792 <_Z8pciSetuph+0xac>
     790:	84 e0       	ldi	r24, 0x04	; 4
     792:	89 2b       	or	r24, r25
     794:	80 93 68 00 	sts	0x0068, r24
     798:	08 95       	ret

0000079a <__vector_5>:

//////////////////////////
//Inc-Dec BPM Interupt
/////////////////////////
ISR (PCINT2_vect) 
{  
     79a:	1f 92       	push	r1
     79c:	0f 92       	push	r0
     79e:	0f b6       	in	r0, 0x3f	; 63
     7a0:	0f 92       	push	r0
     7a2:	11 24       	eor	r1, r1
     7a4:	2f 93       	push	r18
     7a6:	3f 93       	push	r19
     7a8:	4f 93       	push	r20
     7aa:	5f 93       	push	r21
     7ac:	6f 93       	push	r22
     7ae:	7f 93       	push	r23
     7b0:	8f 93       	push	r24
     7b2:	9f 93       	push	r25
     7b4:	af 93       	push	r26
     7b6:	bf 93       	push	r27
     7b8:	ef 93       	push	r30
     7ba:	ff 93       	push	r31
    
  *digitalPinToPCICR(START_STOP_PIN) &= ~(1<<digitalPinToPCICRbit(START_STOP_PIN));
     7bc:	80 91 68 00 	lds	r24, 0x0068
     7c0:	8b 7f       	andi	r24, 0xFB	; 251
     7c2:	80 93 68 00 	sts	0x0068, r24
   PCIFR  |= bit (digitalPinToPCICRbit(START_STOP_PIN)); // clear any outstanding interrupt
     7c6:	da 9a       	sbi	0x1b, 2	; 27
   
   delay(10000);
     7c8:	60 e1       	ldi	r22, 0x10	; 16
     7ca:	77 e2       	ldi	r23, 0x27	; 39
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	0e 94 cb 22 	call	0x4596	; 0x4596 <delay>
   //Serial.println(digitalRead(START_STOP_PIN) );  
      
  // handle pin change interrupt for D0 to D7 here
  //Serial.println("Interrupt Fired...For D0 to D7 - Inc-Dec BPM Interupt ");   
 
  if( digitalRead(START_STOP_PIN) == 0)
     7d4:	85 e0       	ldi	r24, 0x05	; 5
     7d6:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <digitalRead>
     7da:	89 2b       	or	r24, r25
     7dc:	19 f4       	brne	.+6      	; 0x7e4 <__vector_5+0x4a>
  {  
 //   Serial.println("start_stop");   
    
    update_start_stop();   
     7de:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z17update_start_stopv>
     7e2:	0c c0       	rjmp	.+24     	; 0x7fc <__vector_5+0x62>
  } 
  else if(digitalRead(INC_BPM_PIN) == 0 && digitalRead(DEC_BPM_PIN) == 1)
     7e4:	86 e0       	ldi	r24, 0x06	; 6
     7e6:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <digitalRead>
     7ea:	89 2b       	or	r24, r25
     7ec:	f1 f4       	brne	.+60     	; 0x82a <__vector_5+0x90>
     7ee:	87 e0       	ldi	r24, 0x07	; 7
     7f0:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <digitalRead>
     7f4:	01 97       	sbiw	r24, 0x01	; 1
     7f6:	c9 f4       	brne	.+50     	; 0x82a <__vector_5+0x90>
  {
    increment_bpm();  
     7f8:	0e 94 bc 02 	call	0x578	; 0x578 <_Z13increment_bpmv>
    decrement_bpm();
  }  

 updateDisplay();
 
 PCICR  |= bit (digitalPinToPCICRbit(START_STOP_PIN)); // enable interrupt for the group
     7fc:	80 91 68 00 	lds	r24, 0x0068
     800:	84 60       	ori	r24, 0x04	; 4
     802:	80 93 68 00 	sts	0x0068, r24
 PCIFR  |= bit (digitalPinToPCICRbit(START_STOP_PIN)); // clear any outstanding interrupt   
     806:	da 9a       	sbi	0x1b, 2	; 27
}
     808:	ff 91       	pop	r31
     80a:	ef 91       	pop	r30
     80c:	bf 91       	pop	r27
     80e:	af 91       	pop	r26
     810:	9f 91       	pop	r25
     812:	8f 91       	pop	r24
     814:	7f 91       	pop	r23
     816:	6f 91       	pop	r22
     818:	5f 91       	pop	r21
     81a:	4f 91       	pop	r20
     81c:	3f 91       	pop	r19
     81e:	2f 91       	pop	r18
     820:	0f 90       	pop	r0
     822:	0f be       	out	0x3f, r0	; 63
     824:	0f 90       	pop	r0
     826:	1f 90       	pop	r1
     828:	18 95       	reti
  } 
  else if(digitalRead(INC_BPM_PIN) == 0 && digitalRead(DEC_BPM_PIN) == 1)
  {
    increment_bpm();  
  }
  else if( digitalRead(DEC_BPM_PIN) == 0 && digitalRead(INC_BPM_PIN) == 1 )
     82a:	87 e0       	ldi	r24, 0x07	; 7
     82c:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <digitalRead>
     830:	89 2b       	or	r24, r25
     832:	21 f7       	brne	.-56     	; 0x7fc <__vector_5+0x62>
     834:	86 e0       	ldi	r24, 0x06	; 6
     836:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <digitalRead>
     83a:	01 97       	sbiw	r24, 0x01	; 1
     83c:	f9 f6       	brne	.-66     	; 0x7fc <__vector_5+0x62>
  {  
    decrement_bpm();
     83e:	0e 94 0b 02 	call	0x416	; 0x416 <_Z13decrement_bpmv>
     842:	dc cf       	rjmp	.-72     	; 0x7fc <__vector_5+0x62>

00000844 <_Z16initButtonIoPinsv>:

//////////////////////////
//
/////////////////////////
void initButtonIoPins()
{
     844:	cf 93       	push	r28
     846:	c0 e0       	ldi	r28, 0x00	; 0
  int i;
  
  // set pullups, if necessary
  for (i=0; i<=12; i++)
  {   
    digitalWrite(i,HIGH);  // enable pullup resistor
     848:	61 e0       	ldi	r22, 0x01	; 1
     84a:	8c 2f       	mov	r24, r28
     84c:	0e 94 b2 23 	call	0x4764	; 0x4764 <digitalWrite>
     850:	cf 5f       	subi	r28, 0xFF	; 255
void initButtonIoPins()
{
  int i;
  
  // set pullups, if necessary
  for (i=0; i<=12; i++)
     852:	cd 30       	cpi	r28, 0x0D	; 13
     854:	c9 f7       	brne	.-14     	; 0x848 <_Z16initButtonIoPinsv+0x4>
     856:	ce e0       	ldi	r28, 0x0E	; 14
    digitalWrite(i,HIGH);  // enable pullup resistor
  }

  for (i=A0; i<=A5; i++)
  {
      digitalWrite(i,HIGH);// enable pullup resistor
     858:	61 e0       	ldi	r22, 0x01	; 1
     85a:	8c 2f       	mov	r24, r28
     85c:	0e 94 b2 23 	call	0x4764	; 0x4764 <digitalWrite>
     860:	cf 5f       	subi	r28, 0xFF	; 255
  for (i=0; i<=12; i++)
  {   
    digitalWrite(i,HIGH);  // enable pullup resistor
  }

  for (i=A0; i<=A5; i++)
     862:	c4 31       	cpi	r28, 0x14	; 20
     864:	c9 f7       	brne	.-14     	; 0x858 <_Z16initButtonIoPinsv+0x14>
  
  // enable interrupt for pin...  
 // pciSetup(NEXT_ENTRY_PIN);//next entry
 // pciSetup(PREV_ENTRY_PIN);//prev entry
 
  pciSetup(INC_BPM_PIN);
     866:	86 e0       	ldi	r24, 0x06	; 6
     868:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z8pciSetuph>
  pciSetup(DEC_BPM_PIN);
     86c:	87 e0       	ldi	r24, 0x07	; 7
     86e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z8pciSetuph>
  
  pciSetup(START_STOP_PIN);//start stop
     872:	85 e0       	ldi	r24, 0x05	; 5

}
     874:	cf 91       	pop	r28
 // pciSetup(PREV_ENTRY_PIN);//prev entry
 
  pciSetup(INC_BPM_PIN);
  pciSetup(DEC_BPM_PIN);
  
  pciSetup(START_STOP_PIN);//start stop
     876:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <_Z8pciSetuph>

0000087a <_Z25decrement_file_line_indexv>:
//////////////////////////
//
/////////////////////////
void decrement_file_line_index()
{
  current_file_line_index--;
     87a:	80 91 31 03 	lds	r24, 0x0331
     87e:	81 50       	subi	r24, 0x01	; 1
     880:	80 93 31 03 	sts	0x0331, r24
     884:	08 95       	ret

00000886 <_Z25increment_file_line_indexv>:
//////////////////////////
//
/////////////////////////
void increment_file_line_index()
{
  current_file_line_index++;
     886:	80 91 31 03 	lds	r24, 0x0331
     88a:	8f 5f       	subi	r24, 0xFF	; 255
     88c:	80 93 31 03 	sts	0x0331, r24
     890:	08 95       	ret

00000892 <__vector_3>:

//////////////////////////
//Next-Prev Entry Interupt
/////////////////////////
ISR (PCINT0_vect)
{ 
     892:	1f 92       	push	r1
     894:	0f 92       	push	r0
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	0f 92       	push	r0
     89a:	11 24       	eor	r1, r1
     89c:	2f 93       	push	r18
     89e:	3f 93       	push	r19
     8a0:	4f 93       	push	r20
     8a2:	5f 93       	push	r21
     8a4:	6f 93       	push	r22
     8a6:	7f 93       	push	r23
     8a8:	8f 93       	push	r24
     8aa:	9f 93       	push	r25
     8ac:	af 93       	push	r26
     8ae:	bf 93       	push	r27
     8b0:	ef 93       	push	r30
     8b2:	ff 93       	push	r31
   // noInterrupts();
    // pin change interrupt for D8 to D13
   // Serial.println("Interrupt Fired for D8 to D13... - Next-Prev Entry Interupt");
  // interrupts();
   *digitalPinToPCICR(NEXT_ENTRY_PIN) &= ~(1<<digitalPinToPCICRbit(NEXT_ENTRY_PIN));
     8b4:	80 91 68 00 	lds	r24, 0x0068
     8b8:	8e 7f       	andi	r24, 0xFE	; 254
     8ba:	80 93 68 00 	sts	0x0068, r24
   PCIFR  |= bit (digitalPinToPCICRbit(START_STOP_PIN)); // clear any outstanding interrupt
     8be:	da 9a       	sbi	0x1b, 2	; 27
   
   delay(10000);
     8c0:	60 e1       	ldi	r22, 0x10	; 16
     8c2:	77 e2       	ldi	r23, 0x27	; 39
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 cb 22 	call	0x4596	; 0x4596 <delay>
   
  if( digitalRead(NEXT_ENTRY_PIN) == 0)
     8cc:	88 e0       	ldi	r24, 0x08	; 8
     8ce:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <digitalRead>
     8d2:	89 2b       	or	r24, r25
     8d4:	19 f4       	brne	.+6      	; 0x8dc <__vector_3+0x4a>
  {
    increment_file_line_index();    
     8d6:	0e 94 43 04 	call	0x886	; 0x886 <_Z25increment_file_line_indexv>
     8da:	07 c0       	rjmp	.+14     	; 0x8ea <__vector_3+0x58>
  }
  else if( digitalRead(PREV_ENTRY_PIN) == 0)
     8dc:	89 e0       	ldi	r24, 0x09	; 9
     8de:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <digitalRead>
     8e2:	89 2b       	or	r24, r25
     8e4:	11 f4       	brne	.+4      	; 0x8ea <__vector_3+0x58>
  {
      decrement_file_line_index();
     8e6:	0e 94 3d 04 	call	0x87a	; 0x87a <_Z25decrement_file_line_indexv>
  }

  updateDisplay();  
}
     8ea:	ff 91       	pop	r31
     8ec:	ef 91       	pop	r30
     8ee:	bf 91       	pop	r27
     8f0:	af 91       	pop	r26
     8f2:	9f 91       	pop	r25
     8f4:	8f 91       	pop	r24
     8f6:	7f 91       	pop	r23
     8f8:	6f 91       	pop	r22
     8fa:	5f 91       	pop	r21
     8fc:	4f 91       	pop	r20
     8fe:	3f 91       	pop	r19
     900:	2f 91       	pop	r18
     902:	0f 90       	pop	r0
     904:	0f be       	out	0x3f, r0	; 63
     906:	0f 90       	pop	r0
     908:	1f 90       	pop	r1
     90a:	18 95       	reti

0000090c <_GLOBAL__sub_I_start_stop_flag>:
  // close the file:
  myFile.close();     
  
  return true;       

}
     90c:	8f 92       	push	r8
     90e:	af 92       	push	r10
     910:	cf 92       	push	r12
     912:	ef 92       	push	r14
     914:	0f 93       	push	r16
  unsigned int end_byte_index;  
  
} config_data[70];

// create an lcd instance with correct constructor for how the lcd is wired to the I2C chip
LiquidCrystal_I2C lcd(LCD_ADDRESS, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE); // addr, EN, RW, RS, D4, D5, D6, D7, Backlight, POLARITY
     916:	1f 92       	push	r1
     918:	83 e0       	ldi	r24, 0x03	; 3
     91a:	8f 93       	push	r24
     91c:	87 e0       	ldi	r24, 0x07	; 7
     91e:	88 2e       	mov	r8, r24
     920:	96 e0       	ldi	r25, 0x06	; 6
     922:	a9 2e       	mov	r10, r25
     924:	25 e0       	ldi	r18, 0x05	; 5
     926:	c2 2e       	mov	r12, r18
     928:	34 e0       	ldi	r19, 0x04	; 4
     92a:	e3 2e       	mov	r14, r19
     92c:	00 e0       	ldi	r16, 0x00	; 0
     92e:	21 e0       	ldi	r18, 0x01	; 1
     930:	42 e0       	ldi	r20, 0x02	; 2
     932:	67 e2       	ldi	r22, 0x27	; 39
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	92 e0       	ldi	r25, 0x02	; 2
     938:	0e 94 0c 07 	call	0xe18	; 0xe18 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>
     93c:	0f 90       	pop	r0
     93e:	0f 90       	pop	r0
  // close the file:
  myFile.close();     
  
  return true;       

}
     940:	0f 91       	pop	r16
     942:	ef 90       	pop	r14
     944:	cf 90       	pop	r12
     946:	af 90       	pop	r10
     948:	8f 90       	pop	r8
     94a:	08 95       	ret

0000094c <_Z11initDisplayv>:
//////////////////////////
//
/////////////////////////
void initDisplay()
{
    lcd.begin(20,4);  // initialize the lcd as 20x4 (16,2 for 16x2)  
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	44 e0       	ldi	r20, 0x04	; 4
     950:	64 e1       	ldi	r22, 0x14	; 20
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	92 e0       	ldi	r25, 0x02	; 2
     956:	0e 94 99 07 	call	0xf32	; 0xf32 <_ZN17LiquidCrystal_I2C5beginEhhh>
    lcd.setBacklight(1); // switch on the backlight
     95a:	61 e0       	ldi	r22, 0x01	; 1
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	92 e0       	ldi	r25, 0x02	; 2
     960:	0e 94 93 06 	call	0xd26	; 0xd26 <_ZN17LiquidCrystal_I2C12setBacklightEh>
    
    pinMode(INDICATOR_PIN,OUTPUT);  // LED
     964:	61 e0       	ldi	r22, 0x01	; 1
     966:	8d e0       	ldi	r24, 0x0D	; 13
     968:	0c 94 76 23 	jmp	0x46ec	; 0x46ec <pinMode>

0000096c <_Z18initConfigFileDatav>:

//////////////////////////
//
/////////////////////////
bool initConfigFileData()
{ 
     96c:	0f 93       	push	r16
     96e:	1f 93       	push	r17
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	cd b7       	in	r28, 0x3d	; 61
     976:	de b7       	in	r29, 0x3e	; 62
     978:	e6 97       	sbiw	r28, 0x36	; 54
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	de bf       	out	0x3e, r29	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	cd bf       	out	0x3d, r28	; 61
 
  File myFile;  
     984:	ce 01       	movw	r24, r28
     986:	4c 96       	adiw	r24, 0x1c	; 28
     988:	0e 94 6e 08 	call	0x10dc	; 0x10dc <_ZN5SDLib4FileC1Ev>

  //if the file dosn't exist then return
  if (SD.exists(CONFIG_FILE_NAME))
     98c:	68 e7       	ldi	r22, 0x78	; 120
     98e:	71 e0       	ldi	r23, 0x01	; 1
     990:	83 e3       	ldi	r24, 0x33	; 51
     992:	93 e0       	ldi	r25, 0x03	; 3
     994:	0e 94 89 0b 	call	0x1712	; 0x1712 <_ZN5SDLib7SDClass6existsEPKc>
     998:	88 23       	and	r24, r24
     99a:	11 f0       	breq	.+4      	; 0x9a0 <_Z18initConfigFileDatav+0x34>
  { 
    return false;
     99c:	10 e0       	ldi	r17, 0x00	; 0
     99e:	64 c0       	rjmp	.+200    	; 0xa68 <_Z18initConfigFileDatav+0xfc>
  }

  //try and open the file
  myFile = SD.open(CONFIG_FILE_NAME);     
     9a0:	21 e0       	ldi	r18, 0x01	; 1
     9a2:	48 e7       	ldi	r20, 0x78	; 120
     9a4:	51 e0       	ldi	r21, 0x01	; 1
     9a6:	63 e3       	ldi	r22, 0x33	; 51
     9a8:	73 e0       	ldi	r23, 0x03	; 3
     9aa:	ce 01       	movw	r24, r28
     9ac:	01 96       	adiw	r24, 0x01	; 1
     9ae:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <_ZN5SDLib7SDClass4openEPKch>
#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
     9b2:	8b 81       	ldd	r24, Y+3	; 0x03
     9b4:	9c 81       	ldd	r25, Y+4	; 0x04
     9b6:	9f 8f       	std	Y+31, r25	; 0x1f
     9b8:	8e 8f       	std	Y+30, r24	; 0x1e
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
     9ba:	8d 81       	ldd	r24, Y+5	; 0x05
     9bc:	9e 81       	ldd	r25, Y+6	; 0x06
     9be:	af 81       	ldd	r26, Y+7	; 0x07
     9c0:	b8 85       	ldd	r27, Y+8	; 0x08
     9c2:	88 a3       	std	Y+32, r24	; 0x20
     9c4:	99 a3       	std	Y+33, r25	; 0x21
     9c6:	aa a3       	std	Y+34, r26	; 0x22
     9c8:	bb a3       	std	Y+35, r27	; 0x23
     9ca:	89 85       	ldd	r24, Y+9	; 0x09
     9cc:	9a 85       	ldd	r25, Y+10	; 0x0a
     9ce:	ab 85       	ldd	r26, Y+11	; 0x0b
     9d0:	bc 85       	ldd	r27, Y+12	; 0x0c
     9d2:	8c a3       	std	Y+36, r24	; 0x24
     9d4:	9d a3       	std	Y+37, r25	; 0x25
     9d6:	ae a3       	std	Y+38, r26	; 0x26
     9d8:	bf a3       	std	Y+39, r27	; 0x27
#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT)

namespace SDLib {

class File : public Stream {
     9da:	8d e0       	ldi	r24, 0x0D	; 13
     9dc:	fe 01       	movw	r30, r28
     9de:	3d 96       	adiw	r30, 0x0d	; 13
     9e0:	de 01       	movw	r26, r28
     9e2:	98 96       	adiw	r26, 0x28	; 40
     9e4:	01 90       	ld	r0, Z+
     9e6:	0d 92       	st	X+, r0
     9e8:	8a 95       	dec	r24
     9ea:	e1 f7       	brne	.-8      	; 0x9e4 <_Z18initConfigFileDatav+0x78>
     9ec:	8a 8d       	ldd	r24, Y+26	; 0x1a
     9ee:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9f0:	9e ab       	std	Y+54, r25	; 0x36
     9f2:	8d ab       	std	Y+53, r24	; 0x35
  if (!myFile)
     9f4:	ce 01       	movw	r24, r28
     9f6:	4c 96       	adiw	r24, 0x1c	; 28
     9f8:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <_ZN5SDLib4FilecvbEv>
     9fc:	18 2f       	mov	r17, r24
     9fe:	88 23       	and	r24, r24
     a00:	69 f2       	breq	.-102    	; 0x99c <_Z18initConfigFileDatav+0x30>
  {
     return false;
  } 

  //loop through file
  Serial.println(CONFIG_FILE_NAME);      
     a02:	68 e7       	ldi	r22, 0x78	; 120
     a04:	71 e0       	ldi	r23, 0x01	; 1
     a06:	81 e5       	ldi	r24, 0x51	; 81
     a08:	96 e0       	ldi	r25, 0x06	; 6
     a0a:	0e 94 58 21 	call	0x42b0	; 0x42b0 <_ZN5Print7printlnEPKc>
  memset(config_data, 0, sizeof(config_data));    
     a0e:	88 e1       	ldi	r24, 0x18	; 24
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	e8 e1       	ldi	r30, 0x18	; 24
     a14:	f2 e0       	ldi	r31, 0x02	; 2
     a16:	df 01       	movw	r26, r30
     a18:	9c 01       	movw	r18, r24
     a1a:	1d 92       	st	X+, r1
     a1c:	21 50       	subi	r18, 0x01	; 1
     a1e:	30 40       	sbci	r19, 0x00	; 0
     a20:	e1 f7       	brne	.-8      	; 0xa1a <_Z18initConfigFileDatav+0xae>
  uint8_t current_line = 0;
     a22:	00 e0       	ldi	r16, 0x00	; 0
  
  while( myFile.available() )
     a24:	ce 01       	movw	r24, r28
     a26:	4c 96       	adiw	r24, 0x1c	; 28
     a28:	0e 94 a1 08 	call	0x1142	; 0x1142 <_ZN5SDLib4File9availableEv>
     a2c:	89 2b       	or	r24, r25
     a2e:	c1 f0       	breq	.+48     	; 0xa60 <_Z18initConfigFileDatav+0xf4>
  {        
    //get a line  
    char new_char = 0x00;

    config_data[ current_line ].start_byte_index = myFile.position();   
     a30:	ce 01       	movw	r24, r28
     a32:	4c 96       	adiw	r24, 0x1c	; 28
     a34:	0e 94 81 08 	call	0x1102	; 0x1102 <_ZN5SDLib4File8positionEv>
     a38:	34 e0       	ldi	r19, 0x04	; 4
     a3a:	03 9f       	mul	r16, r19
     a3c:	f0 01       	movw	r30, r0
     a3e:	11 24       	eor	r1, r1
     a40:	e8 5e       	subi	r30, 0xE8	; 232
     a42:	fd 4f       	sbci	r31, 0xFD	; 253
     a44:	71 83       	std	Z+1, r23	; 0x01
     a46:	60 83       	st	Z, r22
     
    do
    {    
      new_char = myFile.read();       
     a48:	ce 01       	movw	r24, r28
     a4a:	4c 96       	adiw	r24, 0x1c	; 28
     a4c:	0e 94 05 08 	call	0x100a	; 0x100a <_ZN5SDLib4File4readEv>
        //found the eol
         config_data[ current_line ].end_byte_index = myFile.position();  
         break; 
      }
    
    }while( myFile.available() ) ; 
     a50:	ce 01       	movw	r24, r28
     a52:	4c 96       	adiw	r24, 0x1c	; 28
     a54:	0e 94 a1 08 	call	0x1142	; 0x1142 <_ZN5SDLib4File9availableEv>
    //get a line  
    char new_char = 0x00;

    config_data[ current_line ].start_byte_index = myFile.position();   
     
    do
     a58:	89 2b       	or	r24, r25
     a5a:	b1 f7       	brne	.-20     	; 0xa48 <_Z18initConfigFileDatav+0xdc>
         break; 
      }
    
    }while( myFile.available() ) ; 
  
    current_line ++;  
     a5c:	0f 5f       	subi	r16, 0xFF	; 255
     a5e:	e2 cf       	rjmp	.-60     	; 0xa24 <_Z18initConfigFileDatav+0xb8>
  
  }//end while
  
  // close the file:
  myFile.close();     
     a60:	ce 01       	movw	r24, r28
     a62:	4c 96       	adiw	r24, 0x1c	; 28
     a64:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <_ZN5SDLib4File5closeEv>
  
  return true;       

}
     a68:	81 2f       	mov	r24, r17
     a6a:	e6 96       	adiw	r28, 0x36	; 54
     a6c:	0f b6       	in	r0, 0x3f	; 63
     a6e:	f8 94       	cli
     a70:	de bf       	out	0x3e, r29	; 62
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	cd bf       	out	0x3d, r28	; 61
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	08 95       	ret

00000a80 <_Z10initSdCardv>:
//////////////////////////
//
/////////////////////////
void initSdCard()
{
  if( SD.begin(10) )
     a80:	6a e0       	ldi	r22, 0x0A	; 10
     a82:	83 e3       	ldi	r24, 0x33	; 51
     a84:	93 e0       	ldi	r25, 0x03	; 3
     a86:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <_ZN5SDLib7SDClass5beginEh>
     a8a:	88 23       	and	r24, r24
     a8c:	39 f0       	breq	.+14     	; 0xa9c <_Z10initSdCardv+0x1c>
  {  
        if(initConfigFileData())
     a8e:	0e 94 b6 04 	call	0x96c	; 0x96c <_Z18initConfigFileDatav>
     a92:	88 23       	and	r24, r24
     a94:	19 f0       	breq	.+6      	; 0xa9c <_Z10initSdCardv+0x1c>
        {
         // current_file_line ++;
          config_present = true;  
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	80 93 30 03 	sts	0x0330, r24
     a9c:	08 95       	ret

00000a9e <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     a9e:	26 e0       	ldi	r18, 0x06	; 6
     aa0:	40 e8       	ldi	r20, 0x80	; 128
     aa2:	55 e2       	ldi	r21, 0x25	; 37
     aa4:	60 e0       	ldi	r22, 0x00	; 0
     aa6:	70 e0       	ldi	r23, 0x00	; 0
     aa8:	81 e5       	ldi	r24, 0x51	; 81
     aaa:	96 e0       	ldi	r25, 0x06	; 6
     aac:	0e 94 07 20 	call	0x400e	; 0x400e <_ZN14HardwareSerial5beginEmh>
/////////////////////////
void setup()
{
	#ifdef DEBUG_ON
	Serial.begin(9600);
	Serial.println("Starting...");
     ab0:	63 e8       	ldi	r22, 0x83	; 131
     ab2:	71 e0       	ldi	r23, 0x01	; 1
     ab4:	81 e5       	ldi	r24, 0x51	; 81
     ab6:	96 e0       	ldi	r25, 0x06	; 6
     ab8:	0e 94 58 21 	call	0x42b0	; 0x42b0 <_ZN5Print7printlnEPKc>
	#endif
	
	initSdCard();
     abc:	0e 94 40 05 	call	0xa80	; 0xa80 <_Z10initSdCardv>
	initDisplay();
     ac0:	0e 94 a6 04 	call	0x94c	; 0x94c <_Z11initDisplayv>
	initTimer();
     ac4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <_Z9initTimerv>
	initButtonIoPins();
     ac8:	0e 94 22 04 	call	0x844	; 0x844 <_Z16initButtonIoPinsv>

	// lcd.clear();
	//lcd.home ();
	lcd.print("Welcome");
     acc:	6f e8       	ldi	r22, 0x8F	; 143
     ace:	71 e0       	ldi	r23, 0x01	; 1
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	92 e0       	ldi	r25, 0x02	; 2
     ad4:	0c 94 4b 21 	jmp	0x4296	; 0x4296 <_ZN5Print5printEPKc>

00000ad8 <_ZN5I2CIOC1Ev>:
// ---------------------------------------------------------------------------


// CONSTRUCTOR
// ---------------------------------------------------------------------------
I2CIO::I2CIO ( )
     ad8:	fc 01       	movw	r30, r24
{
   _i2cAddr     = 0x0;
     ada:	12 82       	std	Z+2, r1	; 0x02
   _dirMask     = 0xFF;    // mark all as INPUTs
     adc:	8f ef       	ldi	r24, 0xFF	; 255
     ade:	81 83       	std	Z+1, r24	; 0x01
   _shadow      = 0x0;     // no values set
     ae0:	10 82       	st	Z, r1
   _initialised = false;
     ae2:	13 82       	std	Z+3, r1	; 0x03
     ae4:	08 95       	ret

00000ae6 <_ZN5I2CIO8portModeEh>:
}

//
// portMode
void I2CIO::portMode ( uint8_t dir )
{
     ae6:	fc 01       	movw	r30, r24
   
   if ( _initialised )
     ae8:	83 81       	ldd	r24, Z+3	; 0x03
     aea:	88 23       	and	r24, r24
     aec:	31 f0       	breq	.+12     	; 0xafa <_ZN5I2CIO8portModeEh+0x14>
   {
      if ( dir == INPUT )
     aee:	61 11       	cpse	r22, r1
     af0:	03 c0       	rjmp	.+6      	; 0xaf8 <_ZN5I2CIO8portModeEh+0x12>
      {
         _dirMask = 0xFF;
     af2:	8f ef       	ldi	r24, 0xFF	; 255
     af4:	81 83       	std	Z+1, r24	; 0x01
     af6:	08 95       	ret
      }
      else
      {
         _dirMask = 0x00;
     af8:	11 82       	std	Z+1, r1	; 0x01
     afa:	08 95       	ret

00000afc <_ZN5I2CIO11isAvailableEh>:
// ---------------------------------------------------------------------------
bool I2CIO::isAvailable (uint8_t i2cAddr)
{
   int error;
   
   Wire.beginTransmission( i2cAddr );
     afc:	8f ef       	ldi	r24, 0xFF	; 255
     afe:	95 e0       	ldi	r25, 0x05	; 5
     b00:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <_ZN7TwoWire17beginTransmissionEh>
   error = Wire.endTransmission();
     b04:	8f ef       	ldi	r24, 0xFF	; 255
     b06:	95 e0       	ldi	r25, 0x05	; 5
     b08:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <_ZN7TwoWire15endTransmissionEv>
   if (error==0)
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	81 11       	cpse	r24, r1
     b10:	90 e0       	ldi	r25, 0x00	; 0
   }
   else //Some error occured
   {
     return false;
   }   
}
     b12:	89 2f       	mov	r24, r25
     b14:	08 95       	ret

00000b16 <_ZN5I2CIO5beginEh>:
 

//
// begin
int I2CIO::begin (  uint8_t i2cAddr )
{
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	ec 01       	movw	r28, r24
   _i2cAddr = i2cAddr;
     b1c:	6a 83       	std	Y+2, r22	; 0x02
   
   Wire.begin ( );
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	95 e0       	ldi	r25, 0x05	; 5
     b22:	0e 94 75 1d 	call	0x3aea	; 0x3aea <_ZN7TwoWire5beginEv>
      
   _initialised = isAvailable ( _i2cAddr );
     b26:	6a 81       	ldd	r22, Y+2	; 0x02
     b28:	ce 01       	movw	r24, r28
     b2a:	0e 94 7e 05 	call	0xafc	; 0xafc <_ZN5I2CIO11isAvailableEh>
     b2e:	8b 83       	std	Y+3, r24	; 0x03
   
   if (_initialised)
     b30:	88 23       	and	r24, r24
     b32:	29 f0       	breq	.+10     	; 0xb3e <_ZN5I2CIO5beginEh+0x28>
   {
#if (ARDUINO <  100)
      _shadow = Wire.receive ();
#else
      _shadow = Wire.read (); // Remove the byte read don't need it.
     b34:	8f ef       	ldi	r24, 0xFF	; 255
     b36:	95 e0       	ldi	r25, 0x05	; 5
     b38:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <_ZN7TwoWire4readEv>
     b3c:	88 83       	st	Y, r24
#endif
   }
   return ( _initialised );
     b3e:	8b 81       	ldd	r24, Y+3	; 0x03
}
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	08 95       	ret

00000b48 <_ZN5I2CIO5writeEh>:
}

//
// write
int I2CIO::write ( uint8_t value )
{
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
   int status = 0;
   
   if ( _initialised )
     b4c:	fc 01       	movw	r30, r24
     b4e:	23 81       	ldd	r18, Z+3	; 0x03
     b50:	22 23       	and	r18, r18
     b52:	b1 f0       	breq	.+44     	; 0xb80 <_ZN5I2CIO5writeEh+0x38>
     b54:	ec 01       	movw	r28, r24
   {
      // Only write HIGH the values of the ports that have been initialised as
      // outputs updating the output shadow of the device
      _shadow = ( value & ~(_dirMask) );
     b56:	81 81       	ldd	r24, Z+1	; 0x01
     b58:	80 95       	com	r24
     b5a:	68 23       	and	r22, r24
     b5c:	60 83       	st	Z, r22
   
      Wire.beginTransmission ( _i2cAddr );
     b5e:	62 81       	ldd	r22, Z+2	; 0x02
     b60:	8f ef       	ldi	r24, 0xFF	; 255
     b62:	95 e0       	ldi	r25, 0x05	; 5
     b64:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <_ZN7TwoWire17beginTransmissionEh>
#if (ARDUINO <  100)
      Wire.send ( _shadow );
#else
      Wire.write ( _shadow );
     b68:	68 81       	ld	r22, Y
     b6a:	8f ef       	ldi	r24, 0xFF	; 255
     b6c:	95 e0       	ldi	r25, 0x05	; 5
     b6e:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <_ZN7TwoWire5writeEh>
#endif  
      status = Wire.endTransmission ();
     b72:	8f ef       	ldi	r24, 0xFF	; 255
     b74:	95 e0       	ldi	r25, 0x05	; 5
     b76:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <_ZN7TwoWire15endTransmissionEv>
     b7a:	28 2f       	mov	r18, r24
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <_ZN5I2CIO5writeEh+0x3c>

//
// write
int I2CIO::write ( uint8_t value )
{
   int status = 0;
     b80:	20 e0       	ldi	r18, 0x00	; 0
     b82:	30 e0       	ldi	r19, 0x00	; 0
#else
      Wire.write ( _shadow );
#endif  
      status = Wire.endTransmission ();
   }
   return ( (status == 0) );
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	23 2b       	or	r18, r19
     b8a:	11 f0       	breq	.+4      	; 0xb90 <_ZN5I2CIO5writeEh+0x48>
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	90 e0       	ldi	r25, 0x00	; 0
}
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	08 95       	ret

00000b96 <_ZN3LCD15setBacklightPinEh13t_backlighPol>:
    empty function call is provided that does nothing.
    
    @param      value: pin associated to backlight control.
    @param      pol: backlight polarity control (POSITIVE, NEGATIVE)
    */
   virtual void setBacklightPin ( uint8_t value, t_backlighPol pol ) { };
     b96:	08 95       	ret

00000b98 <_ZN3LCD12setBacklightEh>:
    
    @param      0..255 - the value is very dependent on the LCD. However, 
    BACKLIGHT_OFF will be interpreted as off and BACKLIGHT_ON will drive the
    backlight on.
    */
   virtual void setBacklight ( uint8_t value ) { };
     b98:	08 95       	ret

00000b9a <_ZN3LCD5writeEh>:
   send(value, DATA);
}
#else
size_t LCD::write(uint8_t value) 
{
   send(value, DATA);
     b9a:	dc 01       	movw	r26, r24
     b9c:	ed 91       	ld	r30, X+
     b9e:	fc 91       	ld	r31, X
     ba0:	02 84       	ldd	r0, Z+10	; 0x0a
     ba2:	f3 85       	ldd	r31, Z+11	; 0x0b
     ba4:	e0 2d       	mov	r30, r0
     ba6:	41 e0       	ldi	r20, 0x01	; 1
     ba8:	09 95       	icall
   return 1;             // assume OK
}
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	08 95       	ret

00000bb0 <_ZN3LCDC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     bb0:	fc 01       	movw	r30, r24
     bb2:	13 82       	std	Z+3, r1	; 0x03
     bb4:	12 82       	std	Z+2, r1	; 0x02


// CLASS CONSTRUCTORS
// ---------------------------------------------------------------------------
// Constructor
LCD::LCD () 
     bb6:	2b e9       	ldi	r18, 0x9B	; 155
     bb8:	31 e0       	ldi	r19, 0x01	; 1
     bba:	31 83       	std	Z+1, r19	; 0x01
     bbc:	20 83       	st	Z, r18
     bbe:	08 95       	ret

00000bc0 <_ZN3LCD9backlightEv>:

//
// Switch on the backlight
void LCD::backlight ( void )
{
   setBacklight(255);
     bc0:	dc 01       	movw	r26, r24
     bc2:	ed 91       	ld	r30, X+
     bc4:	fc 91       	ld	r31, X
     bc6:	00 84       	ldd	r0, Z+8	; 0x08
     bc8:	f1 85       	ldd	r31, Z+9	; 0x09
     bca:	e0 2d       	mov	r30, r0
     bcc:	6f ef       	ldi	r22, 0xFF	; 255
     bce:	09 94       	ijmp

00000bd0 <_ZN3LCD7commandEh>:

// General LCD commands - generic methods used by the rest of the commands
// ---------------------------------------------------------------------------
void LCD::command(uint8_t value) 
{
   send(value, COMMAND);
     bd0:	dc 01       	movw	r26, r24
     bd2:	ed 91       	ld	r30, X+
     bd4:	fc 91       	ld	r31, X
     bd6:	02 84       	ldd	r0, Z+10	; 0x0a
     bd8:	f3 85       	ldd	r31, Z+11	; 0x0b
     bda:	e0 2d       	mov	r30, r0
     bdc:	40 e0       	ldi	r20, 0x00	; 0
     bde:	09 94       	ijmp

00000be0 <_ZN3LCD5clearEv>:

// Common LCD Commands
// ---------------------------------------------------------------------------
void LCD::clear()
{
   command(LCD_CLEARDISPLAY);             // clear display, set cursor position to zero
     be0:	61 e0       	ldi	r22, 0x01	; 1
     be2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <_ZN3LCD7commandEh>
   delayMicroseconds(HOME_CLEAR_EXEC);    // this command is time consuming
     be6:	80 ed       	ldi	r24, 0xD0	; 208
     be8:	97 e0       	ldi	r25, 0x07	; 7
     bea:	0c 94 07 23 	jmp	0x460e	; 0x460e <delayMicroseconds>

00000bee <_ZN3LCD7displayEv>:
   command(LCD_DISPLAYCONTROL | _displaycontrol);
}

void LCD::display() 
{
   _displaycontrol |= LCD_DISPLAYON;
     bee:	fc 01       	movw	r30, r24
     bf0:	65 81       	ldd	r22, Z+5	; 0x05
     bf2:	26 2f       	mov	r18, r22
     bf4:	24 60       	ori	r18, 0x04	; 4
     bf6:	25 83       	std	Z+5, r18	; 0x05
   command(LCD_DISPLAYCONTROL | _displaycontrol);
     bf8:	6c 60       	ori	r22, 0x0C	; 12
     bfa:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <_ZN3LCD7commandEh>

00000bfe <_ZN3LCD5beginEhhh>:
// can't assume that its in that state when a application starts (and the
// LiquidCrystal constructor is called).
// A call to begin() will reinitialize the LCD.
//
void LCD::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	ec 01       	movw	r28, r24
   if (lines > 1) 
     c04:	42 30       	cpi	r20, 0x02	; 2
     c06:	18 f0       	brcs	.+6      	; 0xc0e <_ZN3LCD5beginEhhh+0x10>
   {
      _displayfunction |= LCD_2LINE;
     c08:	8c 81       	ldd	r24, Y+4	; 0x04
     c0a:	88 60       	ori	r24, 0x08	; 8
     c0c:	8c 83       	std	Y+4, r24	; 0x04
   }
   _numlines = lines;
     c0e:	4f 83       	std	Y+7, r20	; 0x07
   _cols = cols;
     c10:	68 87       	std	Y+8, r22	; 0x08
   
   // for some 1 line displays you can select a 10 pixel high font
   // ------------------------------------------------------------
   if ((dotsize != LCD_5x8DOTS) && (lines == 1)) 
     c12:	22 23       	and	r18, r18
     c14:	29 f0       	breq	.+10     	; 0xc20 <_ZN3LCD5beginEhhh+0x22>
     c16:	41 30       	cpi	r20, 0x01	; 1
     c18:	19 f4       	brne	.+6      	; 0xc20 <_ZN3LCD5beginEhhh+0x22>
   {
      _displayfunction |= LCD_5x10DOTS;
     c1a:	8c 81       	ldd	r24, Y+4	; 0x04
     c1c:	84 60       	ori	r24, 0x04	; 4
     c1e:	8c 83       	std	Y+4, r24	; 0x04
   // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
   // according to datasheet, we need at least 40ms after power rises above 2.7V
   // before sending commands. Arduino can turn on way before 4.5V so we'll wait 
   // 50
   // ---------------------------------------------------------------------------
   delay (100); // 100ms delay
     c20:	64 e6       	ldi	r22, 0x64	; 100
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 cb 22 	call	0x4596	; 0x4596 <delay>
   
   //put the LCD into 4 bit or 8 bit mode
   // -------------------------------------
   if (! (_displayfunction & LCD_8BITMODE)) 
     c2c:	6c 81       	ldd	r22, Y+4	; 0x04
     c2e:	64 fd       	sbrc	r22, 4
     c30:	31 c0       	rjmp	.+98     	; 0xc94 <_ZN3LCD5beginEhhh+0x96>
      // this is according to the hitachi HD44780 datasheet
      // figure 24, pg 46
      
      // we start in 8bit mode, try to set 4 bit mode
      // Special case of "Function Set"
      send(0x03, FOUR_BITS);
     c32:	e8 81       	ld	r30, Y
     c34:	f9 81       	ldd	r31, Y+1	; 0x01
     c36:	02 84       	ldd	r0, Z+10	; 0x0a
     c38:	f3 85       	ldd	r31, Z+11	; 0x0b
     c3a:	e0 2d       	mov	r30, r0
     c3c:	42 e0       	ldi	r20, 0x02	; 2
     c3e:	63 e0       	ldi	r22, 0x03	; 3
     c40:	ce 01       	movw	r24, r28
     c42:	09 95       	icall
      delayMicroseconds(4500); // wait min 4.1ms
     c44:	84 e9       	ldi	r24, 0x94	; 148
     c46:	91 e1       	ldi	r25, 0x11	; 17
     c48:	0e 94 07 23 	call	0x460e	; 0x460e <delayMicroseconds>
      
      // second try
      send ( 0x03, FOUR_BITS );
     c4c:	e8 81       	ld	r30, Y
     c4e:	f9 81       	ldd	r31, Y+1	; 0x01
     c50:	02 84       	ldd	r0, Z+10	; 0x0a
     c52:	f3 85       	ldd	r31, Z+11	; 0x0b
     c54:	e0 2d       	mov	r30, r0
     c56:	42 e0       	ldi	r20, 0x02	; 2
     c58:	63 e0       	ldi	r22, 0x03	; 3
     c5a:	ce 01       	movw	r24, r28
     c5c:	09 95       	icall
      delayMicroseconds(150); // wait min 100us
     c5e:	86 e9       	ldi	r24, 0x96	; 150
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	0e 94 07 23 	call	0x460e	; 0x460e <delayMicroseconds>
      
      // third go!
      send( 0x03, FOUR_BITS );
     c66:	e8 81       	ld	r30, Y
     c68:	f9 81       	ldd	r31, Y+1	; 0x01
     c6a:	02 84       	ldd	r0, Z+10	; 0x0a
     c6c:	f3 85       	ldd	r31, Z+11	; 0x0b
     c6e:	e0 2d       	mov	r30, r0
     c70:	42 e0       	ldi	r20, 0x02	; 2
     c72:	63 e0       	ldi	r22, 0x03	; 3
     c74:	ce 01       	movw	r24, r28
     c76:	09 95       	icall
      delayMicroseconds(150); // wait min of 100us
     c78:	86 e9       	ldi	r24, 0x96	; 150
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 07 23 	call	0x460e	; 0x460e <delayMicroseconds>
      
      // finally, set to 4-bit interface
      send ( 0x02, FOUR_BITS );
     c80:	e8 81       	ld	r30, Y
     c82:	f9 81       	ldd	r31, Y+1	; 0x01
     c84:	02 84       	ldd	r0, Z+10	; 0x0a
     c86:	f3 85       	ldd	r31, Z+11	; 0x0b
     c88:	e0 2d       	mov	r30, r0
     c8a:	42 e0       	ldi	r20, 0x02	; 2
     c8c:	62 e0       	ldi	r22, 0x02	; 2
     c8e:	ce 01       	movw	r24, r28
     c90:	09 95       	icall
     c92:	16 c0       	rjmp	.+44     	; 0xcc0 <_ZN3LCD5beginEhhh+0xc2>
   {
      // this is according to the hitachi HD44780 datasheet
      // page 45 figure 23
      
      // Send function set command sequence
      command(LCD_FUNCTIONSET | _displayfunction);
     c94:	60 62       	ori	r22, 0x20	; 32
     c96:	ce 01       	movw	r24, r28
     c98:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <_ZN3LCD7commandEh>
      delayMicroseconds(4500);  // wait more than 4.1ms
     c9c:	84 e9       	ldi	r24, 0x94	; 148
     c9e:	91 e1       	ldi	r25, 0x11	; 17
     ca0:	0e 94 07 23 	call	0x460e	; 0x460e <delayMicroseconds>
      
      // second try
      command(LCD_FUNCTIONSET | _displayfunction);
     ca4:	6c 81       	ldd	r22, Y+4	; 0x04
     ca6:	60 62       	ori	r22, 0x20	; 32
     ca8:	ce 01       	movw	r24, r28
     caa:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <_ZN3LCD7commandEh>
      delayMicroseconds(150);
     cae:	86 e9       	ldi	r24, 0x96	; 150
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	0e 94 07 23 	call	0x460e	; 0x460e <delayMicroseconds>
      
      // third go
      command(LCD_FUNCTIONSET | _displayfunction);
     cb6:	6c 81       	ldd	r22, Y+4	; 0x04
     cb8:	60 62       	ori	r22, 0x20	; 32
     cba:	ce 01       	movw	r24, r28
     cbc:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <_ZN3LCD7commandEh>
      delayMicroseconds(150);
     cc0:	86 e9       	ldi	r24, 0x96	; 150
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0e 94 07 23 	call	0x460e	; 0x460e <delayMicroseconds>

   }
   
   // finally, set # lines, font size, etc.
   command(LCD_FUNCTIONSET | _displayfunction);
     cc8:	6c 81       	ldd	r22, Y+4	; 0x04
     cca:	60 62       	ori	r22, 0x20	; 32
     ccc:	ce 01       	movw	r24, r28
     cce:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <_ZN3LCD7commandEh>
   delayMicroseconds ( 60 );  // wait more
     cd2:	8c e3       	ldi	r24, 0x3C	; 60
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	0e 94 07 23 	call	0x460e	; 0x460e <delayMicroseconds>
   
   // turn the display on with no cursor or blinking default
   _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
     cda:	84 e0       	ldi	r24, 0x04	; 4
     cdc:	8d 83       	std	Y+5, r24	; 0x05
   display();
     cde:	ce 01       	movw	r24, r28
     ce0:	0e 94 f7 05 	call	0xbee	; 0xbee <_ZN3LCD7displayEv>
   
   // clear the LCD
   clear();
     ce4:	ce 01       	movw	r24, r28
     ce6:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <_ZN3LCD5clearEv>
   
   // Initialize to default text direction (for romance languages)
   _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
     cea:	82 e0       	ldi	r24, 0x02	; 2
     cec:	8e 83       	std	Y+6, r24	; 0x06
   // set the entry mode
   command(LCD_ENTRYMODESET | _displaymode);
     cee:	66 e0       	ldi	r22, 0x06	; 6
     cf0:	ce 01       	movw	r24, r28
     cf2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <_ZN3LCD7commandEh>

   backlight();
     cf6:	ce 01       	movw	r24, r28

}
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
   // Initialize to default text direction (for romance languages)
   _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
   // set the entry mode
   command(LCD_ENTRYMODESET | _displaymode);

   backlight();
     cfc:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <_ZN3LCD9backlightEv>

00000d00 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>:

//
// setBacklightPin
void LiquidCrystal_I2C::setBacklightPin ( uint8_t value, t_backlighPol pol = POSITIVE )
{
   _backlightPinMask = ( 1 << value );
     d00:	21 e0       	ldi	r18, 0x01	; 1
     d02:	01 c0       	rjmp	.+2      	; 0xd06 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x6>
     d04:	22 0f       	add	r18, r18
     d06:	6a 95       	dec	r22
     d08:	ea f7       	brpl	.-6      	; 0xd04 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol+0x4>
     d0a:	dc 01       	movw	r26, r24
     d0c:	1b 96       	adiw	r26, 0x0b	; 11
     d0e:	2c 93       	st	X, r18
     d10:	1b 97       	sbiw	r26, 0x0b	; 11
   _polarity = pol;
     d12:	19 96       	adiw	r26, 0x09	; 9
     d14:	4c 93       	st	X, r20
     d16:	19 97       	sbiw	r26, 0x09	; 9
   setBacklight(BACKLIGHT_OFF);
     d18:	ed 91       	ld	r30, X+
     d1a:	fc 91       	ld	r31, X
     d1c:	00 84       	ldd	r0, Z+8	; 0x08
     d1e:	f1 85       	ldd	r31, Z+9	; 0x09
     d20:	e0 2d       	mov	r30, r0
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	09 94       	ijmp

00000d26 <_ZN17LiquidCrystal_I2C12setBacklightEh>:
}

//
// setBacklight
void LiquidCrystal_I2C::setBacklight( uint8_t value ) 
{
     d26:	fc 01       	movw	r30, r24
   // Check if backlight is available
   // ----------------------------------------------------
   if ( _backlightPinMask != 0x0 )
     d28:	83 85       	ldd	r24, Z+11	; 0x0b
     d2a:	88 23       	and	r24, r24
     d2c:	91 f0       	breq	.+36     	; 0xd52 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x2c>
   {
      // Check for polarity to configure mask accordingly
      // ----------------------------------------------------------
      if  (((_polarity == POSITIVE) && (value > 0)) || 
     d2e:	91 85       	ldd	r25, Z+9	; 0x09
     d30:	91 11       	cpse	r25, r1
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <_ZN17LiquidCrystal_I2C12setBacklightEh+0x14>
     d34:	61 11       	cpse	r22, r1
     d36:	05 c0       	rjmp	.+10     	; 0xd42 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x1c>
     d38:	06 c0       	rjmp	.+12     	; 0xd46 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
     d3a:	91 30       	cpi	r25, 0x01	; 1
     d3c:	21 f4       	brne	.+8      	; 0xd46 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
           ((_polarity == NEGATIVE ) && ( value == 0 )))
     d3e:	61 11       	cpse	r22, r1
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x20>
      {
         _backlightStsMask = _backlightPinMask & LCD_BACKLIGHT;
     d42:	84 87       	std	Z+12, r24	; 0x0c
     d44:	01 c0       	rjmp	.+2      	; 0xd48 <_ZN17LiquidCrystal_I2C12setBacklightEh+0x22>
      }
      else 
      {
         _backlightStsMask = _backlightPinMask & LCD_NOBACKLIGHT;
     d46:	14 86       	std	Z+12, r1	; 0x0c
      }
      _i2cio.write( _backlightStsMask );
     d48:	64 85       	ldd	r22, Z+12	; 0x0c
     d4a:	cf 01       	movw	r24, r30
     d4c:	0d 96       	adiw	r24, 0x0d	; 13
     d4e:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <_ZN5I2CIO5writeEh>
     d52:	08 95       	ret

00000d54 <_ZN17LiquidCrystal_I2C4initEv>:
// ---------------------------------------------------------------------------

//
// init
int LiquidCrystal_I2C::init()
{
     d54:	0f 93       	push	r16
     d56:	1f 93       	push	r17
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	8c 01       	movw	r16, r24
   int status = 0;
   
   // initialize the backpack IO expander
   // and display functions.
   // ------------------------------------------------------------------------
   if ( _i2cio.begin ( _Addr ) == 1 )
     d5e:	ec 01       	movw	r28, r24
     d60:	2d 96       	adiw	r28, 0x0d	; 13
     d62:	fc 01       	movw	r30, r24
     d64:	62 85       	ldd	r22, Z+10	; 0x0a
     d66:	ce 01       	movw	r24, r28
     d68:	0e 94 8b 05 	call	0xb16	; 0xb16 <_ZN5I2CIO5beginEh>
     d6c:	01 97       	sbiw	r24, 0x01	; 1
     d6e:	69 f4       	brne	.+26     	; 0xd8a <_ZN17LiquidCrystal_I2C4initEv+0x36>
   {
      _i2cio.portMode ( OUTPUT );  // Set the entire IO extender to OUTPUT
     d70:	61 e0       	ldi	r22, 0x01	; 1
     d72:	ce 01       	movw	r24, r28
     d74:	0e 94 73 05 	call	0xae6	; 0xae6 <_ZN5I2CIO8portModeEh>
      _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
     d78:	f8 01       	movw	r30, r16
     d7a:	14 82       	std	Z+4, r1	; 0x04
      status = 1;
      _i2cio.write(0);  // Set the entire port to LOW
     d7c:	60 e0       	ldi	r22, 0x00	; 0
     d7e:	ce 01       	movw	r24, r28
     d80:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN5I2CIO5writeEh>
   // ------------------------------------------------------------------------
   if ( _i2cio.begin ( _Addr ) == 1 )
   {
      _i2cio.portMode ( OUTPUT );  // Set the entire IO extender to OUTPUT
      _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
      status = 1;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <_ZN17LiquidCrystal_I2C4initEv+0x3a>

//
// init
int LiquidCrystal_I2C::init()
{
   int status = 0;
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	90 e0       	ldi	r25, 0x00	; 0
      _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
      status = 1;
      _i2cio.write(0);  // Set the entire port to LOW
   }
   return ( status );
}
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	1f 91       	pop	r17
     d94:	0f 91       	pop	r16
     d96:	08 95       	ret

00000d98 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>:

//
// config
void LiquidCrystal_I2C::config (uint8_t lcd_Addr, uint8_t En, uint8_t Rw, uint8_t Rs, 
                                uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7 )
{
     d98:	8f 92       	push	r8
     d9a:	af 92       	push	r10
     d9c:	cf 92       	push	r12
     d9e:	ef 92       	push	r14
     da0:	0f 93       	push	r16
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
     daa:	fc 01       	movw	r30, r24
   _Addr = lcd_Addr;
     dac:	62 87       	std	Z+10, r22	; 0x0a
   
   _backlightPinMask = 0;
     dae:	13 86       	std	Z+11, r1	; 0x0b
   _backlightStsMask = LCD_NOBACKLIGHT;
     db0:	14 86       	std	Z+12, r1	; 0x0c
   _polarity = POSITIVE;
     db2:	11 86       	std	Z+9, r1	; 0x09
   
   _En = ( 1 << En );
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	98 2f       	mov	r25, r24
     db8:	01 c0       	rjmp	.+2      	; 0xdbc <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x24>
     dba:	99 0f       	add	r25, r25
     dbc:	4a 95       	dec	r20
     dbe:	ea f7       	brpl	.-6      	; 0xdba <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x22>
     dc0:	91 8b       	std	Z+17, r25	; 0x11
   _Rw = ( 1 << Rw );
     dc2:	98 2f       	mov	r25, r24
     dc4:	01 c0       	rjmp	.+2      	; 0xdc8 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x30>
     dc6:	99 0f       	add	r25, r25
     dc8:	2a 95       	dec	r18
     dca:	ea f7       	brpl	.-6      	; 0xdc6 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x2e>
     dcc:	92 8b       	std	Z+18, r25	; 0x12
   _Rs = ( 1 << Rs );
     dce:	98 2f       	mov	r25, r24
     dd0:	01 c0       	rjmp	.+2      	; 0xdd4 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3c>
     dd2:	99 0f       	add	r25, r25
     dd4:	0a 95       	dec	r16
     dd6:	ea f7       	brpl	.-6      	; 0xdd2 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x3a>
     dd8:	93 8b       	std	Z+19, r25	; 0x13
   
   // Initialise pin mapping
   _data_pins[0] = ( 1 << d4 );
     dda:	98 2f       	mov	r25, r24
     ddc:	01 c0       	rjmp	.+2      	; 0xde0 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x48>
     dde:	99 0f       	add	r25, r25
     de0:	ea 94       	dec	r14
     de2:	ea f7       	brpl	.-6      	; 0xdde <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x46>
     de4:	94 8b       	std	Z+20, r25	; 0x14
   _data_pins[1] = ( 1 << d5 );
     de6:	98 2f       	mov	r25, r24
     de8:	01 c0       	rjmp	.+2      	; 0xdec <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x54>
     dea:	99 0f       	add	r25, r25
     dec:	ca 94       	dec	r12
     dee:	ea f7       	brpl	.-6      	; 0xdea <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x52>
     df0:	95 8b       	std	Z+21, r25	; 0x15
   _data_pins[2] = ( 1 << d6 );
     df2:	98 2f       	mov	r25, r24
     df4:	01 c0       	rjmp	.+2      	; 0xdf8 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x60>
     df6:	99 0f       	add	r25, r25
     df8:	aa 94       	dec	r10
     dfa:	ea f7       	brpl	.-6      	; 0xdf6 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x5e>
     dfc:	96 8b       	std	Z+22, r25	; 0x16
   _data_pins[3] = ( 1 << d7 );   
     dfe:	01 c0       	rjmp	.+2      	; 0xe02 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x6a>
     e00:	88 0f       	add	r24, r24
     e02:	8a 94       	dec	r8
     e04:	ea f7       	brpl	.-6      	; 0xe00 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh+0x68>
     e06:	87 8b       	std	Z+23, r24	; 0x17
}
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	0f 91       	pop	r16
     e0e:	ef 90       	pop	r14
     e10:	cf 90       	pop	r12
     e12:	af 90       	pop	r10
     e14:	8f 90       	pop	r8
     e16:	08 95       	ret

00000e18 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol>:
                                     uint8_t d6, uint8_t d7 )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
}

LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr, uint8_t En, uint8_t Rw,
     e18:	6f 92       	push	r6
     e1a:	7f 92       	push	r7
     e1c:	8f 92       	push	r8
     e1e:	af 92       	push	r10
     e20:	cf 92       	push	r12
     e22:	ef 92       	push	r14
     e24:	ff 92       	push	r15
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <_ZN17LiquidCrystal_I2CC1Ehhhhhhhhh13t_backlighPol+0x18>
     e30:	1f 92       	push	r1
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	3c 01       	movw	r6, r24
     e38:	19 89       	ldd	r17, Y+17	; 0x11
     e3a:	fa 88       	ldd	r15, Y+18	; 0x12
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
     e3c:	2b 83       	std	Y+3, r18	; 0x03
     e3e:	4a 83       	std	Y+2, r20	; 0x02
     e40:	69 83       	std	Y+1, r22	; 0x01
     e42:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZN3LCDC1Ev>
     e46:	8b ea       	ldi	r24, 0xAB	; 171
     e48:	91 e0       	ldi	r25, 0x01	; 1
     e4a:	f3 01       	movw	r30, r6
     e4c:	91 83       	std	Z+1, r25	; 0x01
     e4e:	80 83       	st	Z, r24
     e50:	c3 01       	movw	r24, r6
     e52:	0d 96       	adiw	r24, 0x0d	; 13
     e54:	0e 94 6c 05 	call	0xad8	; 0xad8 <_ZN5I2CIOC1Ev>
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
     e58:	2b 81       	ldd	r18, Y+3	; 0x03
     e5a:	4a 81       	ldd	r20, Y+2	; 0x02
     e5c:	69 81       	ldd	r22, Y+1	; 0x01
     e5e:	c3 01       	movw	r24, r6
     e60:	0e 94 cc 06 	call	0xd98	; 0xd98 <_ZN17LiquidCrystal_I2C6configEhhhhhhhh>
   setBacklightPin(backlighPin, pol);
     e64:	4f 2d       	mov	r20, r15
     e66:	61 2f       	mov	r22, r17
     e68:	c3 01       	movw	r24, r6
}
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	ff 90       	pop	r15
     e7a:	ef 90       	pop	r14
     e7c:	cf 90       	pop	r12
     e7e:	af 90       	pop	r10
     e80:	8f 90       	pop	r8
     e82:	7f 90       	pop	r7
     e84:	6f 90       	pop	r6
                                     uint8_t Rs, uint8_t d4, uint8_t d5,
                                     uint8_t d6, uint8_t d7, uint8_t backlighPin, 
                                     t_backlighPol pol = POSITIVE )
{
   config(lcd_Addr, En, Rw, Rs, d4, d5, d6, d7);
   setBacklightPin(backlighPin, pol);
     e86:	0c 94 80 06 	jmp	0xd00	; 0xd00 <_ZN17LiquidCrystal_I2C15setBacklightPinEh13t_backlighPol>

00000e8a <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
}

//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
     e8a:	ff 92       	push	r15
     e8c:	0f 93       	push	r16
     e8e:	1f 93       	push	r17
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	ec 01       	movw	r28, r24
     e96:	f6 2e       	mov	r15, r22
   _i2cio.write (data | _En);   // En HIGH
     e98:	8c 01       	movw	r16, r24
     e9a:	03 5f       	subi	r16, 0xF3	; 243
     e9c:	1f 4f       	sbci	r17, 0xFF	; 255
     e9e:	99 89       	ldd	r25, Y+17	; 0x11
     ea0:	69 2b       	or	r22, r25
     ea2:	c8 01       	movw	r24, r16
     ea4:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN5I2CIO5writeEh>
   _i2cio.write (data & ~_En);  // En LOW
     ea8:	99 89       	ldd	r25, Y+17	; 0x11
     eaa:	90 95       	com	r25
     eac:	6f 2d       	mov	r22, r15
     eae:	69 23       	and	r22, r25
     eb0:	c8 01       	movw	r24, r16
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	1f 91       	pop	r17
     eb8:	0f 91       	pop	r16
     eba:	ff 90       	pop	r15
//
// pulseEnable
void LiquidCrystal_I2C::pulseEnable (uint8_t data)
{
   _i2cio.write (data | _En);   // En HIGH
   _i2cio.write (data & ~_En);  // En LOW
     ebc:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <_ZN5I2CIO5writeEh>

00000ec0 <_ZN17LiquidCrystal_I2C10write4bitsEhh>:
}

//
// write4bits
void LiquidCrystal_I2C::write4bits ( uint8_t value, uint8_t mode ) 
{
     ec0:	36 2f       	mov	r19, r22
     ec2:	fc 01       	movw	r30, r24
     ec4:	74 96       	adiw	r30, 0x14	; 20
     ec6:	24 e0       	ldi	r18, 0x04	; 4
   uint8_t pinMapValue = 0;
     ec8:	60 e0       	ldi	r22, 0x00	; 0
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
   {
      if ( ( value & 0x1 ) == 1 )
     eca:	30 ff       	sbrs	r19, 0
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x12>
      {
         pinMapValue |= _data_pins[i];
     ece:	50 81       	ld	r21, Z
     ed0:	65 2b       	or	r22, r21
      }
      value = ( value >> 1 );
     ed2:	36 95       	lsr	r19
     ed4:	21 50       	subi	r18, 0x01	; 1
     ed6:	31 96       	adiw	r30, 0x01	; 1
{
   uint8_t pinMapValue = 0;
   
   // Map the value to LCD pin mapping
   // --------------------------------
   for ( uint8_t i = 0; i < 4; i++ )
     ed8:	21 11       	cpse	r18, r1
     eda:	f7 cf       	rjmp	.-18     	; 0xeca <_ZN17LiquidCrystal_I2C10write4bitsEhh+0xa>
      value = ( value >> 1 );
   }
   
   // Is it a command or data
   // -----------------------
   if ( mode == DATA )
     edc:	41 30       	cpi	r20, 0x01	; 1
     ede:	11 f4       	brne	.+4      	; 0xee4 <_ZN17LiquidCrystal_I2C10write4bitsEhh+0x24>
   {
      mode = _Rs;
     ee0:	fc 01       	movw	r30, r24
     ee2:	43 89       	ldd	r20, Z+19	; 0x13
     ee4:	fc 01       	movw	r30, r24
     ee6:	24 85       	ldd	r18, Z+12	; 0x0c
     ee8:	62 2b       	or	r22, r18
   }
   
   pinMapValue |= mode | _backlightStsMask;
     eea:	64 2b       	or	r22, r20
   pulseEnable ( pinMapValue );
     eec:	0c 94 45 07 	jmp	0xe8a	; 0xe8a <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00000ef0 <_ZN17LiquidCrystal_I2C4sendEhh>:
//----------------------------------------------------------------------------

//
// send - write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) 
{
     ef0:	0f 93       	push	r16
     ef2:	1f 93       	push	r17
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	06 2f       	mov	r16, r22
     efa:	0f 70       	andi	r16, 0x0F	; 15
   // No need to use the delay routines since the time taken to write takes
   // longer that what is needed both for toggling and enable pin an to execute
   // the command.
   
   if ( mode == FOUR_BITS )
     efc:	42 30       	cpi	r20, 0x02	; 2
     efe:	19 f4       	brne	.+6      	; 0xf06 <_ZN17LiquidCrystal_I2C4sendEhh+0x16>
   {
      write4bits( (value & 0x0F), COMMAND );
     f00:	40 e0       	ldi	r20, 0x00	; 0
     f02:	60 2f       	mov	r22, r16
     f04:	10 c0       	rjmp	.+32     	; 0xf26 <_ZN17LiquidCrystal_I2C4sendEhh+0x36>
     f06:	14 2f       	mov	r17, r20
     f08:	26 2f       	mov	r18, r22
     f0a:	ec 01       	movw	r28, r24
   }
   else 
   {
      write4bits( (value >> 4), mode );
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	b9 01       	movw	r22, r18
     f10:	84 e0       	ldi	r24, 0x04	; 4
     f12:	75 95       	asr	r23
     f14:	67 95       	ror	r22
     f16:	8a 95       	dec	r24
     f18:	e1 f7       	brne	.-8      	; 0xf12 <_ZN17LiquidCrystal_I2C4sendEhh+0x22>
     f1a:	ce 01       	movw	r24, r28
     f1c:	0e 94 60 07 	call	0xec0	; 0xec0 <_ZN17LiquidCrystal_I2C10write4bitsEhh>
      write4bits( (value & 0x0F), mode);
     f20:	41 2f       	mov	r20, r17
     f22:	60 2f       	mov	r22, r16
     f24:	ce 01       	movw	r24, r28
   }
}
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	1f 91       	pop	r17
     f2c:	0f 91       	pop	r16
      write4bits( (value & 0x0F), COMMAND );
   }
   else 
   {
      write4bits( (value >> 4), mode );
      write4bits( (value & 0x0F), mode);
     f2e:	0c 94 60 07 	jmp	0xec0	; 0xec0 <_ZN17LiquidCrystal_I2C10write4bitsEhh>

00000f32 <_ZN17LiquidCrystal_I2C5beginEhhh>:
// ---------------------------------------------------------------------------

//
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
     f32:	0f 93       	push	r16
     f34:	1f 93       	push	r17
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <_ZN17LiquidCrystal_I2C5beginEhhh+0xa>
     f3c:	1f 92       	push	r1
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
     f42:	8c 01       	movw	r16, r24
   
   init();     // Initialise the I2C expander interface
     f44:	2b 83       	std	Y+3, r18	; 0x03
     f46:	4a 83       	std	Y+2, r20	; 0x02
     f48:	69 83       	std	Y+1, r22	; 0x01
     f4a:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN17LiquidCrystal_I2C4initEv>
   LCD::begin ( cols, lines, dotsize );   
     f4e:	2b 81       	ldd	r18, Y+3	; 0x03
     f50:	4a 81       	ldd	r20, Y+2	; 0x02
     f52:	69 81       	ldd	r22, Y+1	; 0x01
     f54:	c8 01       	movw	r24, r16
}
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
// begin
void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) 
{
   
   init();     // Initialise the I2C expander interface
   LCD::begin ( cols, lines, dotsize );   
     f64:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <_ZN3LCD5beginEhhh>

00000f68 <_ZN5SDLib4File5writeEh>:
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	1f 92       	push	r1
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	69 83       	std	Y+1, r22	; 0x01
  return write(&val, 1);
     f74:	dc 01       	movw	r26, r24
     f76:	ed 91       	ld	r30, X+
     f78:	fc 91       	ld	r31, X
     f7a:	02 80       	ldd	r0, Z+2	; 0x02
     f7c:	f3 81       	ldd	r31, Z+3	; 0x03
     f7e:	e0 2d       	mov	r30, r0
     f80:	41 e0       	ldi	r20, 0x01	; 1
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	be 01       	movw	r22, r28
     f86:	6f 5f       	subi	r22, 0xFF	; 255
     f88:	7f 4f       	sbci	r23, 0xFF	; 255
     f8a:	09 95       	icall
}
     f8c:	0f 90       	pop	r0
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	08 95       	ret

00000f94 <_ZN5SDLib4File5writeEPKhj>:

size_t File::write(const uint8_t *buf, size_t size) {
     f94:	cf 93       	push	r28
     f96:	df 93       	push	r29
     f98:	ec 01       	movw	r28, r24
  size_t t;
  if (!_file) {
     f9a:	89 8d       	ldd	r24, Y+25	; 0x19
     f9c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     f9e:	00 97       	sbiw	r24, 0x00	; 0
     fa0:	39 f4       	brne	.+14     	; 0xfb0 <_ZN5SDLib4File5writeEPKhj+0x1c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	9b 83       	std	Y+3, r25	; 0x03
     fa8:	8a 83       	std	Y+2, r24	; 0x02
    setWriteError();
    return 0;
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	0b c0       	rjmp	.+22     	; 0xfc6 <_ZN5SDLib4File5writeEPKhj+0x32>
     fb0:	fc 01       	movw	r30, r24
     fb2:	13 82       	std	Z+3, r1	; 0x03
     fb4:	12 82       	std	Z+2, r1	; 0x02
  }
  _file->clearWriteError();
  t = _file->write(buf, size);
     fb6:	0e 94 58 14 	call	0x28b0	; 0x28b0 <_ZN6SdFile5writeEPKvj>
     fba:	e9 8d       	ldd	r30, Y+25	; 0x19
     fbc:	fa 8d       	ldd	r31, Y+26	; 0x1a
  if (_file->getWriteError()) {
     fbe:	22 81       	ldd	r18, Z+2	; 0x02
     fc0:	33 81       	ldd	r19, Z+3	; 0x03
     fc2:	23 2b       	or	r18, r19
     fc4:	71 f7       	brne	.-36     	; 0xfa2 <_ZN5SDLib4File5writeEPKhj+0xe>
    setWriteError();
    return 0;
  }
  return t;
}
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	08 95       	ret

00000fcc <_ZN5SDLib4File5flushEv>:

  return n > 0X7FFF ? 0X7FFF : n;
}

void File::flush() {
  if (_file)
     fcc:	fc 01       	movw	r30, r24
     fce:	81 8d       	ldd	r24, Z+25	; 0x19
     fd0:	92 8d       	ldd	r25, Z+26	; 0x1a
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	11 f0       	breq	.+4      	; 0xfda <_ZN5SDLib4File5flushEv+0xe>
    _file->sync();
     fd6:	0c 94 ef 11 	jmp	0x23de	; 0x23de <_ZN6SdFile4syncEv>
     fda:	08 95       	ret

00000fdc <_ZN6SdFile4readEv>:
   * Read the next byte from a file.
   *
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	1f 92       	push	r1
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     fe6:	41 e0       	ldi	r20, 0x01	; 1
     fe8:	50 e0       	ldi	r21, 0x00	; 0
     fea:	be 01       	movw	r22, r28
     fec:	6f 5f       	subi	r22, 0xFF	; 255
     fee:	7f 4f       	sbci	r23, 0xFF	; 255
     ff0:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN6SdFile4readEPvj>
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	19 f4       	brne	.+6      	; 0xffe <_ZN6SdFile4readEv+0x22>
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <_ZN6SdFile4readEv+0x26>
     ffe:	8f ef       	ldi	r24, 0xFF	; 255
    1000:	9f ef       	ldi	r25, 0xFF	; 255
  }
    1002:	0f 90       	pop	r0
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	08 95       	ret

0000100a <_ZN5SDLib4File4readEv>:
  if (c != -1) _file->seekCur(-1);
  return c;
}

int File::read() {
  if (_file) 
    100a:	fc 01       	movw	r30, r24
    100c:	81 8d       	ldd	r24, Z+25	; 0x19
    100e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	11 f0       	breq	.+4      	; 0x1018 <_ZN5SDLib4File4readEv+0xe>
    return _file->read();
    1014:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <_ZN6SdFile4readEv>
  return -1;
}
    1018:	8f ef       	ldi	r24, 0xFF	; 255
    101a:	9f ef       	ldi	r25, 0xFF	; 255
    101c:	08 95       	ret

0000101e <_ZN5SDLib4File4peekEv>:
    return 0;
  }
  return t;
}

int File::peek() {
    101e:	0f 93       	push	r16
    1020:	1f 93       	push	r17
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	fc 01       	movw	r30, r24
  if (! _file) 
    1028:	81 8d       	ldd	r24, Z+25	; 0x19
    102a:	92 8d       	ldd	r25, Z+26	; 0x1a
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	b9 f0       	breq	.+46     	; 0x105e <_ZN5SDLib4File4peekEv+0x40>
    1030:	ef 01       	movw	r28, r30
    return 0;

  int c = _file->read();
    1032:	0e 94 ee 07 	call	0xfdc	; 0xfdc <_ZN6SdFile4readEv>
    1036:	8c 01       	movw	r16, r24
  if (c != -1) _file->seekCur(-1);
    1038:	0f 3f       	cpi	r16, 0xFF	; 255
    103a:	8f ef       	ldi	r24, 0xFF	; 255
    103c:	18 07       	cpc	r17, r24
    103e:	91 f0       	breq	.+36     	; 0x1064 <_ZN5SDLib4File4peekEv+0x46>
    1040:	89 8d       	ldd	r24, Y+25	; 0x19
    1042:	9a 8d       	ldd	r25, Y+26	; 0x1a
  }
  uint8_t rmDir(void);
  uint8_t rmRfStar(void);
  /** Set the files position to current position + \a pos. See seekSet(). */
  uint8_t seekCur(uint32_t pos) {
    return seekSet(curPosition_ + pos);
    1044:	fc 01       	movw	r30, r24
    1046:	42 85       	ldd	r20, Z+10	; 0x0a
    1048:	53 85       	ldd	r21, Z+11	; 0x0b
    104a:	64 85       	ldd	r22, Z+12	; 0x0c
    104c:	75 85       	ldd	r23, Z+13	; 0x0d
    104e:	41 50       	subi	r20, 0x01	; 1
    1050:	51 09       	sbc	r21, r1
    1052:	61 09       	sbc	r22, r1
    1054:	71 09       	sbc	r23, r1
    1056:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_ZN6SdFile7seekSetEm>
    105a:	c8 01       	movw	r24, r16
    105c:	05 c0       	rjmp	.+10     	; 0x1068 <_ZN5SDLib4File4peekEv+0x4a>
  return t;
}

int File::peek() {
  if (! _file) 
    return 0;
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <_ZN5SDLib4File4peekEv+0x4a>
    1064:	8f ef       	ldi	r24, 0xFF	; 255
    1066:	9f ef       	ldi	r25, 0xFF	; 255

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	1f 91       	pop	r17
    106e:	0f 91       	pop	r16
    1070:	08 95       	ret

00001072 <_ZN5SDLib4FileC1E6SdFilePKc>:

/* for debugging file open/close leaks
   uint8_t nfilecount=0;
*/

File::File(SdFile f, const char *n) {
    1072:	ef 92       	push	r14
    1074:	ff 92       	push	r15
    1076:	0f 93       	push	r16
    1078:	1f 93       	push	r17
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	ec 01       	movw	r28, r24
    1080:	7b 01       	movw	r14, r22
    1082:	8a 01       	movw	r16, r20
  public:
    Print() : write_error(0) {}
    1084:	1b 82       	std	Y+3, r1	; 0x03
    1086:	1a 82       	std	Y+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1088:	88 ee       	ldi	r24, 0xE8	; 232
    108a:	93 e0       	ldi	r25, 0x03	; 3
    108c:	a0 e0       	ldi	r26, 0x00	; 0
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	8c 83       	std	Y+4, r24	; 0x04
    1092:	9d 83       	std	Y+5, r25	; 0x05
    1094:	ae 83       	std	Y+6, r26	; 0x06
    1096:	bf 83       	std	Y+7, r27	; 0x07
    1098:	8b eb       	ldi	r24, 0xBB	; 187
    109a:	91 e0       	ldi	r25, 0x01	; 1
    109c:	99 83       	std	Y+1, r25	; 0x01
    109e:	88 83       	st	Y, r24
  // oh man you are kidding me, new() doesnt exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile)); 
    10a0:	8d e1       	ldi	r24, 0x1D	; 29
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	0e 94 4e 24 	call	0x489c	; 0x489c <malloc>
    10a8:	9a 8f       	std	Y+26, r25	; 0x1a
    10aa:	89 8f       	std	Y+25, r24	; 0x19
  if (_file) {
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	79 f0       	breq	.+30     	; 0x10ce <_ZN5SDLib4FileC1E6SdFilePKc+0x5c>
    memcpy(_file, &f, sizeof(SdFile));
    10b0:	2d e1       	ldi	r18, 0x1D	; 29
    10b2:	f7 01       	movw	r30, r14
    10b4:	dc 01       	movw	r26, r24
    10b6:	01 90       	ld	r0, Z+
    10b8:	0d 92       	st	X+, r0
    10ba:	2a 95       	dec	r18
    10bc:	e1 f7       	brne	.-8      	; 0x10b6 <_ZN5SDLib4FileC1E6SdFilePKc+0x44>
    
    strncpy(_name, n, 12);
    10be:	4c e0       	ldi	r20, 0x0C	; 12
    10c0:	50 e0       	ldi	r21, 0x00	; 0
    10c2:	b8 01       	movw	r22, r16
    10c4:	ce 01       	movw	r24, r28
    10c6:	0c 96       	adiw	r24, 0x0c	; 12
    10c8:	0e 94 98 25 	call	0x4b30	; 0x4b30 <strncpy>
    _name[12] = 0;
    10cc:	18 8e       	std	Y+24, r1	; 0x18
       Serial.print(n);
       Serial.print("\": ");
       Serial.println(nfilecount, DEC);
    */
  }
}
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	1f 91       	pop	r17
    10d4:	0f 91       	pop	r16
    10d6:	ff 90       	pop	r15
    10d8:	ef 90       	pop	r14
    10da:	08 95       	ret

000010dc <_ZN5SDLib4FileC1Ev>:

File::File(void) {
    10dc:	fc 01       	movw	r30, r24
    10de:	13 82       	std	Z+3, r1	; 0x03
    10e0:	12 82       	std	Z+2, r1	; 0x02
    10e2:	88 ee       	ldi	r24, 0xE8	; 232
    10e4:	93 e0       	ldi	r25, 0x03	; 3
    10e6:	a0 e0       	ldi	r26, 0x00	; 0
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	84 83       	std	Z+4, r24	; 0x04
    10ec:	95 83       	std	Z+5, r25	; 0x05
    10ee:	a6 83       	std	Z+6, r26	; 0x06
    10f0:	b7 83       	std	Z+7, r27	; 0x07
    10f2:	8b eb       	ldi	r24, 0xBB	; 187
    10f4:	91 e0       	ldi	r25, 0x01	; 1
    10f6:	91 83       	std	Z+1, r25	; 0x01
    10f8:	80 83       	st	Z, r24
  _file = 0;
    10fa:	12 8e       	std	Z+26, r1	; 0x1a
    10fc:	11 8e       	std	Z+25, r1	; 0x19
  _name[0] = 0;
    10fe:	14 86       	std	Z+12, r1	; 0x0c
    1100:	08 95       	ret

00001102 <_ZN5SDLib4File8positionEv>:

  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) return -1;
    1102:	dc 01       	movw	r26, r24
    1104:	59 96       	adiw	r26, 0x19	; 25
    1106:	ed 91       	ld	r30, X+
    1108:	fc 91       	ld	r31, X
    110a:	5a 97       	sbiw	r26, 0x1a	; 26
    110c:	30 97       	sbiw	r30, 0x00	; 0
    110e:	29 f0       	breq	.+10     	; 0x111a <_ZN5SDLib4File8positionEv+0x18>
  uint8_t createContiguous(SdFile* dirFile,
          const char* fileName, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster(void) const {return curCluster_;}
  /** \return The current position for a file or directory. */
  uint32_t curPosition(void) const {return curPosition_;}
    1110:	62 85       	ldd	r22, Z+10	; 0x0a
    1112:	73 85       	ldd	r23, Z+11	; 0x0b
    1114:	84 85       	ldd	r24, Z+12	; 0x0c
    1116:	95 85       	ldd	r25, Z+13	; 0x0d
  return _file->curPosition();
    1118:	08 95       	ret

  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) return -1;
    111a:	6f ef       	ldi	r22, 0xFF	; 255
    111c:	7f ef       	ldi	r23, 0xFF	; 255
    111e:	cb 01       	movw	r24, r22
  return _file->curPosition();
}
    1120:	08 95       	ret

00001122 <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
  if (! _file) return 0;
    1122:	dc 01       	movw	r26, r24
    1124:	59 96       	adiw	r26, 0x19	; 25
    1126:	ed 91       	ld	r30, X+
    1128:	fc 91       	ld	r31, X
    112a:	5a 97       	sbiw	r26, 0x1a	; 26
    112c:	30 97       	sbiw	r30, 0x00	; 0
    112e:	29 f0       	breq	.+10     	; 0x113a <_ZN5SDLib4File4sizeEv+0x18>
  uint8_t dirEntry(dir_t* dir);
  /** \return Index of this file's directory in the block dirBlock. */
  uint8_t dirIndex(void) const {return dirIndex_;}
  static void dirName(const dir_t& dir, char* name);
  /** \return The total number of bytes in a file or directory. */
  uint32_t fileSize(void) const {return fileSize_;}
    1130:	63 89       	ldd	r22, Z+19	; 0x13
    1132:	74 89       	ldd	r23, Z+20	; 0x14
    1134:	85 89       	ldd	r24, Z+21	; 0x15
    1136:	96 89       	ldd	r25, Z+22	; 0x16
  return _file->fileSize();
    1138:	08 95       	ret
  if (! _file) return -1;
  return _file->curPosition();
}

uint32_t File::size() {
  if (! _file) return 0;
    113a:	60 e0       	ldi	r22, 0x00	; 0
    113c:	70 e0       	ldi	r23, 0x00	; 0
    113e:	cb 01       	movw	r24, r22
  return _file->fileSize();
}
    1140:	08 95       	ret

00001142 <_ZN5SDLib4File9availableEv>:
  if (_file) 
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
    1142:	cf 92       	push	r12
    1144:	df 92       	push	r13
    1146:	ef 92       	push	r14
    1148:	ff 92       	push	r15
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
  if (! _file) return 0;
    114e:	fc 01       	movw	r30, r24
    1150:	21 8d       	ldd	r18, Z+25	; 0x19
    1152:	32 8d       	ldd	r19, Z+26	; 0x1a
    1154:	23 2b       	or	r18, r19
    1156:	d9 f0       	breq	.+54     	; 0x118e <_ZN5SDLib4File9availableEv+0x4c>
    1158:	ec 01       	movw	r28, r24

  uint32_t n = size() - position();
    115a:	0e 94 91 08 	call	0x1122	; 0x1122 <_ZN5SDLib4File4sizeEv>
    115e:	6b 01       	movw	r12, r22
    1160:	7c 01       	movw	r14, r24
    1162:	ce 01       	movw	r24, r28
    1164:	0e 94 81 08 	call	0x1102	; 0x1102 <_ZN5SDLib4File8positionEv>
    1168:	a7 01       	movw	r20, r14
    116a:	96 01       	movw	r18, r12
    116c:	26 1b       	sub	r18, r22
    116e:	37 0b       	sbc	r19, r23
    1170:	48 0b       	sbc	r20, r24
    1172:	59 0b       	sbc	r21, r25
    1174:	da 01       	movw	r26, r20
    1176:	c9 01       	movw	r24, r18

  return n > 0X7FFF ? 0X7FFF : n;
    1178:	81 15       	cp	r24, r1
    117a:	30 e8       	ldi	r19, 0x80	; 128
    117c:	93 07       	cpc	r25, r19
    117e:	a1 05       	cpc	r26, r1
    1180:	b1 05       	cpc	r27, r1
    1182:	38 f0       	brcs	.+14     	; 0x1192 <_ZN5SDLib4File9availableEv+0x50>
    1184:	8f ef       	ldi	r24, 0xFF	; 255
    1186:	9f e7       	ldi	r25, 0x7F	; 127
    1188:	a0 e0       	ldi	r26, 0x00	; 0
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <_ZN5SDLib4File9availableEv+0x50>
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	90 e0       	ldi	r25, 0x00	; 0

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
}
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	ff 90       	pop	r15
    1198:	ef 90       	pop	r14
    119a:	df 90       	pop	r13
    119c:	cf 90       	pop	r12
    119e:	08 95       	ret

000011a0 <_ZN5SDLib4File5closeEv>:
uint32_t File::size() {
  if (! _file) return 0;
  return _file->fileSize();
}

void File::close() {
    11a0:	cf 93       	push	r28
    11a2:	df 93       	push	r29
    11a4:	ec 01       	movw	r28, r24
  if (_file) {
    11a6:	89 8d       	ldd	r24, Y+25	; 0x19
    11a8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    11aa:	00 97       	sbiw	r24, 0x00	; 0
    11ac:	41 f0       	breq	.+16     	; 0x11be <_ZN5SDLib4File5closeEv+0x1e>
    _file->close();
    11ae:	0e 94 36 12 	call	0x246c	; 0x246c <_ZN6SdFile5closeEv>
    free(_file); 
    11b2:	89 8d       	ldd	r24, Y+25	; 0x19
    11b4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    11b6:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <free>
    _file = 0;
    11ba:	1a 8e       	std	Y+26, r1	; 0x1a
    11bc:	19 8e       	std	Y+25, r1	; 0x19
    nfilecount--;
    Serial.print("Deleted ");
    Serial.println(nfilecount, DEC);
    */
  }
}
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	08 95       	ret

000011c4 <_ZN5SDLib4FilecvbEv>:

File::operator bool() {
  if (_file) 
    11c4:	dc 01       	movw	r26, r24
    11c6:	59 96       	adiw	r26, 0x19	; 25
    11c8:	ed 91       	ld	r30, X+
    11ca:	fc 91       	ld	r31, X
    11cc:	5a 97       	sbiw	r26, 0x1a	; 26
    11ce:	30 97       	sbiw	r30, 0x00	; 0
    11d0:	21 f0       	breq	.+8      	; 0x11da <_ZN5SDLib4FilecvbEv+0x16>
  /** \return True if this is a SdFile for a directory else false. */
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
  /** \return True if this is a SdFile for a file else false. */
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is a SdFile for an open file/directory else false. */
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	95 81       	ldd	r25, Z+5	; 0x05
    11d6:	91 11       	cpse	r25, r1
    11d8:	01 c0       	rjmp	.+2      	; 0x11dc <_ZN5SDLib4FilecvbEv+0x18>
    return  _file->isOpen();
  return false;
    11da:	80 e0       	ldi	r24, 0x00	; 0
}
    11dc:	08 95       	ret

000011de <_ZN5SDLib19callback_pathExistsER6SdFilePKcbPv>:
   a pointer to an arbitrary object used for context.

 */

boolean callback_pathExists(SdFile& parentDir, const char *filePathComponent, 
			    boolean isLastComponent, void *object) {
    11de:	1f 93       	push	r17
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	6d 97       	sbiw	r28, 0x1d	; 29
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	cd bf       	out	0x3d, r28	; 61
    11f4:	ab 01       	movw	r20, r22
    11f6:	1c 82       	std	Y+4, r1	; 0x04
    11f8:	1b 82       	std	Y+3, r1	; 0x03
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    11fa:	2d ec       	ldi	r18, 0xCD	; 205
    11fc:	31 e0       	ldi	r19, 0x01	; 1
    11fe:	3a 83       	std	Y+2, r19	; 0x02
    1200:	29 83       	std	Y+1, r18	; 0x01
    1202:	1e 82       	std	Y+6, r1	; 0x06
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    1204:	21 e0       	ldi	r18, 0x01	; 1
    1206:	bc 01       	movw	r22, r24
    1208:	ce 01       	movw	r24, r28
    120a:	01 96       	adiw	r24, 0x01	; 1
    120c:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <_ZN6SdFile4openEPS_PKch>
    Returns true if file path exists.

  */
  SdFile child;

  boolean exists = child.open(parentDir, filePathComponent, O_RDONLY);
    1210:	11 e0       	ldi	r17, 0x01	; 1
    1212:	81 11       	cpse	r24, r1
    1214:	02 c0       	rjmp	.+4      	; 0x121a <_ZN5SDLib19callback_pathExistsER6SdFilePKcbPv+0x3c>
    1216:	10 e0       	ldi	r17, 0x00	; 0
    1218:	04 c0       	rjmp	.+8      	; 0x1222 <_ZN5SDLib19callback_pathExistsER6SdFilePKcbPv+0x44>
  
  if (exists) {
     child.close(); 
    121a:	ce 01       	movw	r24, r28
    121c:	01 96       	adiw	r24, 0x01	; 1
    121e:	0e 94 36 12 	call	0x246c	; 0x246c <_ZN6SdFile5closeEv>
  }
  
  return exists;
}
    1222:	81 2f       	mov	r24, r17
    1224:	6d 96       	adiw	r28, 0x1d	; 29
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	1f 91       	pop	r17
    1236:	08 95       	ret

00001238 <_ZN5SDLib20getNextPathComponentEPKcPjPc>:
// Used by `getNextPathComponent`
#define MAX_COMPONENT_LEN 12 // What is max length?
#define PATH_COMPONENT_BUFFER_LEN MAX_COMPONENT_LEN+1

bool getNextPathComponent(const char *path, unsigned int *p_offset,
			  char *buffer) {
    1238:	0f 93       	push	r16
    123a:	1f 93       	push	r17
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	da 01       	movw	r26, r20
  // TODO: Have buffer local to this function, so we know it's the
  //       correct length?

  int bufferOffset = 0;

  int offset = *p_offset;
    1242:	eb 01       	movw	r28, r22
    1244:	28 81       	ld	r18, Y
    1246:	39 81       	ldd	r19, Y+1	; 0x01

  // Skip root or other separator
  if (path[offset] == '/') {
    1248:	fc 01       	movw	r30, r24
    124a:	e2 0f       	add	r30, r18
    124c:	f3 1f       	adc	r31, r19
    124e:	40 81       	ld	r20, Z
    1250:	4f 32       	cpi	r20, 0x2F	; 47
    1252:	11 f4       	brne	.+4      	; 0x1258 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x20>
    offset++;
    1254:	2f 5f       	subi	r18, 0xFF	; 255
    1256:	3f 4f       	sbci	r19, 0xFF	; 255
    1258:	8d 01       	movw	r16, r26
// Used by `getNextPathComponent`
#define MAX_COMPONENT_LEN 12 // What is max length?
#define PATH_COMPONENT_BUFFER_LEN MAX_COMPONENT_LEN+1

bool getNextPathComponent(const char *path, unsigned int *p_offset,
			  char *buffer) {
    125a:	e0 e0       	ldi	r30, 0x00	; 0
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	ac 01       	movw	r20, r24
    1260:	42 0f       	add	r20, r18
    1262:	53 1f       	adc	r21, r19
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    1264:	ea 01       	movw	r28, r20
    1266:	58 81       	ld	r21, Y
    1268:	5f 32       	cpi	r21, 0x2F	; 47
    126a:	59 f0       	breq	.+22     	; 0x1282 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x4a>
	 && (path[offset] != '\0')) {
    126c:	55 23       	and	r21, r21
    126e:	49 f0       	breq	.+18     	; 0x1282 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x4a>
    buffer[bufferOffset++] = path[offset++];
    1270:	31 96       	adiw	r30, 0x01	; 1
    1272:	2f 5f       	subi	r18, 0xFF	; 255
    1274:	3f 4f       	sbci	r19, 0xFF	; 255
    1276:	e8 01       	movw	r28, r16
    1278:	59 93       	st	Y+, r21
    127a:	8e 01       	movw	r16, r28
  if (path[offset] == '/') {
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
    127c:	ec 30       	cpi	r30, 0x0C	; 12
    127e:	f1 05       	cpc	r31, r1
    1280:	71 f7       	brne	.-36     	; 0x125e <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x26>
	 && (path[offset] != '/')
	 && (path[offset] != '\0')) {
    buffer[bufferOffset++] = path[offset++];
  }

  buffer[bufferOffset] = '\0';
    1282:	ea 0f       	add	r30, r26
    1284:	fb 1f       	adc	r31, r27
    1286:	10 82       	st	Z, r1

  // Skip trailing separator so we can determine if this
  // is the last component in the path or not.
  if (path[offset] == '/') {
    1288:	fc 01       	movw	r30, r24
    128a:	e2 0f       	add	r30, r18
    128c:	f3 1f       	adc	r31, r19
    128e:	40 81       	ld	r20, Z
    1290:	4f 32       	cpi	r20, 0x2F	; 47
    1292:	11 f4       	brne	.+4      	; 0x1298 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x60>
    offset++;
    1294:	2f 5f       	subi	r18, 0xFF	; 255
    1296:	3f 4f       	sbci	r19, 0xFF	; 255
  }

  *p_offset = offset;
    1298:	fb 01       	movw	r30, r22
    129a:	31 83       	std	Z+1, r19	; 0x01
    129c:	20 83       	st	Z, r18

  return (path[offset] != '\0');
    129e:	fc 01       	movw	r30, r24
    12a0:	e2 0f       	add	r30, r18
    12a2:	f3 1f       	adc	r31, r19
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 81       	ld	r25, Z
    12a8:	91 11       	cpse	r25, r1
    12aa:	01 c0       	rjmp	.+2      	; 0x12ae <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x76>
    12ac:	80 e0       	ldi	r24, 0x00	; 0
}
    12ae:	df 91       	pop	r29
    12b0:	cf 91       	pop	r28
    12b2:	1f 91       	pop	r17
    12b4:	0f 91       	pop	r16
    12b6:	08 95       	ret

000012b8 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_>:
boolean walkPath(const char *filepath, SdFile& parentDir,
		 boolean (*callback)(SdFile& parentDir,
				     const char *filePathComponent,
				     boolean isLastComponent,
				     void *object),
		 void *object = NULL) {
    12b8:	4f 92       	push	r4
    12ba:	5f 92       	push	r5
    12bc:	6f 92       	push	r6
    12be:	7f 92       	push	r7
    12c0:	8f 92       	push	r8
    12c2:	9f 92       	push	r9
    12c4:	af 92       	push	r10
    12c6:	bf 92       	push	r11
    12c8:	cf 92       	push	r12
    12ca:	df 92       	push	r13
    12cc:	ef 92       	push	r14
    12ce:	ff 92       	push	r15
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	c9 54       	subi	r28, 0x49	; 73
    12de:	d1 09       	sbc	r29, r1
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	de bf       	out	0x3e, r29	; 62
    12e6:	0f be       	out	0x3f, r0	; 63
    12e8:	cd bf       	out	0x3d, r28	; 61
    12ea:	5c 01       	movw	r10, r24
    12ec:	6b 01       	movw	r12, r22
    12ee:	3a 01       	movw	r6, r20
    12f0:	49 01       	movw	r8, r18
    12f2:	19 a2       	std	Y+33, r1	; 0x21
    12f4:	18 a2       	std	Y+32, r1	; 0x20
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    12f6:	8d ec       	ldi	r24, 0xCD	; 205
    12f8:	91 e0       	ldi	r25, 0x01	; 1
    12fa:	9f 8f       	std	Y+31, r25	; 0x1f
    12fc:	8e 8f       	std	Y+30, r24	; 0x1e
    12fe:	1b a2       	std	Y+35, r1	; 0x23
    1300:	1c 82       	std	Y+4, r1	; 0x04
    1302:	1b 82       	std	Y+3, r1	; 0x03
    1304:	9a 83       	std	Y+2, r25	; 0x02
    1306:	89 83       	std	Y+1, r24	; 0x01
    1308:	1e 82       	std	Y+6, r1	; 0x06
  SdFile subfile1;
  SdFile subfile2;

  char buffer[PATH_COMPONENT_BUFFER_LEN]; 

  unsigned int offset = 0;
    130a:	2a 96       	adiw	r28, 0x0a	; 10
    130c:	1f ae       	std	Y+63, r1	; 0x3f
    130e:	1e ae       	std	Y+62, r1	; 0x3e
    1310:	2a 97       	sbiw	r28, 0x0a	; 10
    1312:	8b 01       	movw	r16, r22
  SdFile *p_parent;
  SdFile *p_child;

  SdFile *p_tmp_sdfile;  
  
  p_child = &subfile1;
    1314:	7e 01       	movw	r14, r28
    1316:	8e e1       	ldi	r24, 0x1E	; 30
    1318:	e8 0e       	add	r14, r24
    131a:	f1 1c       	adc	r15, r1

  while (true) {

    boolean moreComponents = getNextPathComponent(filepath, &offset, buffer);

    boolean shouldContinue = callback((*p_parent), buffer, !moreComponents, object);
    131c:	44 24       	eor	r4, r4
    131e:	43 94       	inc	r4
  
  p_parent = &parentDir;

  while (true) {

    boolean moreComponents = getNextPathComponent(filepath, &offset, buffer);
    1320:	ae 01       	movw	r20, r28
    1322:	45 5c       	subi	r20, 0xC5	; 197
    1324:	5f 4f       	sbci	r21, 0xFF	; 255
    1326:	be 01       	movw	r22, r28
    1328:	68 5b       	subi	r22, 0xB8	; 184
    132a:	7f 4f       	sbci	r23, 0xFF	; 255
    132c:	c5 01       	movw	r24, r10
    132e:	0e 94 1c 09 	call	0x1238	; 0x1238 <_ZN5SDLib20getNextPathComponentEPKcPjPc>
    1332:	58 2e       	mov	r5, r24

    boolean shouldContinue = callback((*p_parent), buffer, !moreComponents, object);
    1334:	48 2f       	mov	r20, r24
    1336:	44 25       	eor	r20, r4
    1338:	94 01       	movw	r18, r8
    133a:	be 01       	movw	r22, r28
    133c:	65 5c       	subi	r22, 0xC5	; 197
    133e:	7f 4f       	sbci	r23, 0xFF	; 255
    1340:	c8 01       	movw	r24, r16
    1342:	f3 01       	movw	r30, r6
    1344:	09 95       	icall

    if (!shouldContinue) {
    1346:	81 11       	cpse	r24, r1
    1348:	08 c0       	rjmp	.+16     	; 0x135a <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xa2>
      // TODO: Don't repeat this code?
      // If it's one we've created then we
      // don't need the parent handle anymore.
      if (p_parent != &parentDir) {
    134a:	0c 15       	cp	r16, r12
    134c:	1d 05       	cpc	r17, r13
    134e:	19 f0       	breq	.+6      	; 0x1356 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x9e>
        (*p_parent).close();
    1350:	c8 01       	movw	r24, r16
    1352:	0e 94 36 12 	call	0x246c	; 0x246c <_ZN6SdFile5closeEv>
      }
      return false;
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	27 c0       	rjmp	.+78     	; 0x13a8 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xf0>
    }
    
    if (!moreComponents) {
    135a:	55 20       	and	r5, r5
    135c:	b9 f0       	breq	.+46     	; 0x138c <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xd4>
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    135e:	21 e0       	ldi	r18, 0x01	; 1
    1360:	ae 01       	movw	r20, r28
    1362:	45 5c       	subi	r20, 0xC5	; 197
    1364:	5f 4f       	sbci	r21, 0xFF	; 255
    1366:	b8 01       	movw	r22, r16
    1368:	c7 01       	movw	r24, r14
    136a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <_ZN6SdFile4openEPS_PKch>
    136e:	58 2e       	mov	r5, r24
    
    boolean exists = (*p_child).open(*p_parent, buffer, O_RDONLY);

    // If it's one we've created then we
    // don't need the parent handle anymore.
    if (p_parent != &parentDir) {
    1370:	0c 15       	cp	r16, r12
    1372:	1d 05       	cpc	r17, r13
    1374:	99 f0       	breq	.+38     	; 0x139c <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xe4>
      (*p_parent).close();
    1376:	c8 01       	movw	r24, r16
    1378:	0e 94 36 12 	call	0x246c	; 0x246c <_ZN6SdFile5closeEv>
    }
    
    // Handle case when it doesn't exist and we can't continue...
    if (exists) {
    137c:	55 20       	and	r5, r5
    137e:	59 f3       	breq	.-42     	; 0x1356 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x9e>
      // We alternate between two file handles as we go down
      // the path.
      if (p_parent == &parentDir) {
        p_parent = &subfile2;
    1380:	90 2f       	mov	r25, r16
    1382:	81 2f       	mov	r24, r17
    1384:	87 01       	movw	r16, r14
    1386:	e9 2e       	mov	r14, r25
    1388:	f8 2e       	mov	r15, r24
    138a:	ca cf       	rjmp	.-108    	; 0x1320 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x68>
    } else {
      return false;
    }
  }
  
  if (p_parent != &parentDir) {
    138c:	0c 15       	cp	r16, r12
    138e:	1d 05       	cpc	r17, r13
    1390:	19 f0       	breq	.+6      	; 0x1398 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xe0>
    (*p_parent).close(); // TODO: Return/ handle different?
    1392:	c8 01       	movw	r24, r16
    1394:	0e 94 36 12 	call	0x246c	; 0x246c <_ZN6SdFile5closeEv>
  }

  return true;
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	06 c0       	rjmp	.+12     	; 0x13a8 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xf0>
    if (p_parent != &parentDir) {
      (*p_parent).close();
    }
    
    // Handle case when it doesn't exist and we can't continue...
    if (exists) {
    139c:	88 23       	and	r24, r24
    139e:	d9 f2       	breq	.-74     	; 0x1356 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x9e>
      // We alternate between two file handles as we go down
      // the path.
      if (p_parent == &parentDir) {
        p_parent = &subfile2;
    13a0:	8e 01       	movw	r16, r28
    13a2:	0f 5f       	subi	r16, 0xFF	; 255
    13a4:	1f 4f       	sbci	r17, 0xFF	; 255
    13a6:	ec cf       	rjmp	.-40     	; 0x1380 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xc8>
  if (p_parent != &parentDir) {
    (*p_parent).close(); // TODO: Return/ handle different?
  }

  return true;
}
    13a8:	c7 5b       	subi	r28, 0xB7	; 183
    13aa:	df 4f       	sbci	r29, 0xFF	; 255
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	cd bf       	out	0x3d, r28	; 61
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
    13ba:	1f 91       	pop	r17
    13bc:	0f 91       	pop	r16
    13be:	ff 90       	pop	r15
    13c0:	ef 90       	pop	r14
    13c2:	df 90       	pop	r13
    13c4:	cf 90       	pop	r12
    13c6:	bf 90       	pop	r11
    13c8:	af 90       	pop	r10
    13ca:	9f 90       	pop	r9
    13cc:	8f 90       	pop	r8
    13ce:	7f 90       	pop	r7
    13d0:	6f 90       	pop	r6
    13d2:	5f 90       	pop	r5
    13d4:	4f 90       	pop	r4
    13d6:	08 95       	ret

000013d8 <_ZN5SDLib7SDClass5beginEh>:

/* Implementation of class used to create `SDCard` object. */



boolean SDClass::begin(uint8_t csPin) {
    13d8:	0f 93       	push	r16
    13da:	1f 93       	push	r17
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	ec 01       	movw	r28, r24
    13e2:	46 2f       	mov	r20, r22
    Performs the initialisation required by the sdfatlib library.

    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
    13e4:	61 e0       	ldi	r22, 0x01	; 1
    13e6:	0e 94 c6 0c 	call	0x198c	; 0x198c <_ZN7Sd2Card4initEhh>
         volume.init(card) &&
    13ea:	88 23       	and	r24, r24
    13ec:	91 f0       	breq	.+36     	; 0x1412 <_ZN5SDLib7SDClass5beginEh+0x3a>
    13ee:	8e 01       	movw	r16, r28
    13f0:	04 5f       	subi	r16, 0xF4	; 244
    13f2:	1f 4f       	sbci	r17, 0xFF	; 255
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    13f4:	41 e0       	ldi	r20, 0x01	; 1
    13f6:	be 01       	movw	r22, r28
    13f8:	c8 01       	movw	r24, r16
    13fa:	0e 94 9c 19 	call	0x3338	; 0x3338 <_ZN8SdVolume4initEP7Sd2Cardh>
    13fe:	88 23       	and	r24, r24
    1400:	51 f0       	breq	.+20     	; 0x1416 <_ZN5SDLib7SDClass5beginEh+0x3e>
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    1402:	b8 01       	movw	r22, r16
    1404:	ce 01       	movw	r24, r28
    1406:	8a 96       	adiw	r24, 0x2a	; 42
    1408:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <_ZN6SdFile8openRootEP8SdVolume>
    140c:	91 e0       	ldi	r25, 0x01	; 1
    140e:	81 11       	cpse	r24, r1
    1410:	0a c0       	rjmp	.+20     	; 0x1426 <_ZN5SDLib7SDClass5beginEh+0x4e>
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	08 c0       	rjmp	.+16     	; 0x1426 <_ZN5SDLib7SDClass5beginEh+0x4e>
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    1416:	40 e0       	ldi	r20, 0x00	; 0
    1418:	be 01       	movw	r22, r28
    141a:	c8 01       	movw	r24, r16
    141c:	0e 94 9c 19 	call	0x3338	; 0x3338 <_ZN8SdVolume4initEP7Sd2Cardh>
    Performs the initialisation required by the sdfatlib library.

    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
    1420:	88 23       	and	r24, r24
    1422:	b9 f3       	breq	.-18     	; 0x1412 <_ZN5SDLib7SDClass5beginEh+0x3a>
    1424:	ee cf       	rjmp	.-36     	; 0x1402 <_ZN5SDLib7SDClass5beginEh+0x2a>
         volume.init(card) &&
         root.openRoot(volume);
}
    1426:	89 2f       	mov	r24, r25
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	1f 91       	pop	r17
    142e:	0f 91       	pop	r16
    1430:	08 95       	ret

00001432 <_ZN6SdFileC1ERKS_>:
//------------------------------------------------------------------------------
/**
 * \class SdFile
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
    1432:	fc 01       	movw	r30, r24
    1434:	db 01       	movw	r26, r22
#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
    1436:	12 96       	adiw	r26, 0x02	; 2
    1438:	8d 91       	ld	r24, X+
    143a:	9c 91       	ld	r25, X
    143c:	13 97       	sbiw	r26, 0x03	; 3
    143e:	93 83       	std	Z+3, r25	; 0x03
    1440:	82 83       	std	Z+2, r24	; 0x02
    1442:	8d ec       	ldi	r24, 0xCD	; 205
    1444:	91 e0       	ldi	r25, 0x01	; 1
    1446:	91 83       	std	Z+1, r25	; 0x01
    1448:	80 83       	st	Z, r24
    144a:	14 96       	adiw	r26, 0x04	; 4
    144c:	8c 91       	ld	r24, X
    144e:	14 97       	sbiw	r26, 0x04	; 4
    1450:	84 83       	std	Z+4, r24	; 0x04
    1452:	15 96       	adiw	r26, 0x05	; 5
    1454:	8c 91       	ld	r24, X
    1456:	15 97       	sbiw	r26, 0x05	; 5
    1458:	85 83       	std	Z+5, r24	; 0x05
    145a:	16 96       	adiw	r26, 0x06	; 6
    145c:	4d 91       	ld	r20, X+
    145e:	5d 91       	ld	r21, X+
    1460:	6d 91       	ld	r22, X+
    1462:	7c 91       	ld	r23, X
    1464:	19 97       	sbiw	r26, 0x09	; 9
    1466:	46 83       	std	Z+6, r20	; 0x06
    1468:	57 83       	std	Z+7, r21	; 0x07
    146a:	60 87       	std	Z+8, r22	; 0x08
    146c:	71 87       	std	Z+9, r23	; 0x09
    146e:	1a 96       	adiw	r26, 0x0a	; 10
    1470:	4d 91       	ld	r20, X+
    1472:	5d 91       	ld	r21, X+
    1474:	6d 91       	ld	r22, X+
    1476:	7c 91       	ld	r23, X
    1478:	1d 97       	sbiw	r26, 0x0d	; 13
    147a:	42 87       	std	Z+10, r20	; 0x0a
    147c:	53 87       	std	Z+11, r21	; 0x0b
    147e:	64 87       	std	Z+12, r22	; 0x0c
    1480:	75 87       	std	Z+13, r23	; 0x0d
    1482:	1e 96       	adiw	r26, 0x0e	; 14
    1484:	4d 91       	ld	r20, X+
    1486:	5d 91       	ld	r21, X+
    1488:	6d 91       	ld	r22, X+
    148a:	7c 91       	ld	r23, X
    148c:	51 97       	sbiw	r26, 0x11	; 17
    148e:	46 87       	std	Z+14, r20	; 0x0e
    1490:	57 87       	std	Z+15, r21	; 0x0f
    1492:	60 8b       	std	Z+16, r22	; 0x10
    1494:	71 8b       	std	Z+17, r23	; 0x11
    1496:	52 96       	adiw	r26, 0x12	; 18
    1498:	8c 91       	ld	r24, X
    149a:	52 97       	sbiw	r26, 0x12	; 18
    149c:	82 8b       	std	Z+18, r24	; 0x12
    149e:	53 96       	adiw	r26, 0x13	; 19
    14a0:	4d 91       	ld	r20, X+
    14a2:	5d 91       	ld	r21, X+
    14a4:	6d 91       	ld	r22, X+
    14a6:	7c 91       	ld	r23, X
    14a8:	56 97       	sbiw	r26, 0x16	; 22
    14aa:	43 8b       	std	Z+19, r20	; 0x13
    14ac:	54 8b       	std	Z+20, r21	; 0x14
    14ae:	65 8b       	std	Z+21, r22	; 0x15
    14b0:	76 8b       	std	Z+22, r23	; 0x16
    14b2:	57 96       	adiw	r26, 0x17	; 23
    14b4:	4d 91       	ld	r20, X+
    14b6:	5d 91       	ld	r21, X+
    14b8:	6d 91       	ld	r22, X+
    14ba:	7c 91       	ld	r23, X
    14bc:	5a 97       	sbiw	r26, 0x1a	; 26
    14be:	47 8b       	std	Z+23, r20	; 0x17
    14c0:	50 8f       	std	Z+24, r21	; 0x18
    14c2:	61 8f       	std	Z+25, r22	; 0x19
    14c4:	72 8f       	std	Z+26, r23	; 0x1a
    14c6:	5b 96       	adiw	r26, 0x1b	; 27
    14c8:	8d 91       	ld	r24, X+
    14ca:	9c 91       	ld	r25, X
    14cc:	5c 97       	sbiw	r26, 0x1c	; 28
    14ce:	94 8f       	std	Z+28, r25	; 0x1c
    14d0:	83 8f       	std	Z+27, r24	; 0x1b
    14d2:	08 95       	ret

000014d4 <_ZN5SDLib7SDClass12getParentDirEPKcPi>:



// this little helper is used to traverse paths
SdFile SDClass::getParentDir(const char *filepath, int *index) {
    14d4:	4f 92       	push	r4
    14d6:	5f 92       	push	r5
    14d8:	6f 92       	push	r6
    14da:	7f 92       	push	r7
    14dc:	8f 92       	push	r8
    14de:	9f 92       	push	r9
    14e0:	af 92       	push	r10
    14e2:	bf 92       	push	r11
    14e4:	cf 92       	push	r12
    14e6:	df 92       	push	r13
    14e8:	ef 92       	push	r14
    14ea:	ff 92       	push	r15
    14ec:	0f 93       	push	r16
    14ee:	1f 93       	push	r17
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	c7 54       	subi	r28, 0x47	; 71
    14fa:	d1 09       	sbc	r29, r1
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	6c 01       	movw	r12, r24
    1508:	5a 01       	movw	r10, r20
    150a:	49 01       	movw	r8, r18
  // get parent directory
  SdFile d1 = root; // start with the mostparent, root!
    150c:	66 5d       	subi	r22, 0xD6	; 214
    150e:	7f 4f       	sbci	r23, 0xFF	; 255
    1510:	7e 01       	movw	r14, r28
    1512:	8e e1       	ldi	r24, 0x1E	; 30
    1514:	e8 0e       	add	r14, r24
    1516:	f1 1c       	adc	r15, r1
    1518:	c7 01       	movw	r24, r14
    151a:	0e 94 19 0a 	call	0x1432	; 0x1432 <_ZN6SdFileC1ERKS_>
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    151e:	1c 82       	std	Y+4, r1	; 0x04
    1520:	1b 82       	std	Y+3, r1	; 0x03
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    1522:	8d ec       	ldi	r24, 0xCD	; 205
    1524:	91 e0       	ldi	r25, 0x01	; 1
    1526:	9a 83       	std	Y+2, r25	; 0x02
    1528:	89 83       	std	Y+1, r24	; 0x01
    152a:	1e 82       	std	Y+6, r1	; 0x06
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    152c:	85 01       	movw	r16, r10
  SdFile d1 = root; // start with the mostparent, root!
  SdFile d2;

  // we'll use the pointers to swap between the two objects
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
    152e:	fe 01       	movw	r30, r28
    1530:	31 96       	adiw	r30, 0x01	; 1
    1532:	3f 01       	movw	r6, r30
  // get parent directory
  SdFile d1 = root; // start with the mostparent, root!
  SdFile d2;

  // we'll use the pointers to swap between the two objects
  SdFile *parent = &d1;
    1534:	27 01       	movw	r4, r14
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    1536:	6f e2       	ldi	r22, 0x2F	; 47
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	c8 01       	movw	r24, r16
    153c:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <strchr>
    1540:	00 97       	sbiw	r24, 0x00	; 0
    1542:	d9 f1       	breq	.+118    	; 0x15ba <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xe6>

    // get rid of leading /'s
    if (filepath[0] == '/') {
    1544:	f8 01       	movw	r30, r16
    1546:	20 81       	ld	r18, Z
    1548:	2f 32       	cpi	r18, 0x2F	; 47
    154a:	19 f4       	brne	.+6      	; 0x1552 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x7e>
      filepath++;
    154c:	0f 5f       	subi	r16, 0xFF	; 255
    154e:	1f 4f       	sbci	r17, 0xFF	; 255
    1550:	f2 cf       	rjmp	.-28     	; 0x1536 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x62>
    1552:	80 1b       	sub	r24, r16
    1554:	8d 30       	cpi	r24, 0x0D	; 13
    1556:	08 f0       	brcs	.+2      	; 0x155a <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x86>
    1558:	8c e0       	ldi	r24, 0x0C	; 12
    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    155a:	e8 2e       	mov	r14, r24
    155c:	f1 2c       	mov	r15, r1
    155e:	a7 01       	movw	r20, r14
    1560:	b8 01       	movw	r22, r16
    1562:	ce 01       	movw	r24, r28
    1564:	cb 96       	adiw	r24, 0x3b	; 59
    1566:	0e 94 98 25 	call	0x4b30	; 0x4b30 <strncpy>
    subdirname[idx] = 0;
    156a:	eb e3       	ldi	r30, 0x3B	; 59
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	ec 0f       	add	r30, r28
    1570:	fd 1f       	adc	r31, r29
    1572:	ee 0d       	add	r30, r14
    1574:	ff 1d       	adc	r31, r15
    1576:	10 82       	st	Z, r1

    // close the subdir (we reuse them) if open
    subdir->close();
    1578:	c3 01       	movw	r24, r6
    157a:	0e 94 36 12 	call	0x246c	; 0x246c <_ZN6SdFile5closeEv>
    if (! subdir->open(parent, subdirname, O_READ)) {
    157e:	21 e0       	ldi	r18, 0x01	; 1
    1580:	ae 01       	movw	r20, r28
    1582:	45 5c       	subi	r20, 0xC5	; 197
    1584:	5f 4f       	sbci	r21, 0xFF	; 255
    1586:	b2 01       	movw	r22, r4
    1588:	c3 01       	movw	r24, r6
    158a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <_ZN6SdFile4openEPS_PKch>
    158e:	81 11       	cpse	r24, r1
    1590:	09 c0       	rjmp	.+18     	; 0x15a4 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xd0>
    1592:	f6 01       	movw	r30, r12
    1594:	13 82       	std	Z+3, r1	; 0x03
    1596:	12 82       	std	Z+2, r1	; 0x02
    1598:	8d ec       	ldi	r24, 0xCD	; 205
    159a:	91 e0       	ldi	r25, 0x01	; 1
    159c:	91 83       	std	Z+1, r25	; 0x01
    159e:	80 83       	st	Z, r24
    15a0:	15 82       	std	Z+5, r1	; 0x05
    15a2:	14 c0       	rjmp	.+40     	; 0x15cc <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xf8>
      // failed to open one of the subdirectories
      return SdFile();
    }
    // move forward to the next subdirectory
    filepath += idx;
    15a4:	0e 0d       	add	r16, r14
    15a6:	1f 1d       	adc	r17, r15

    // we reuse the objects, close it.
    parent->close();
    15a8:	c2 01       	movw	r24, r4
    15aa:	0e 94 36 12 	call	0x246c	; 0x246c <_ZN6SdFile5closeEv>
    15ae:	94 2d       	mov	r25, r4
    15b0:	85 2d       	mov	r24, r5

    // swap the pointers
    SdFile *t = parent;
    parent = subdir;
    15b2:	23 01       	movw	r4, r6
    15b4:	69 2e       	mov	r6, r25
    15b6:	78 2e       	mov	r7, r24
    15b8:	be cf       	rjmp	.-132    	; 0x1536 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x62>
    subdir = t;
  }

  *index = (int)(filepath - origpath);
    15ba:	0a 19       	sub	r16, r10
    15bc:	1b 09       	sbc	r17, r11
    15be:	f4 01       	movw	r30, r8
    15c0:	11 83       	std	Z+1, r17	; 0x01
    15c2:	00 83       	st	Z, r16
  // parent is now the parent diretory of the file!
  return *parent;
    15c4:	b2 01       	movw	r22, r4
    15c6:	c6 01       	movw	r24, r12
    15c8:	0e 94 19 0a 	call	0x1432	; 0x1432 <_ZN6SdFileC1ERKS_>
}
    15cc:	c6 01       	movw	r24, r12
    15ce:	c9 5b       	subi	r28, 0xB9	; 185
    15d0:	df 4f       	sbci	r29, 0xFF	; 255
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	f8 94       	cli
    15d6:	de bf       	out	0x3e, r29	; 62
    15d8:	0f be       	out	0x3f, r0	; 63
    15da:	cd bf       	out	0x3d, r28	; 61
    15dc:	df 91       	pop	r29
    15de:	cf 91       	pop	r28
    15e0:	1f 91       	pop	r17
    15e2:	0f 91       	pop	r16
    15e4:	ff 90       	pop	r15
    15e6:	ef 90       	pop	r14
    15e8:	df 90       	pop	r13
    15ea:	cf 90       	pop	r12
    15ec:	bf 90       	pop	r11
    15ee:	af 90       	pop	r10
    15f0:	9f 90       	pop	r9
    15f2:	8f 90       	pop	r8
    15f4:	7f 90       	pop	r7
    15f6:	6f 90       	pop	r6
    15f8:	5f 90       	pop	r5
    15fa:	4f 90       	pop	r4
    15fc:	08 95       	ret

000015fe <_ZN5SDLib7SDClass4openEPKch>:


File SDClass::open(const char *filepath, uint8_t mode) {
    15fe:	af 92       	push	r10
    1600:	bf 92       	push	r11
    1602:	cf 92       	push	r12
    1604:	df 92       	push	r13
    1606:	ff 92       	push	r15
    1608:	0f 93       	push	r16
    160a:	1f 93       	push	r17
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	c9 55       	subi	r28, 0x59	; 89
    1616:	d1 09       	sbc	r29, r1
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	f8 94       	cli
    161c:	de bf       	out	0x3e, r29	; 62
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	cd bf       	out	0x3d, r28	; 61
    1622:	6c 01       	movw	r12, r24
    1624:	5b 01       	movw	r10, r22
    1626:	8a 01       	movw	r16, r20
    1628:	f2 2e       	mov	r15, r18
   */

  int pathidx;

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
    162a:	9e 01       	movw	r18, r28
    162c:	28 5a       	subi	r18, 0xA8	; 168
    162e:	3f 4f       	sbci	r19, 0xFF	; 255
    1630:	ce 01       	movw	r24, r28
    1632:	cb 96       	adiw	r24, 0x3b	; 59
    1634:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <_ZN5SDLib7SDClass12getParentDirEPKcPi>
  // no more subdirs!

  filepath += pathidx;
    1638:	6a 96       	adiw	r28, 0x1a	; 26
    163a:	8e ad       	ldd	r24, Y+62	; 0x3e
    163c:	9f ad       	ldd	r25, Y+63	; 0x3f
    163e:	6a 97       	sbiw	r28, 0x1a	; 26
    1640:	08 0f       	add	r16, r24
    1642:	19 1f       	adc	r17, r25

  if (! filepath[0]) {
    1644:	f8 01       	movw	r30, r16
    1646:	80 81       	ld	r24, Z
    1648:	81 11       	cpse	r24, r1
    164a:	0a c0       	rjmp	.+20     	; 0x1660 <_ZN5SDLib7SDClass4openEPKch+0x62>
    // it was the directory itself!
    return File(parentdir, "/");
    164c:	be 01       	movw	r22, r28
    164e:	65 5c       	subi	r22, 0xC5	; 197
    1650:	7f 4f       	sbci	r23, 0xFF	; 255
    1652:	ce 01       	movw	r24, r28
    1654:	01 96       	adiw	r24, 0x01	; 1
    1656:	0e 94 19 0a 	call	0x1432	; 0x1432 <_ZN6SdFileC1ERKS_>
    165a:	47 ec       	ldi	r20, 0xC7	; 199
    165c:	51 e0       	ldi	r21, 0x01	; 1
    165e:	41 c0       	rjmp	.+130    	; 0x16e2 <_ZN5SDLib7SDClass4openEPKch+0xe4>
    1660:	19 a2       	std	Y+33, r1	; 0x21
    1662:	18 a2       	std	Y+32, r1	; 0x20
    1664:	8d ec       	ldi	r24, 0xCD	; 205
    1666:	91 e0       	ldi	r25, 0x01	; 1
    1668:	9f 8f       	std	Y+31, r25	; 0x1f
    166a:	8e 8f       	std	Y+30, r24	; 0x1e
    166c:	1b a2       	std	Y+35, r1	; 0x23
    166e:	21 96       	adiw	r28, 0x01	; 1
    1670:	8f ad       	ldd	r24, Y+63	; 0x3f
    1672:	21 97       	sbiw	r28, 0x01	; 1

  // Open the file itself
  SdFile file;

  // failed to open a subdir!
  if (!parentdir.isOpen())
    1674:	81 11       	cpse	r24, r1
    1676:	04 c0       	rjmp	.+8      	; 0x1680 <_ZN5SDLib7SDClass4openEPKch+0x82>
    return File();
    1678:	c6 01       	movw	r24, r12
    167a:	0e 94 6e 08 	call	0x10dc	; 0x10dc <_ZN5SDLib4FileC1Ev>
    167e:	37 c0       	rjmp	.+110    	; 0x16ee <_ZN5SDLib7SDClass4openEPKch+0xf0>
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
  /** \return True if this is a SdFile for a subdirectory else false. */
  uint8_t isSubDir(void) const {return type_ == FAT_FILE_TYPE_SUBDIR;}
  /** \return True if this is a SdFile for the root directory. */
  uint8_t isRoot(void) const {
    return type_ == FAT_FILE_TYPE_ROOT16 || type_ == FAT_FILE_TYPE_ROOT32;
    1680:	82 50       	subi	r24, 0x02	; 2

  // there is a special case for the Root directory since its a static dir
  if (parentdir.isRoot()) {
    1682:	82 30       	cpi	r24, 0x02	; 2
    1684:	60 f4       	brcc	.+24     	; 0x169e <_ZN5SDLib7SDClass4openEPKch+0xa0>
    if ( ! file.open(root, filepath, mode)) {
    1686:	b5 01       	movw	r22, r10
    1688:	66 5d       	subi	r22, 0xD6	; 214
    168a:	7f 4f       	sbci	r23, 0xFF	; 255
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    168c:	2f 2d       	mov	r18, r15
    168e:	a8 01       	movw	r20, r16
    1690:	ce 01       	movw	r24, r28
    1692:	4e 96       	adiw	r24, 0x1e	; 30
    1694:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <_ZN6SdFile4openEPS_PKch>
    1698:	81 11       	cpse	r24, r1
    169a:	10 c0       	rjmp	.+32     	; 0x16bc <_ZN5SDLib7SDClass4openEPKch+0xbe>
    169c:	ed cf       	rjmp	.-38     	; 0x1678 <_ZN5SDLib7SDClass4openEPKch+0x7a>
    169e:	2f 2d       	mov	r18, r15
    16a0:	a8 01       	movw	r20, r16
    16a2:	be 01       	movw	r22, r28
    16a4:	65 5c       	subi	r22, 0xC5	; 197
    16a6:	7f 4f       	sbci	r23, 0xFF	; 255
    16a8:	ce 01       	movw	r24, r28
    16aa:	4e 96       	adiw	r24, 0x1e	; 30
    16ac:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <_ZN6SdFile4openEPS_PKch>
      // failed to open the file :(
      return File();
    }
    // dont close the root!
  } else {
    if ( ! file.open(parentdir, filepath, mode)) {
    16b0:	88 23       	and	r24, r24
    16b2:	11 f3       	breq	.-60     	; 0x1678 <_ZN5SDLib7SDClass4openEPKch+0x7a>
      return File();
    }
    // close the parent
    parentdir.close();
    16b4:	ce 01       	movw	r24, r28
    16b6:	cb 96       	adiw	r24, 0x3b	; 59
    16b8:	0e 94 36 12 	call	0x246c	; 0x246c <_ZN6SdFile5closeEv>
  }

  if (mode & (O_APPEND | O_WRITE)) 
    16bc:	9f 2d       	mov	r25, r15
    16be:	96 70       	andi	r25, 0x06	; 6
    16c0:	41 f0       	breq	.+16     	; 0x16d2 <_ZN5SDLib7SDClass4openEPKch+0xd4>
    file.seekSet(file.fileSize());
    16c2:	49 a9       	ldd	r20, Y+49	; 0x31
    16c4:	5a a9       	ldd	r21, Y+50	; 0x32
    16c6:	6b a9       	ldd	r22, Y+51	; 0x33
    16c8:	7c a9       	ldd	r23, Y+52	; 0x34
    16ca:	ce 01       	movw	r24, r28
    16cc:	4e 96       	adiw	r24, 0x1e	; 30
    16ce:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_ZN6SdFile7seekSetEm>
  return File(file, filepath);
    16d2:	be 01       	movw	r22, r28
    16d4:	62 5e       	subi	r22, 0xE2	; 226
    16d6:	7f 4f       	sbci	r23, 0xFF	; 255
    16d8:	ce 01       	movw	r24, r28
    16da:	01 96       	adiw	r24, 0x01	; 1
    16dc:	0e 94 19 0a 	call	0x1432	; 0x1432 <_ZN6SdFileC1ERKS_>
    16e0:	a8 01       	movw	r20, r16
    16e2:	be 01       	movw	r22, r28
    16e4:	6f 5f       	subi	r22, 0xFF	; 255
    16e6:	7f 4f       	sbci	r23, 0xFF	; 255
    16e8:	c6 01       	movw	r24, r12
    16ea:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN5SDLib4FileC1E6SdFilePKc>
}
    16ee:	c6 01       	movw	r24, r12
    16f0:	c7 5a       	subi	r28, 0xA7	; 167
    16f2:	df 4f       	sbci	r29, 0xFF	; 255
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	de bf       	out	0x3e, r29	; 62
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	cd bf       	out	0x3d, r28	; 61
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	1f 91       	pop	r17
    1704:	0f 91       	pop	r16
    1706:	ff 90       	pop	r15
    1708:	df 90       	pop	r13
    170a:	cf 90       	pop	r12
    170c:	bf 90       	pop	r11
    170e:	af 90       	pop	r10
    1710:	08 95       	ret

00001712 <_ZN5SDLib7SDClass6existsEPKc>:
//   */
//  file.close();
//}


boolean SDClass::exists(const char *filepath) {
    1712:	fb 01       	movw	r30, r22
  /*

     Returns true if the supplied file path exists.

   */
  return walkPath(filepath, root, callback_pathExists);
    1714:	bc 01       	movw	r22, r24
    1716:	66 5d       	subi	r22, 0xD6	; 214
    1718:	7f 4f       	sbci	r23, 0xFF	; 255
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	4f ee       	ldi	r20, 0xEF	; 239
    1720:	58 e0       	ldi	r21, 0x08	; 8
    1722:	cf 01       	movw	r24, r30
    1724:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_>

00001728 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    1728:	e3 e3       	ldi	r30, 0x33	; 51
    172a:	f3 e0       	ldi	r31, 0x03	; 3
    172c:	15 82       	std	Z+5, r1	; 0x05
    172e:	16 82       	std	Z+6, r1	; 0x06
    1730:	11 86       	std	Z+9, r1	; 0x09
    1732:	13 86       	std	Z+11, r1	; 0x0b
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    1734:	82 e0       	ldi	r24, 0x02	; 2
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	a0 e0       	ldi	r26, 0x00	; 0
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	84 87       	std	Z+12, r24	; 0x0c
    173e:	95 87       	std	Z+13, r25	; 0x0d
    1740:	a6 87       	std	Z+14, r26	; 0x0e
    1742:	b7 87       	std	Z+15, r27	; 0x0f
    1744:	13 a2       	std	Z+35, r1	; 0x23
    1746:	15 a6       	std	Z+45, r1	; 0x2d
    1748:	14 a6       	std	Z+44, r1	; 0x2c
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    174a:	8d ec       	ldi	r24, 0xCD	; 205
    174c:	91 e0       	ldi	r25, 0x01	; 1
    174e:	93 a7       	std	Z+43, r25	; 0x2b
    1750:	82 a7       	std	Z+42, r24	; 0x2a
    1752:	17 a6       	std	Z+47, r1	; 0x2f
    1754:	08 95       	ret

00001756 <_ZN8SPIClass16beginTransactionE11SPISettings>:

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
    1756:	20 91 8a 05 	lds	r18, 0x058A
    175a:	22 23       	and	r18, r18
    175c:	99 f0       	breq	.+38     	; 0x1784 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
      uint8_t sreg = SREG;
    175e:	4f b7       	in	r20, 0x3f	; 63
      noInterrupts();
    1760:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    1762:	20 91 8a 05 	lds	r18, 0x058A
    1766:	21 30       	cpi	r18, 0x01	; 1
    1768:	59 f4       	brne	.+22     	; 0x1780 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
        interruptSave = SPI_AVR_EIMSK;
    176a:	2d b3       	in	r18, 0x1d	; 29
    176c:	20 93 88 05 	sts	0x0588, r18
        SPI_AVR_EIMSK &= ~interruptMask;
    1770:	3d b3       	in	r19, 0x1d	; 29
    1772:	20 91 89 05 	lds	r18, 0x0589
    1776:	20 95       	com	r18
    1778:	23 23       	and	r18, r19
    177a:	2d bb       	out	0x1d, r18	; 29
        SREG = sreg;
    177c:	4f bf       	out	0x3f, r20	; 63
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
      } else
      #endif
      {
        interruptSave = sreg;
    1780:	40 93 88 05 	sts	0x0588, r20
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    1784:	8c bd       	out	0x2c, r24	; 44
    SPSR = settings.spsr;
    1786:	9d bd       	out	0x2d, r25	; 45
    1788:	08 95       	ret

0000178a <_ZN8SPIClass8transferEh>:
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    178a:	8e bd       	out	0x2e, r24	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    178c:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    178e:	0d b4       	in	r0, 0x2d	; 45
    1790:	07 fe       	sbrs	r0, 7
    1792:	fd cf       	rjmp	.-6      	; 0x178e <_ZN8SPIClass8transferEh+0x4>
    return SPDR;
    1794:	8e b5       	in	r24, 0x2e	; 46
  }
    1796:	08 95       	ret

00001798 <_ZL6spiRecv>:
static  uint8_t spiRec(void) {
#ifndef USE_SPI_LIB
  spiSend(0XFF);
  return SPDR;
#else
  return SPI.transfer(0xFF);
    1798:	8f ef       	ldi	r24, 0xFF	; 255
    179a:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <_ZN8SPIClass8transferEh>

0000179e <_ZN8SPIClass14endTransactionEv>:
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
    179e:	80 91 8a 05 	lds	r24, 0x058A
    17a2:	88 23       	and	r24, r24
    17a4:	61 f0       	breq	.+24     	; 0x17be <_ZN8SPIClass14endTransactionEv+0x20>
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
    17a6:	9f b7       	in	r25, 0x3f	; 63
      #endif
      noInterrupts();
    17a8:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    17aa:	20 91 8a 05 	lds	r18, 0x058A
    17ae:	80 91 88 05 	lds	r24, 0x0588
    17b2:	21 30       	cpi	r18, 0x01	; 1
    17b4:	19 f4       	brne	.+6      	; 0x17bc <_ZN8SPIClass14endTransactionEv+0x1e>
        SPI_AVR_EIMSK = interruptSave;
    17b6:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
    17b8:	9f bf       	out	0x3f, r25	; 63
    17ba:	08 95       	ret
      } else
      #endif
      {
        SREG = interruptSave;
    17bc:	8f bf       	out	0x3f, r24	; 63
    17be:	08 95       	ret

000017c0 <_ZN7Sd2Card14chipSelectHighEv>:
}
//------------------------------------------------------------------------------
static uint8_t chip_select_asserted = 0;

void Sd2Card::chipSelectHigh(void) {
  digitalWrite(chipSelectPin_, HIGH);
    17c0:	61 e0       	ldi	r22, 0x01	; 1
    17c2:	fc 01       	movw	r30, r24
    17c4:	84 81       	ldd	r24, Z+4	; 0x04
    17c6:	0e 94 b2 23 	call	0x4764	; 0x4764 <digitalWrite>
#ifdef USE_SPI_LIB
  if (chip_select_asserted) {
    17ca:	80 91 7c 03 	lds	r24, 0x037C
    17ce:	88 23       	and	r24, r24
    17d0:	21 f0       	breq	.+8      	; 0x17da <_ZN7Sd2Card14chipSelectHighEv+0x1a>
    chip_select_asserted = 0;
    17d2:	10 92 7c 03 	sts	0x037C, r1
    SPI.endTransaction();
    17d6:	0c 94 cf 0b 	jmp	0x179e	; 0x179e <_ZN8SPIClass14endTransactionEv>
    17da:	08 95       	ret

000017dc <_ZN7Sd2Card13chipSelectLowEv>:
  }
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
    17dc:	cf 93       	push	r28
    17de:	df 93       	push	r29
    17e0:	ec 01       	movw	r28, r24
#ifdef USE_SPI_LIB
  if (!chip_select_asserted) {
    17e2:	80 91 7c 03 	lds	r24, 0x037C
    17e6:	81 11       	cpse	r24, r1
    17e8:	09 c0       	rjmp	.+18     	; 0x17fc <_ZN7Sd2Card13chipSelectLowEv+0x20>
    chip_select_asserted = 1;
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	80 93 7c 03 	sts	0x037C, r24
    SPI.beginTransaction(settings);
    17f0:	80 91 7d 03 	lds	r24, 0x037D
    17f4:	90 91 7e 03 	lds	r25, 0x037E
    17f8:	0e 94 ab 0b 	call	0x1756	; 0x1756 <_ZN8SPIClass16beginTransactionE11SPISettings>
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    17fc:	60 e0       	ldi	r22, 0x00	; 0
    17fe:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1800:	df 91       	pop	r29
    1802:	cf 91       	pop	r28
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    1804:	0c 94 b2 23 	jmp	0x4764	; 0x4764 <digitalWrite>

00001808 <_ZN7Sd2Card7readEndEv>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
/** Skip remaining data in a block when in partial block read mode. */
void Sd2Card::readEnd(void) {
    1808:	cf 93       	push	r28
    180a:	df 93       	push	r29
    180c:	ec 01       	movw	r28, r24
  if (inBlock_) {
    180e:	8e 81       	ldd	r24, Y+6	; 0x06
    1810:	88 23       	and	r24, r24
    1812:	89 f0       	breq	.+34     	; 0x1836 <_ZN7Sd2Card7readEndEv+0x2e>
    }
    // wait for last crc byte
    while (!(SPSR & (1 << SPIF)))
      ;
#else  // OPTIMIZE_HARDWARE_SPI
    while (offset_++ < 514) spiRec();
    1814:	8f 81       	ldd	r24, Y+7	; 0x07
    1816:	98 85       	ldd	r25, Y+8	; 0x08
    1818:	9c 01       	movw	r18, r24
    181a:	2f 5f       	subi	r18, 0xFF	; 255
    181c:	3f 4f       	sbci	r19, 0xFF	; 255
    181e:	38 87       	std	Y+8, r19	; 0x08
    1820:	2f 83       	std	Y+7, r18	; 0x07
    1822:	82 30       	cpi	r24, 0x02	; 2
    1824:	92 40       	sbci	r25, 0x02	; 2
    1826:	18 f4       	brcc	.+6      	; 0x182e <_ZN7Sd2Card7readEndEv+0x26>
    1828:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZL6spiRecv>
    182c:	f3 cf       	rjmp	.-26     	; 0x1814 <_ZN7Sd2Card7readEndEv+0xc>
#endif  // OPTIMIZE_HARDWARE_SPI
    chipSelectHigh();
    182e:	ce 01       	movw	r24, r28
    1830:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <_ZN7Sd2Card14chipSelectHighEv>
    inBlock_ = 0;
    1834:	1e 82       	std	Y+6, r1	; 0x06
  }
}
    1836:	df 91       	pop	r29
    1838:	cf 91       	pop	r28
    183a:	08 95       	ret

0000183c <_ZN7Sd2Card10setSckRateEh>:
 *
 * \return The value one, true, is returned for success and the value zero,
 * false, is returned for an invalid value of \a sckRateID.
 */
uint8_t Sd2Card::setSckRate(uint8_t sckRateID) {
  if (sckRateID > 6) {
    183c:	67 30       	cpi	r22, 0x07	; 7
    183e:	28 f0       	brcs	.+10     	; 0x184a <_ZN7Sd2Card10setSckRateEh+0xe>
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    1840:	26 e1       	ldi	r18, 0x16	; 22
    1842:	fc 01       	movw	r30, r24
    1844:	25 83       	std	Z+5, r18	; 0x05
    error(SD_CARD_ERROR_SCK_RATE);
    return false;
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	08 95       	ret
  }
  SPCR &= ~((1 <<SPR1) | (1 << SPR0));
  SPCR |= (sckRateID & 4 ? (1 << SPR1) : 0)
    | (sckRateID & 2 ? (1 << SPR0) : 0);
#else // USE_SPI_LIB
  switch (sckRateID) {
    184a:	62 30       	cpi	r22, 0x02	; 2
    184c:	81 f0       	breq	.+32     	; 0x186e <_ZN7Sd2Card10setSckRateEh+0x32>
    184e:	30 f4       	brcc	.+12     	; 0x185c <_ZN7Sd2Card10setSckRateEh+0x20>
    1850:	66 23       	and	r22, r22
    1852:	59 f0       	breq	.+22     	; 0x186a <_ZN7Sd2Card10setSckRateEh+0x2e>
    1854:	61 30       	cpi	r22, 0x01	; 1
    1856:	b1 f4       	brne	.+44     	; 0x1884 <_ZN7Sd2Card10setSckRateEh+0x48>
    case 0:  settings = SPISettings(25000000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    1858:	80 e5       	ldi	r24, 0x50	; 80
    185a:	15 c0       	rjmp	.+42     	; 0x1886 <_ZN7Sd2Card10setSckRateEh+0x4a>
  }
  SPCR &= ~((1 <<SPR1) | (1 << SPR0));
  SPCR |= (sckRateID & 4 ? (1 << SPR1) : 0)
    | (sckRateID & 2 ? (1 << SPR0) : 0);
#else // USE_SPI_LIB
  switch (sckRateID) {
    185c:	64 30       	cpi	r22, 0x04	; 4
    185e:	59 f0       	breq	.+22     	; 0x1876 <_ZN7Sd2Card10setSckRateEh+0x3a>
    1860:	40 f0       	brcs	.+16     	; 0x1872 <_ZN7Sd2Card10setSckRateEh+0x36>
    1862:	65 30       	cpi	r22, 0x05	; 5
    1864:	79 f4       	brne	.+30     	; 0x1884 <_ZN7Sd2Card10setSckRateEh+0x48>
    case 0:  settings = SPISettings(25000000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(1000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(500000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(250000, MSBFIRST, SPI_MODE0); break;
    1866:	82 e5       	ldi	r24, 0x52	; 82
    1868:	0e c0       	rjmp	.+28     	; 0x1886 <_ZN7Sd2Card10setSckRateEh+0x4a>
  SPCR &= ~((1 <<SPR1) | (1 << SPR0));
  SPCR |= (sckRateID & 4 ? (1 << SPR1) : 0)
    | (sckRateID & 2 ? (1 << SPR0) : 0);
#else // USE_SPI_LIB
  switch (sckRateID) {
    case 0:  settings = SPISettings(25000000, MSBFIRST, SPI_MODE0); break;
    186a:	80 e5       	ldi	r24, 0x50	; 80
    186c:	05 c0       	rjmp	.+10     	; 0x1878 <_ZN7Sd2Card10setSckRateEh+0x3c>
    case 1:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    186e:	81 e5       	ldi	r24, 0x51	; 81
    1870:	03 c0       	rjmp	.+6      	; 0x1878 <_ZN7Sd2Card10setSckRateEh+0x3c>
    case 3:  settings = SPISettings(1000000, MSBFIRST, SPI_MODE0); break;
    1872:	81 e5       	ldi	r24, 0x51	; 81
    1874:	08 c0       	rjmp	.+16     	; 0x1886 <_ZN7Sd2Card10setSckRateEh+0x4a>
    case 4:  settings = SPISettings(500000, MSBFIRST, SPI_MODE0); break;
    1876:	82 e5       	ldi	r24, 0x52	; 82
    1878:	80 93 7d 03 	sts	0x037D, r24
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	80 93 7e 03 	sts	0x037E, r24
    1882:	08 95       	ret
    case 5:  settings = SPISettings(250000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(125000, MSBFIRST, SPI_MODE0);
    1884:	83 e5       	ldi	r24, 0x53	; 83
    1886:	80 93 7d 03 	sts	0x037D, r24
    188a:	10 92 7e 03 	sts	0x037E, r1
    188e:	81 e0       	ldi	r24, 0x01	; 1
  }
#endif // USE_SPI_LIB
  return true;
}
    1890:	08 95       	ret

00001892 <_ZN7Sd2Card11waitNotBusyEj>:
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
    1892:	0f 93       	push	r16
    1894:	1f 93       	push	r17
    1896:	cf 93       	push	r28
    1898:	df 93       	push	r29
    189a:	eb 01       	movw	r28, r22
  uint16_t t0 = millis();
    189c:	0e 94 9a 22 	call	0x4534	; 0x4534 <millis>
    18a0:	8b 01       	movw	r16, r22
  do {
    if (spiRec() == 0XFF) return true;
    18a2:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZL6spiRecv>
    18a6:	8f 3f       	cpi	r24, 0xFF	; 255
    18a8:	49 f0       	breq	.+18     	; 0x18bc <_ZN7Sd2Card11waitNotBusyEj+0x2a>
  }
  while (((uint16_t)millis() - t0) < timeoutMillis);
    18aa:	0e 94 9a 22 	call	0x4534	; 0x4534 <millis>
    18ae:	60 1b       	sub	r22, r16
    18b0:	71 0b       	sbc	r23, r17
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  uint16_t t0 = millis();
  do {
    18b2:	6c 17       	cp	r22, r28
    18b4:	7d 07       	cpc	r23, r29
    18b6:	a8 f3       	brcs	.-22     	; 0x18a2 <_ZN7Sd2Card11waitNotBusyEj+0x10>
    if (spiRec() == 0XFF) return true;
  }
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	01 c0       	rjmp	.+2      	; 0x18be <_ZN7Sd2Card11waitNotBusyEj+0x2c>
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  uint16_t t0 = millis();
  do {
    if (spiRec() == 0XFF) return true;
    18bc:	81 e0       	ldi	r24, 0x01	; 1
  }
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
}
    18be:	df 91       	pop	r29
    18c0:	cf 91       	pop	r28
    18c2:	1f 91       	pop	r17
    18c4:	0f 91       	pop	r16
    18c6:	08 95       	ret

000018c8 <_ZN7Sd2Card11cardCommandEhm>:
  sei();
}
#endif  // SOFTWARE_SPI
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg) {
    18c8:	cf 92       	push	r12
    18ca:	df 92       	push	r13
    18cc:	ff 92       	push	r15
    18ce:	0f 93       	push	r16
    18d0:	1f 93       	push	r17
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
    18d6:	00 d0       	rcall	.+0      	; 0x18d8 <_ZN7Sd2Card11cardCommandEhm+0x10>
    18d8:	00 d0       	rcall	.+0      	; 0x18da <_ZN7Sd2Card11cardCommandEhm+0x12>
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
    18de:	6c 01       	movw	r12, r24
    18e0:	f6 2e       	mov	r15, r22
  // end read if in partialBlockRead mode
  readEnd();
    18e2:	29 83       	std	Y+1, r18	; 0x01
    18e4:	3a 83       	std	Y+2, r19	; 0x02
    18e6:	4b 83       	std	Y+3, r20	; 0x03
    18e8:	5c 83       	std	Y+4, r21	; 0x04
    18ea:	0e 94 04 0c 	call	0x1808	; 0x1808 <_ZN7Sd2Card7readEndEv>

  // select card
  chipSelectLow();
    18ee:	c6 01       	movw	r24, r12
    18f0:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <_ZN7Sd2Card13chipSelectLowEv>

  // wait up to 300 ms if busy
  waitNotBusy(300);
    18f4:	6c e2       	ldi	r22, 0x2C	; 44
    18f6:	71 e0       	ldi	r23, 0x01	; 1
    18f8:	c6 01       	movw	r24, r12
    18fa:	0e 94 49 0c 	call	0x1892	; 0x1892 <_ZN7Sd2Card11waitNotBusyEj>
#ifndef USE_SPI_LIB
  SPDR = b;
  while (!(SPSR & (1 << SPIF)))
    ;
#else
  SPI.transfer(b);
    18fe:	8f 2d       	mov	r24, r15
    1900:	80 64       	ori	r24, 0x40	; 64
    1902:	0e 94 c5 0b 	call	0x178a	; 0x178a <_ZN8SPIClass8transferEh>
    1906:	08 e1       	ldi	r16, 0x18	; 24
    1908:	10 e0       	ldi	r17, 0x00	; 0
    190a:	5c 81       	ldd	r21, Y+4	; 0x04
    190c:	4b 81       	ldd	r20, Y+3	; 0x03
    190e:	3a 81       	ldd	r19, Y+2	; 0x02
    1910:	29 81       	ldd	r18, Y+1	; 0x01

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    1912:	da 01       	movw	r26, r20
    1914:	c9 01       	movw	r24, r18
    1916:	00 2e       	mov	r0, r16
    1918:	04 c0       	rjmp	.+8      	; 0x1922 <_ZN7Sd2Card11cardCommandEhm+0x5a>
    191a:	b6 95       	lsr	r27
    191c:	a7 95       	ror	r26
    191e:	97 95       	ror	r25
    1920:	87 95       	ror	r24
    1922:	0a 94       	dec	r0
    1924:	d2 f7       	brpl	.-12     	; 0x191a <_ZN7Sd2Card11cardCommandEhm+0x52>
#ifndef USE_SPI_LIB
  SPDR = b;
  while (!(SPSR & (1 << SPIF)))
    ;
#else
  SPI.transfer(b);
    1926:	29 83       	std	Y+1, r18	; 0x01
    1928:	3a 83       	std	Y+2, r19	; 0x02
    192a:	4b 83       	std	Y+3, r20	; 0x03
    192c:	5c 83       	std	Y+4, r21	; 0x04
    192e:	0e 94 c5 0b 	call	0x178a	; 0x178a <_ZN8SPIClass8transferEh>
    1932:	08 50       	subi	r16, 0x08	; 8
    1934:	11 09       	sbc	r17, r1

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    1936:	29 81       	ldd	r18, Y+1	; 0x01
    1938:	3a 81       	ldd	r19, Y+2	; 0x02
    193a:	4b 81       	ldd	r20, Y+3	; 0x03
    193c:	5c 81       	ldd	r21, Y+4	; 0x04
    193e:	08 3f       	cpi	r16, 0xF8	; 248
    1940:	8f ef       	ldi	r24, 0xFF	; 255
    1942:	18 07       	cpc	r17, r24
    1944:	31 f7       	brne	.-52     	; 0x1912 <_ZN7Sd2Card11cardCommandEhm+0x4a>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    1946:	ff 20       	and	r15, r15
    1948:	29 f0       	breq	.+10     	; 0x1954 <_ZN7Sd2Card11cardCommandEhm+0x8c>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    194a:	e8 e0       	ldi	r30, 0x08	; 8
    194c:	fe 12       	cpse	r15, r30
    194e:	04 c0       	rjmp	.+8      	; 0x1958 <_ZN7Sd2Card11cardCommandEhm+0x90>
    1950:	87 e8       	ldi	r24, 0x87	; 135
    1952:	03 c0       	rjmp	.+6      	; 0x195a <_ZN7Sd2Card11cardCommandEhm+0x92>
  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    1954:	85 e9       	ldi	r24, 0x95	; 149
    1956:	01 c0       	rjmp	.+2      	; 0x195a <_ZN7Sd2Card11cardCommandEhm+0x92>

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);

  // send CRC
  uint8_t crc = 0XFF;
    1958:	8f ef       	ldi	r24, 0xFF	; 255
#ifndef USE_SPI_LIB
  SPDR = b;
  while (!(SPSR & (1 << SPIF)))
    ;
#else
  SPI.transfer(b);
    195a:	0e 94 c5 0b 	call	0x178a	; 0x178a <_ZN8SPIClass8transferEh>
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++)
    195e:	10 e0       	ldi	r17, 0x00	; 0
    1960:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZL6spiRecv>
    1964:	f6 01       	movw	r30, r12
    1966:	82 87       	std	Z+10, r24	; 0x0a
    1968:	87 ff       	sbrs	r24, 7
    196a:	04 c0       	rjmp	.+8      	; 0x1974 <_ZN7Sd2Card11cardCommandEhm+0xac>
    196c:	1f 3f       	cpi	r17, 0xFF	; 255
    196e:	11 f0       	breq	.+4      	; 0x1974 <_ZN7Sd2Card11cardCommandEhm+0xac>
    1970:	1f 5f       	subi	r17, 0xFF	; 255
    1972:	f6 cf       	rjmp	.-20     	; 0x1960 <_ZN7Sd2Card11cardCommandEhm+0x98>
    ;
  return status_;
}
    1974:	0f 90       	pop	r0
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
    197a:	0f 90       	pop	r0
    197c:	df 91       	pop	r29
    197e:	cf 91       	pop	r28
    1980:	1f 91       	pop	r17
    1982:	0f 91       	pop	r16
    1984:	ff 90       	pop	r15
    1986:	df 90       	pop	r13
    1988:	cf 90       	pop	r12
    198a:	08 95       	ret

0000198c <_ZN7Sd2Card4initEhh>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  The reason for failure
 * can be determined by calling errorCode() and errorData().
 */
uint8_t Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
    198c:	8f 92       	push	r8
    198e:	9f 92       	push	r9
    1990:	af 92       	push	r10
    1992:	bf 92       	push	r11
    1994:	ef 92       	push	r14
    1996:	ff 92       	push	r15
    1998:	0f 93       	push	r16
    199a:	1f 93       	push	r17
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
    19a0:	ec 01       	movw	r28, r24
    19a2:	e6 2e       	mov	r14, r22
  errorCode_ = inBlock_ = partialBlockRead_ = type_ = 0;
    19a4:	1b 86       	std	Y+11, r1	; 0x0b
    19a6:	19 86       	std	Y+9, r1	; 0x09
    19a8:	1e 82       	std	Y+6, r1	; 0x06
    19aa:	1d 82       	std	Y+5, r1	; 0x05
  chipSelectPin_ = chipSelectPin;
    19ac:	4c 83       	std	Y+4, r20	; 0x04
  // 16-bit init start time allows over a minute
  uint16_t t0 = (uint16_t)millis();
    19ae:	0e 94 9a 22 	call	0x4534	; 0x4534 <millis>
    19b2:	4b 01       	movw	r8, r22
    19b4:	5c 01       	movw	r10, r24
  uint32_t arg;

  // set pin modes
  pinMode(chipSelectPin_, OUTPUT);
    19b6:	61 e0       	ldi	r22, 0x01	; 1
    19b8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ba:	0e 94 76 23 	call	0x46ec	; 0x46ec <pinMode>
  digitalWrite(chipSelectPin_, HIGH);
    19be:	61 e0       	ldi	r22, 0x01	; 1
    19c0:	8c 81       	ldd	r24, Y+4	; 0x04
    19c2:	0e 94 b2 23 	call	0x4764	; 0x4764 <digitalWrite>
  // Enable SPI, Master, clock rate f_osc/128
  SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
  // clear double speed
  SPSR &= ~(1 << SPI2X);
#else // USE_SPI_LIB
  SPI.begin();
    19c6:	0e 94 b3 1a 	call	0x3566	; 0x3566 <_ZN8SPIClass5beginEv>
  settings = SPISettings(250000, MSBFIRST, SPI_MODE0);
    19ca:	82 e5       	ldi	r24, 0x52	; 82
    19cc:	80 93 7d 03 	sts	0x037D, r24
    19d0:	10 92 7e 03 	sts	0x037E, r1
#endif // USE_SPI_LIB
#endif // SOFTWARE_SPI

  // must supply min of 74 clock cycles with CS high.
#ifdef USE_SPI_LIB
  SPI.beginTransaction(settings);
    19d4:	80 91 7d 03 	lds	r24, 0x037D
    19d8:	90 91 7e 03 	lds	r25, 0x037E
    19dc:	0e 94 ab 0b 	call	0x1756	; 0x1756 <_ZN8SPIClass16beginTransactionE11SPISettings>
    19e0:	1a e0       	ldi	r17, 0x0A	; 10
#ifndef USE_SPI_LIB
  SPDR = b;
  while (!(SPSR & (1 << SPIF)))
    ;
#else
  SPI.transfer(b);
    19e2:	8f ef       	ldi	r24, 0xFF	; 255
    19e4:	0e 94 c5 0b 	call	0x178a	; 0x178a <_ZN8SPIClass8transferEh>
    19e8:	11 50       	subi	r17, 0x01	; 1

  // must supply min of 74 clock cycles with CS high.
#ifdef USE_SPI_LIB
  SPI.beginTransaction(settings);
#endif
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);
    19ea:	d9 f7       	brne	.-10     	; 0x19e2 <_ZN7Sd2Card4initEhh+0x56>
 */
uint8_t Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
  errorCode_ = inBlock_ = partialBlockRead_ = type_ = 0;
  chipSelectPin_ = chipSelectPin;
  // 16-bit init start time allows over a minute
  uint16_t t0 = (uint16_t)millis();
    19ec:	84 01       	movw	r16, r8
#ifdef USE_SPI_LIB
  SPI.beginTransaction(settings);
#endif
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);
#ifdef USE_SPI_LIB
  SPI.endTransaction();
    19ee:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN8SPIClass14endTransactionEv>
#endif

  chipSelectLow();
    19f2:	ce 01       	movw	r24, r28
    19f4:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <_ZN7Sd2Card13chipSelectLowEv>

  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	a9 01       	movw	r20, r18
    19fe:	60 e0       	ldi	r22, 0x00	; 0
    1a00:	ce 01       	movw	r24, r28
    1a02:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <_ZN7Sd2Card11cardCommandEhm>
    1a06:	f8 2e       	mov	r15, r24
    1a08:	8a 87       	std	Y+10, r24	; 0x0a
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	f8 16       	cp	r15, r24
    1a0e:	49 f0       	breq	.+18     	; 0x1a22 <_ZN7Sd2Card4initEhh+0x96>
    if (((uint16_t)(millis() - t0)) > SD_INIT_TIMEOUT) {
    1a10:	0e 94 9a 22 	call	0x4534	; 0x4534 <millis>
    1a14:	60 1b       	sub	r22, r16
    1a16:	71 0b       	sbc	r23, r17
    1a18:	61 3d       	cpi	r22, 0xD1	; 209
    1a1a:	77 40       	sbci	r23, 0x07	; 7
    1a1c:	68 f3       	brcs	.-38     	; 0x19f8 <_ZN7Sd2Card4initEhh+0x6c>
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	4c c0       	rjmp	.+152    	; 0x1aba <_ZN7Sd2Card4initEhh+0x12e>
      error(SD_CARD_ERROR_CMD0);
      goto fail;
    }
  }
  // check SD version
  if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    1a22:	2a ea       	ldi	r18, 0xAA	; 170
    1a24:	31 e0       	ldi	r19, 0x01	; 1
    1a26:	40 e0       	ldi	r20, 0x00	; 0
    1a28:	50 e0       	ldi	r21, 0x00	; 0
    1a2a:	68 e0       	ldi	r22, 0x08	; 8
    1a2c:	ce 01       	movw	r24, r28
    1a2e:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <_ZN7Sd2Card11cardCommandEhm>
    1a32:	82 ff       	sbrs	r24, 2
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <_ZN7Sd2Card4initEhh+0xae>
  uint8_t readRegister(uint8_t cmd, void* buf);
  uint8_t sendWriteCommand(uint32_t blockNumber, uint32_t eraseCount);
  void chipSelectHigh(void);
  void chipSelectLow(void);
  void type(uint8_t value) {type_ = value;}
    1a36:	fb 86       	std	Y+11, r15	; 0x0b
    1a38:	0e c0       	rjmp	.+28     	; 0x1a56 <_ZN7Sd2Card4initEhh+0xca>
    1a3a:	94 e0       	ldi	r25, 0x04	; 4
    1a3c:	f9 2e       	mov	r15, r25
    type(SD_CARD_TYPE_SD1);
  } else {
    // only need last byte of r7 response
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    1a3e:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZL6spiRecv>
    1a42:	8a 87       	std	Y+10, r24	; 0x0a
    1a44:	fa 94       	dec	r15
    1a46:	f1 10       	cpse	r15, r1
    1a48:	fa cf       	rjmp	.-12     	; 0x1a3e <_ZN7Sd2Card4initEhh+0xb2>
    if (status_ != 0XAA) {
    1a4a:	8a 3a       	cpi	r24, 0xAA	; 170
    1a4c:	11 f0       	breq	.+4      	; 0x1a52 <_ZN7Sd2Card4initEhh+0xc6>
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    1a4e:	82 e0       	ldi	r24, 0x02	; 2
    1a50:	34 c0       	rjmp	.+104    	; 0x1aba <_ZN7Sd2Card4initEhh+0x12e>
  uint8_t readRegister(uint8_t cmd, void* buf);
  uint8_t sendWriteCommand(uint32_t blockNumber, uint32_t eraseCount);
  void chipSelectHigh(void);
  void chipSelectLow(void);
  void type(uint8_t value) {type_ = value;}
    1a52:	82 e0       	ldi	r24, 0x02	; 2
    1a54:	8b 87       	std	Y+11, r24	; 0x0b
      goto fail;
    }
    type(SD_CARD_TYPE_SD2);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    1a56:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a58:	82 30       	cpi	r24, 0x02	; 2
    1a5a:	21 f0       	breq	.+8      	; 0x1a64 <_ZN7Sd2Card4initEhh+0xd8>
    1a5c:	81 2c       	mov	r8, r1
    1a5e:	91 2c       	mov	r9, r1
    1a60:	54 01       	movw	r10, r8
    1a62:	05 c0       	rjmp	.+10     	; 0x1a6e <_ZN7Sd2Card4initEhh+0xe2>
    1a64:	81 2c       	mov	r8, r1
    1a66:	91 2c       	mov	r9, r1
    1a68:	a1 2c       	mov	r10, r1
    1a6a:	80 e4       	ldi	r24, 0x40	; 64
    1a6c:	b8 2e       	mov	r11, r24
  uint8_t partialBlockRead_;
  uint8_t status_;
  uint8_t type_;
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	a9 01       	movw	r20, r18
    1a74:	67 e3       	ldi	r22, 0x37	; 55
    1a76:	ce 01       	movw	r24, r28
    1a78:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <_ZN7Sd2Card11cardCommandEhm>
    return cardCommand(cmd, arg);
    1a7c:	a5 01       	movw	r20, r10
    1a7e:	94 01       	movw	r18, r8
    1a80:	69 e2       	ldi	r22, 0x29	; 41
    1a82:	ce 01       	movw	r24, r28
    1a84:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <_ZN7Sd2Card11cardCommandEhm>

  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    1a88:	8a 87       	std	Y+10, r24	; 0x0a
    1a8a:	88 23       	and	r24, r24
    1a8c:	49 f0       	breq	.+18     	; 0x1aa0 <_ZN7Sd2Card4initEhh+0x114>
    // check for timeout
    if (((uint16_t)(millis() - t0)) > SD_INIT_TIMEOUT) {
    1a8e:	0e 94 9a 22 	call	0x4534	; 0x4534 <millis>
    1a92:	60 1b       	sub	r22, r16
    1a94:	71 0b       	sbc	r23, r17
    1a96:	61 3d       	cpi	r22, 0xD1	; 209
    1a98:	77 40       	sbci	r23, 0x07	; 7
    1a9a:	48 f3       	brcs	.-46     	; 0x1a6e <_ZN7Sd2Card4initEhh+0xe2>
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    1a9c:	88 e0       	ldi	r24, 0x08	; 8
    1a9e:	0d c0       	rjmp	.+26     	; 0x1aba <_ZN7Sd2Card4initEhh+0x12e>
      error(SD_CARD_ERROR_ACMD41);
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    1aa0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1aa2:	82 30       	cpi	r24, 0x02	; 2
    1aa4:	39 f5       	brne	.+78     	; 0x1af4 <_ZN7Sd2Card4initEhh+0x168>
    if (cardCommand(CMD58, 0)) {
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	a9 01       	movw	r20, r18
    1aac:	6a e3       	ldi	r22, 0x3A	; 58
    1aae:	ce 01       	movw	r24, r28
    1ab0:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <_ZN7Sd2Card11cardCommandEhm>
    1ab4:	88 23       	and	r24, r24
    1ab6:	89 f0       	breq	.+34     	; 0x1ada <_ZN7Sd2Card4initEhh+0x14e>
    1ab8:	86 e0       	ldi	r24, 0x06	; 6
    1aba:	8d 83       	std	Y+5, r24	; 0x05
#else  // SOFTWARE_SPI
  return true;
#endif  // SOFTWARE_SPI

 fail:
  chipSelectHigh();
    1abc:	ce 01       	movw	r24, r28
    1abe:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
}
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	df 91       	pop	r29
    1ac6:	cf 91       	pop	r28
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	bf 90       	pop	r11
    1ad2:	af 90       	pop	r10
    1ad4:	9f 90       	pop	r9
    1ad6:	8f 90       	pop	r8
    1ad8:	08 95       	ret
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiRec() & 0XC0) == 0XC0) type(SD_CARD_TYPE_SDHC);
    1ada:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZL6spiRecv>
    1ade:	80 7c       	andi	r24, 0xC0	; 192
    1ae0:	80 3c       	cpi	r24, 0xC0	; 192
    1ae2:	11 f4       	brne	.+4      	; 0x1ae8 <_ZN7Sd2Card4initEhh+0x15c>
  uint8_t readRegister(uint8_t cmd, void* buf);
  uint8_t sendWriteCommand(uint32_t blockNumber, uint32_t eraseCount);
  void chipSelectHigh(void);
  void chipSelectLow(void);
  void type(uint8_t value) {type_ = value;}
    1ae4:	83 e0       	ldi	r24, 0x03	; 3
    1ae6:	8b 87       	std	Y+11, r24	; 0x0b
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
    1ae8:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZL6spiRecv>
    1aec:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZL6spiRecv>
    1af0:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZL6spiRecv>
  }
  chipSelectHigh();
    1af4:	ce 01       	movw	r24, r28
    1af6:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <_ZN7Sd2Card14chipSelectHighEv>

#ifndef SOFTWARE_SPI
  return setSckRate(sckRateID);
    1afa:	6e 2d       	mov	r22, r14
    1afc:	ce 01       	movw	r24, r28
#endif  // SOFTWARE_SPI

 fail:
  chipSelectHigh();
  return false;
}
    1afe:	df 91       	pop	r29
    1b00:	cf 91       	pop	r28
    1b02:	1f 91       	pop	r17
    1b04:	0f 91       	pop	r16
    1b06:	ff 90       	pop	r15
    1b08:	ef 90       	pop	r14
    1b0a:	bf 90       	pop	r11
    1b0c:	af 90       	pop	r10
    1b0e:	9f 90       	pop	r9
    1b10:	8f 90       	pop	r8
    for (uint8_t i = 0; i < 3; i++) spiRec();
  }
  chipSelectHigh();

#ifndef SOFTWARE_SPI
  return setSckRate(sckRateID);
    1b12:	0c 94 1e 0c 	jmp	0x183c	; 0x183c <_ZN7Sd2Card10setSckRateEh>

00001b16 <_ZN7Sd2Card14waitStartBlockEv>:
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    1b16:	0f 93       	push	r16
    1b18:	1f 93       	push	r17
    1b1a:	cf 93       	push	r28
    1b1c:	df 93       	push	r29
    1b1e:	ec 01       	movw	r28, r24
  uint16_t t0 = millis();
    1b20:	0e 94 9a 22 	call	0x4534	; 0x4534 <millis>
    1b24:	8b 01       	movw	r16, r22
  while ((status_ = spiRec()) == 0XFF) {
    1b26:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZL6spiRecv>
    1b2a:	8a 87       	std	Y+10, r24	; 0x0a
    1b2c:	8f 3f       	cpi	r24, 0xFF	; 255
    1b2e:	49 f4       	brne	.+18     	; 0x1b42 <_ZN7Sd2Card14waitStartBlockEv+0x2c>
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
    1b30:	0e 94 9a 22 	call	0x4534	; 0x4534 <millis>
    1b34:	60 1b       	sub	r22, r16
    1b36:	71 0b       	sbc	r23, r17
    1b38:	6d 32       	cpi	r22, 0x2D	; 45
    1b3a:	71 40       	sbci	r23, 0x01	; 1
    1b3c:	a0 f3       	brcs	.-24     	; 0x1b26 <_ZN7Sd2Card14waitStartBlockEv+0x10>
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    1b3e:	8f e0       	ldi	r24, 0x0F	; 15
    1b40:	03 c0       	rjmp	.+6      	; 0x1b48 <_ZN7Sd2Card14waitStartBlockEv+0x32>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (status_ != DATA_START_BLOCK) {
    1b42:	8e 3f       	cpi	r24, 0xFE	; 254
    1b44:	39 f0       	breq	.+14     	; 0x1b54 <_ZN7Sd2Card14waitStartBlockEv+0x3e>
    1b46:	8d e0       	ldi	r24, 0x0D	; 13
    1b48:	8d 83       	std	Y+5, r24	; 0x05
    goto fail;
  }
  return true;

 fail:
  chipSelectHigh();
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	01 c0       	rjmp	.+2      	; 0x1b56 <_ZN7Sd2Card14waitStartBlockEv+0x40>
  }
  if (status_ != DATA_START_BLOCK) {
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  return true;
    1b54:	81 e0       	ldi	r24, 0x01	; 1

 fail:
  chipSelectHigh();
  return false;
}
    1b56:	df 91       	pop	r29
    1b58:	cf 91       	pop	r28
    1b5a:	1f 91       	pop	r17
    1b5c:	0f 91       	pop	r16
    1b5e:	08 95       	ret

00001b60 <_ZN7Sd2Card8readDataEmjjPh.part.6>:
 * \param[out] dst Pointer to the location that will receive the data.
 * \param[in] count Number of bytes to read
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readData(uint32_t block,
    1b60:	cf 92       	push	r12
    1b62:	df 92       	push	r13
    1b64:	ef 92       	push	r14
    1b66:	ff 92       	push	r15
    1b68:	0f 93       	push	r16
    1b6a:	1f 93       	push	r17
    1b6c:	cf 93       	push	r28
    1b6e:	df 93       	push	r29
    1b70:	ec 01       	movw	r28, r24
    1b72:	69 01       	movw	r12, r18
        uint16_t offset, uint16_t count, uint8_t* dst) {
  uint16_t n;
  if (count == 0) return true;
  if ((count + offset) > 512) {
    1b74:	c8 01       	movw	r24, r16
    1b76:	82 0f       	add	r24, r18
    1b78:	93 1f       	adc	r25, r19
    1b7a:	81 30       	cpi	r24, 0x01	; 1
    1b7c:	92 40       	sbci	r25, 0x02	; 2
    1b7e:	08 f0       	brcs	.+2      	; 0x1b82 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x22>
    1b80:	5c c0       	rjmp	.+184    	; 0x1c3a <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
    goto fail;
  }
  if (!inBlock_ || block != block_ || offset < offset_) {
    1b82:	8e 81       	ldd	r24, Y+6	; 0x06
    1b84:	88 23       	and	r24, r24
    1b86:	71 f0       	breq	.+28     	; 0x1ba4 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    1b88:	88 81       	ld	r24, Y
    1b8a:	99 81       	ldd	r25, Y+1	; 0x01
    1b8c:	aa 81       	ldd	r26, Y+2	; 0x02
    1b8e:	bb 81       	ldd	r27, Y+3	; 0x03
    1b90:	48 17       	cp	r20, r24
    1b92:	59 07       	cpc	r21, r25
    1b94:	6a 07       	cpc	r22, r26
    1b96:	7b 07       	cpc	r23, r27
    1b98:	29 f4       	brne	.+10     	; 0x1ba4 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    1b9a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b9c:	98 85       	ldd	r25, Y+8	; 0x08
    1b9e:	c8 16       	cp	r12, r24
    1ba0:	d9 06       	cpc	r13, r25
    1ba2:	10 f5       	brcc	.+68     	; 0x1be8 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x88>
    block_ = block;
    1ba4:	48 83       	st	Y, r20
    1ba6:	59 83       	std	Y+1, r21	; 0x01
    1ba8:	6a 83       	std	Y+2, r22	; 0x02
    1baa:	7b 83       	std	Y+3, r23	; 0x03
    // use address if not SDHC card
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
    1bac:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bae:	83 30       	cpi	r24, 0x03	; 3
    1bb0:	39 f0       	breq	.+14     	; 0x1bc0 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x60>
    1bb2:	89 e0       	ldi	r24, 0x09	; 9
    1bb4:	44 0f       	add	r20, r20
    1bb6:	55 1f       	adc	r21, r21
    1bb8:	66 1f       	adc	r22, r22
    1bba:	77 1f       	adc	r23, r23
    1bbc:	8a 95       	dec	r24
    1bbe:	d1 f7       	brne	.-12     	; 0x1bb4 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x54>
    if (cardCommand(CMD17, block)) {
    1bc0:	9a 01       	movw	r18, r20
    1bc2:	ab 01       	movw	r20, r22
    1bc4:	61 e1       	ldi	r22, 0x11	; 17
    1bc6:	ce 01       	movw	r24, r28
    1bc8:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <_ZN7Sd2Card11cardCommandEhm>
    1bcc:	88 23       	and	r24, r24
    1bce:	19 f0       	breq	.+6      	; 0x1bd6 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x76>
    1bd0:	83 e0       	ldi	r24, 0x03	; 3
    1bd2:	8d 83       	std	Y+5, r24	; 0x05
    1bd4:	32 c0       	rjmp	.+100    	; 0x1c3a <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
      error(SD_CARD_ERROR_CMD17);
      goto fail;
    }
    if (!waitStartBlock()) {
    1bd6:	ce 01       	movw	r24, r28
    1bd8:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN7Sd2Card14waitStartBlockEv>
    1bdc:	88 23       	and	r24, r24
    1bde:	69 f1       	breq	.+90     	; 0x1c3a <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
      goto fail;
    }
    offset_ = 0;
    1be0:	18 86       	std	Y+8, r1	; 0x08
    1be2:	1f 82       	std	Y+7, r1	; 0x07
    inBlock_ = 1;
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	8e 83       	std	Y+6, r24	; 0x06
  dst[n] = SPDR;

#else  // OPTIMIZE_HARDWARE_SPI

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    1be8:	8f 81       	ldd	r24, Y+7	; 0x07
    1bea:	98 85       	ldd	r25, Y+8	; 0x08
    1bec:	8c 15       	cp	r24, r12
    1bee:	9d 05       	cpc	r25, r13
    1bf0:	40 f4       	brcc	.+16     	; 0x1c02 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xa2>
    spiRec();
    1bf2:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZL6spiRecv>
  dst[n] = SPDR;

#else  // OPTIMIZE_HARDWARE_SPI

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    1bf6:	8f 81       	ldd	r24, Y+7	; 0x07
    1bf8:	98 85       	ldd	r25, Y+8	; 0x08
    1bfa:	01 96       	adiw	r24, 0x01	; 1
    1bfc:	98 87       	std	Y+8, r25	; 0x08
    1bfe:	8f 83       	std	Y+7, r24	; 0x07
    1c00:	f3 cf       	rjmp	.-26     	; 0x1be8 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x88>
    1c02:	67 01       	movw	r12, r14
    1c04:	e0 0e       	add	r14, r16
    1c06:	f1 1e       	adc	r15, r17
    spiRec();
  }
  // transfer data
  for (uint16_t i = 0; i < count; i++) {
    1c08:	ce 14       	cp	r12, r14
    1c0a:	df 04       	cpc	r13, r15
    1c0c:	31 f0       	breq	.+12     	; 0x1c1a <_ZN7Sd2Card8readDataEmjjPh.part.6+0xba>
    dst[i] = spiRec();
    1c0e:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZL6spiRecv>
    1c12:	f6 01       	movw	r30, r12
    1c14:	81 93       	st	Z+, r24
    1c16:	6f 01       	movw	r12, r30
    1c18:	f7 cf       	rjmp	.-18     	; 0x1c08 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xa8>
  }
#endif  // OPTIMIZE_HARDWARE_SPI

  offset_ += count;
    1c1a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c1c:	98 85       	ldd	r25, Y+8	; 0x08
    1c1e:	08 0f       	add	r16, r24
    1c20:	19 1f       	adc	r17, r25
    1c22:	18 87       	std	Y+8, r17	; 0x08
    1c24:	0f 83       	std	Y+7, r16	; 0x07
  if (!partialBlockRead_ || offset_ >= 512) {
    1c26:	89 85       	ldd	r24, Y+9	; 0x09
    1c28:	88 23       	and	r24, r24
    1c2a:	19 f0       	breq	.+6      	; 0x1c32 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd2>
    1c2c:	01 15       	cp	r16, r1
    1c2e:	12 40       	sbci	r17, 0x02	; 2
    1c30:	48 f0       	brcs	.+18     	; 0x1c44 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xe4>
    // read rest of data, checksum and set chip select high
    readEnd();
    1c32:	ce 01       	movw	r24, r28
    1c34:	0e 94 04 0c 	call	0x1808	; 0x1808 <_ZN7Sd2Card7readEndEv>
    1c38:	05 c0       	rjmp	.+10     	; 0x1c44 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xe4>
  }
  return true;

 fail:
  chipSelectHigh();
    1c3a:	ce 01       	movw	r24, r28
    1c3c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	01 c0       	rjmp	.+2      	; 0x1c46 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xe6>
  offset_ += count;
  if (!partialBlockRead_ || offset_ >= 512) {
    // read rest of data, checksum and set chip select high
    readEnd();
  }
  return true;
    1c44:	81 e0       	ldi	r24, 0x01	; 1

 fail:
  chipSelectHigh();
  return false;
}
    1c46:	df 91       	pop	r29
    1c48:	cf 91       	pop	r28
    1c4a:	1f 91       	pop	r17
    1c4c:	0f 91       	pop	r16
    1c4e:	ff 90       	pop	r15
    1c50:	ef 90       	pop	r14
    1c52:	df 90       	pop	r13
    1c54:	cf 90       	pop	r12
    1c56:	08 95       	ret

00001c58 <_ZN7Sd2Card8readDataEmjjPh>:
 * \param[in] count Number of bytes to read
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readData(uint32_t block,
        uint16_t offset, uint16_t count, uint8_t* dst) {
    1c58:	ef 92       	push	r14
    1c5a:	ff 92       	push	r15
    1c5c:	0f 93       	push	r16
    1c5e:	1f 93       	push	r17
  uint16_t n;
  if (count == 0) return true;
    1c60:	01 15       	cp	r16, r1
    1c62:	11 05       	cpc	r17, r1
    1c64:	19 f0       	breq	.+6      	; 0x1c6c <_ZN7Sd2Card8readDataEmjjPh+0x14>
    1c66:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <_ZN7Sd2Card8readDataEmjjPh.part.6>
    1c6a:	01 c0       	rjmp	.+2      	; 0x1c6e <_ZN7Sd2Card8readDataEmjjPh+0x16>
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
  return true;

 fail:
  chipSelectHigh();
  return false;
}
    1c6e:	1f 91       	pop	r17
    1c70:	0f 91       	pop	r16
    1c72:	ff 90       	pop	r15
    1c74:	ef 90       	pop	r14
    1c76:	08 95       	ret

00001c78 <_ZN7Sd2Card9readBlockEmPh>:
 * \param[out] dst Pointer to the location that will receive the data.

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
    1c78:	ef 92       	push	r14
    1c7a:	ff 92       	push	r15
    1c7c:	0f 93       	push	r16
    1c7e:	1f 93       	push	r17
    1c80:	79 01       	movw	r14, r18
    1c82:	00 e0       	ldi	r16, 0x00	; 0
    1c84:	12 e0       	ldi	r17, 0x02	; 2
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <_ZN7Sd2Card8readDataEmjjPh.part.6>
  return readData(block, 0, 512, dst);
}
    1c8e:	1f 91       	pop	r17
    1c90:	0f 91       	pop	r16
    1c92:	ff 90       	pop	r15
    1c94:	ef 90       	pop	r14
    1c96:	08 95       	ret

00001c98 <_ZN7Sd2Card9writeDataEhPKh>:
  }
  return writeData(WRITE_MULTIPLE_TOKEN, src);
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    1c98:	cf 92       	push	r12
    1c9a:	df 92       	push	r13
    1c9c:	ef 92       	push	r14
    1c9e:	ff 92       	push	r15
    1ca0:	0f 93       	push	r16
    1ca2:	1f 93       	push	r17
    1ca4:	cf 93       	push	r28
    1ca6:	df 93       	push	r29
    1ca8:	00 d0       	rcall	.+0      	; 0x1caa <_ZN7Sd2Card9writeDataEhPKh+0x12>
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	8c 01       	movw	r16, r24
    1cb0:	86 2f       	mov	r24, r22
#ifndef USE_SPI_LIB
  SPDR = b;
  while (!(SPSR & (1 << SPIF)))
    ;
#else
  SPI.transfer(b);
    1cb2:	49 83       	std	Y+1, r20	; 0x01
    1cb4:	5a 83       	std	Y+2, r21	; 0x02
    1cb6:	0e 94 c5 0b 	call	0x178a	; 0x178a <_ZN8SPIClass8transferEh>
    1cba:	49 81       	ldd	r20, Y+1	; 0x01
    1cbc:	c4 2e       	mov	r12, r20
    1cbe:	5a 81       	ldd	r21, Y+2	; 0x02
    1cc0:	d5 2e       	mov	r13, r21
    1cc2:	76 01       	movw	r14, r12
    1cc4:	8e ef       	ldi	r24, 0xFE	; 254
    1cc6:	f8 1a       	sub	r15, r24
    1cc8:	f6 01       	movw	r30, r12
    1cca:	81 91       	ld	r24, Z+
    1ccc:	6f 01       	movw	r12, r30
    1cce:	0e 94 c5 0b 	call	0x178a	; 0x178a <_ZN8SPIClass8transferEh>
  while (!(SPSR & (1 << SPIF)))
    ;

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
  for (uint16_t i = 0; i < 512; i++) {
    1cd2:	ce 14       	cp	r12, r14
    1cd4:	df 04       	cpc	r13, r15
    1cd6:	c1 f7       	brne	.-16     	; 0x1cc8 <_ZN7Sd2Card9writeDataEhPKh+0x30>
#ifndef USE_SPI_LIB
  SPDR = b;
  while (!(SPSR & (1 << SPIF)))
    ;
#else
  SPI.transfer(b);
    1cd8:	8f ef       	ldi	r24, 0xFF	; 255
    1cda:	0e 94 c5 0b 	call	0x178a	; 0x178a <_ZN8SPIClass8transferEh>
    1cde:	8f ef       	ldi	r24, 0xFF	; 255
    1ce0:	0e 94 c5 0b 	call	0x178a	; 0x178a <_ZN8SPIClass8transferEh>
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
    1ce4:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZL6spiRecv>
    1ce8:	f8 01       	movw	r30, r16
    1cea:	82 87       	std	Z+10, r24	; 0x0a
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    1cec:	98 2f       	mov	r25, r24
    1cee:	9f 71       	andi	r25, 0x1F	; 31
    1cf0:	95 30       	cpi	r25, 0x05	; 5
    1cf2:	39 f0       	breq	.+14     	; 0x1d02 <_ZN7Sd2Card9writeDataEhPKh+0x6a>
    1cf4:	81 e1       	ldi	r24, 0x11	; 17
    1cf6:	85 83       	std	Z+5, r24	; 0x05
    error(SD_CARD_ERROR_WRITE);
    chipSelectHigh();
    1cf8:	c8 01       	movw	r24, r16
    1cfa:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <_ZN7Sd2Card14chipSelectHighEv>
    return false;
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	01 c0       	rjmp	.+2      	; 0x1d04 <_ZN7Sd2Card9writeDataEhPKh+0x6c>
  }
  return true;
    1d02:	81 e0       	ldi	r24, 0x01	; 1
}
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	df 91       	pop	r29
    1d0a:	cf 91       	pop	r28
    1d0c:	1f 91       	pop	r17
    1d0e:	0f 91       	pop	r16
    1d10:	ff 90       	pop	r15
    1d12:	ef 90       	pop	r14
    1d14:	df 90       	pop	r13
    1d16:	cf 90       	pop	r12
    1d18:	08 95       	ret

00001d1a <_ZN7Sd2Card10writeBlockEmPKh>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {
    1d1a:	0f 93       	push	r16
    1d1c:	1f 93       	push	r17
    1d1e:	cf 93       	push	r28
    1d20:	df 93       	push	r29
    1d22:	ec 01       	movw	r28, r24
    1d24:	89 01       	movw	r16, r18
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    1d26:	41 15       	cp	r20, r1
    1d28:	51 05       	cpc	r21, r1
    1d2a:	61 05       	cpc	r22, r1
    1d2c:	71 05       	cpc	r23, r1
    1d2e:	11 f4       	brne	.+4      	; 0x1d34 <_ZN7Sd2Card10writeBlockEmPKh+0x1a>
    1d30:	82 e1       	ldi	r24, 0x12	; 18
    1d32:	32 c0       	rjmp	.+100    	; 0x1d98 <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
    goto fail;
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    1d34:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d36:	83 30       	cpi	r24, 0x03	; 3
    1d38:	39 f0       	breq	.+14     	; 0x1d48 <_ZN7Sd2Card10writeBlockEmPKh+0x2e>
    1d3a:	89 e0       	ldi	r24, 0x09	; 9
    1d3c:	44 0f       	add	r20, r20
    1d3e:	55 1f       	adc	r21, r21
    1d40:	66 1f       	adc	r22, r22
    1d42:	77 1f       	adc	r23, r23
    1d44:	8a 95       	dec	r24
    1d46:	d1 f7       	brne	.-12     	; 0x1d3c <_ZN7Sd2Card10writeBlockEmPKh+0x22>
  if (cardCommand(CMD24, blockNumber)) {
    1d48:	9a 01       	movw	r18, r20
    1d4a:	ab 01       	movw	r20, r22
    1d4c:	68 e1       	ldi	r22, 0x18	; 24
    1d4e:	ce 01       	movw	r24, r28
    1d50:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <_ZN7Sd2Card11cardCommandEhm>
    1d54:	88 23       	and	r24, r24
    1d56:	11 f0       	breq	.+4      	; 0x1d5c <_ZN7Sd2Card10writeBlockEmPKh+0x42>
    1d58:	84 e0       	ldi	r24, 0x04	; 4
    1d5a:	1e c0       	rjmp	.+60     	; 0x1d98 <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    1d5c:	a8 01       	movw	r20, r16
    1d5e:	6e ef       	ldi	r22, 0xFE	; 254
    1d60:	ce 01       	movw	r24, r28
    1d62:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <_ZN7Sd2Card9writeDataEhPKh>
    1d66:	88 23       	and	r24, r24
    1d68:	c1 f0       	breq	.+48     	; 0x1d9a <_ZN7Sd2Card10writeBlockEmPKh+0x80>

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    1d6a:	68 e5       	ldi	r22, 0x58	; 88
    1d6c:	72 e0       	ldi	r23, 0x02	; 2
    1d6e:	ce 01       	movw	r24, r28
    1d70:	0e 94 49 0c 	call	0x1892	; 0x1892 <_ZN7Sd2Card11waitNotBusyEj>
    1d74:	81 11       	cpse	r24, r1
    1d76:	02 c0       	rjmp	.+4      	; 0x1d7c <_ZN7Sd2Card10writeBlockEmPKh+0x62>
    1d78:	85 e1       	ldi	r24, 0x15	; 21
    1d7a:	0e c0       	rjmp	.+28     	; 0x1d98 <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	a9 01       	movw	r20, r18
    1d82:	6d e0       	ldi	r22, 0x0D	; 13
    1d84:	ce 01       	movw	r24, r28
    1d86:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <_ZN7Sd2Card11cardCommandEhm>
    1d8a:	81 11       	cpse	r24, r1
    1d8c:	04 c0       	rjmp	.+8      	; 0x1d96 <_ZN7Sd2Card10writeBlockEmPKh+0x7c>
    1d8e:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZL6spiRecv>
    1d92:	88 23       	and	r24, r24
    1d94:	39 f0       	breq	.+14     	; 0x1da4 <_ZN7Sd2Card10writeBlockEmPKh+0x8a>
    1d96:	84 e1       	ldi	r24, 0x14	; 20
    1d98:	8d 83       	std	Y+5, r24	; 0x05
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	04 c0       	rjmp	.+8      	; 0x1dac <_ZN7Sd2Card10writeBlockEmPKh+0x92>
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
  chipSelectHigh();
    1da4:	ce 01       	movw	r24, r28
    1da6:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <_ZN7Sd2Card14chipSelectHighEv>
  return true;
    1daa:	81 e0       	ldi	r24, 0x01	; 1

 fail:
  chipSelectHigh();
  return false;
}
    1dac:	df 91       	pop	r29
    1dae:	cf 91       	pop	r28
    1db0:	1f 91       	pop	r17
    1db2:	0f 91       	pop	r16
    1db4:	08 95       	ret

00001db6 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    1db6:	ed e7       	ldi	r30, 0x7D	; 125
    1db8:	f3 e0       	ldi	r31, 0x03	; 3
    1dba:	80 e5       	ldi	r24, 0x50	; 80
    1dbc:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    1dbe:	11 82       	std	Z+1, r1	; 0x01
    1dc0:	08 95       	ret

00001dc2 <_ZN6SdFile10addClusterEv>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    1dc2:	cf 93       	push	r28
    1dc4:	df 93       	push	r29
    1dc6:	ec 01       	movw	r28, r24
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    1dc8:	9c 01       	movw	r18, r24
    1dca:	2a 5f       	subi	r18, 0xFA	; 250
    1dcc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dce:	41 e0       	ldi	r20, 0x01	; 1
    1dd0:	50 e0       	ldi	r21, 0x00	; 0
    1dd2:	60 e0       	ldi	r22, 0x00	; 0
    1dd4:	70 e0       	ldi	r23, 0x00	; 0
    1dd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dda:	0e 94 31 18 	call	0x3062	; 0x3062 <_ZN8SdVolume15allocContiguousEmPm>
    1dde:	88 23       	and	r24, r24
    1de0:	a1 f0       	breq	.+40     	; 0x1e0a <_ZN6SdFile10addClusterEv+0x48>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    1de2:	8f 89       	ldd	r24, Y+23	; 0x17
    1de4:	98 8d       	ldd	r25, Y+24	; 0x18
    1de6:	a9 8d       	ldd	r26, Y+25	; 0x19
    1de8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1dea:	89 2b       	or	r24, r25
    1dec:	8a 2b       	or	r24, r26
    1dee:	8b 2b       	or	r24, r27
    1df0:	59 f4       	brne	.+22     	; 0x1e08 <_ZN6SdFile10addClusterEv+0x46>
    firstCluster_ = curCluster_;
    1df2:	8e 81       	ldd	r24, Y+6	; 0x06
    1df4:	9f 81       	ldd	r25, Y+7	; 0x07
    1df6:	a8 85       	ldd	r26, Y+8	; 0x08
    1df8:	b9 85       	ldd	r27, Y+9	; 0x09
    1dfa:	8f 8b       	std	Y+23, r24	; 0x17
    1dfc:	98 8f       	std	Y+24, r25	; 0x18
    1dfe:	a9 8f       	std	Y+25, r26	; 0x19
    1e00:	ba 8f       	std	Y+26, r27	; 0x1a
    flags_ |= F_FILE_DIR_DIRTY;
    1e02:	8c 81       	ldd	r24, Y+4	; 0x04
    1e04:	80 68       	ori	r24, 0x80	; 128
    1e06:	8c 83       	std	Y+4, r24	; 0x04
  }
  return true;
    1e08:	81 e0       	ldi	r24, 0x01	; 1
}
    1e0a:	df 91       	pop	r29
    1e0c:	cf 91       	pop	r28
    1e0e:	08 95       	ret

00001e10 <_ZN6SdFile13addDirClusterEv>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// return with first block of cluster in the cache
uint8_t SdFile::addDirCluster(void) {
    1e10:	cf 92       	push	r12
    1e12:	df 92       	push	r13
    1e14:	ef 92       	push	r14
    1e16:	ff 92       	push	r15
    1e18:	1f 93       	push	r17
    1e1a:	cf 93       	push	r28
    1e1c:	df 93       	push	r29
    1e1e:	ec 01       	movw	r28, r24
  if (!addCluster()) return false;
    1e20:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <_ZN6SdFile10addClusterEv>
    1e24:	81 11       	cpse	r24, r1
    1e26:	02 c0       	rjmp	.+4      	; 0x1e2c <_ZN6SdFile13addDirClusterEv+0x1c>
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	4a c0       	rjmp	.+148    	; 0x1ec0 <_ZN6SdFile13addDirClusterEv+0xb0>

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
    1e2c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1e2e:	fc 8d       	ldd	r31, Y+28	; 0x1c
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    1e30:	ce 80       	ldd	r12, Y+6	; 0x06
    1e32:	df 80       	ldd	r13, Y+7	; 0x07
    1e34:	e8 84       	ldd	r14, Y+8	; 0x08
    1e36:	f9 84       	ldd	r15, Y+9	; 0x09
    1e38:	82 e0       	ldi	r24, 0x02	; 2
    1e3a:	c8 1a       	sub	r12, r24
    1e3c:	d1 08       	sbc	r13, r1
    1e3e:	e1 08       	sbc	r14, r1
    1e40:	f1 08       	sbc	r15, r1
    1e42:	05 84       	ldd	r0, Z+13	; 0x0d
    1e44:	04 c0       	rjmp	.+8      	; 0x1e4e <_ZN6SdFile13addDirClusterEv+0x3e>
    1e46:	cc 0c       	add	r12, r12
    1e48:	dd 1c       	adc	r13, r13
    1e4a:	ee 1c       	adc	r14, r14
    1e4c:	ff 1c       	adc	r15, r15
    1e4e:	0a 94       	dec	r0
    1e50:	d2 f7       	brpl	.-12     	; 0x1e46 <_ZN6SdFile13addDirClusterEv+0x36>
    1e52:	86 85       	ldd	r24, Z+14	; 0x0e
    1e54:	97 85       	ldd	r25, Z+15	; 0x0f
    1e56:	a0 89       	ldd	r26, Z+16	; 0x10
    1e58:	b1 89       	ldd	r27, Z+17	; 0x11
    1e5a:	c8 0e       	add	r12, r24
    1e5c:	d9 1e       	adc	r13, r25
    1e5e:	ea 1e       	adc	r14, r26
    1e60:	fb 1e       	adc	r15, r27
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    1e62:	14 81       	ldd	r17, Z+4	; 0x04
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	c8 1a       	sub	r12, r24
    1e68:	d1 08       	sbc	r13, r1
    1e6a:	e1 08       	sbc	r14, r1
    1e6c:	f1 08       	sbc	r15, r1
    1e6e:	11 23       	and	r17, r17
    1e70:	61 f0       	breq	.+24     	; 0x1e8a <_ZN6SdFile13addDirClusterEv+0x7a>
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    1e72:	c7 01       	movw	r24, r14
    1e74:	b6 01       	movw	r22, r12
    1e76:	61 0f       	add	r22, r17
    1e78:	71 1d       	adc	r23, r1
    1e7a:	81 1d       	adc	r24, r1
    1e7c:	91 1d       	adc	r25, r1
    1e7e:	0e 94 80 16 	call	0x2d00	; 0x2d00 <_ZN8SdVolume14cacheZeroBlockEm>
    1e82:	88 23       	and	r24, r24
    1e84:	89 f2       	breq	.-94     	; 0x1e28 <_ZN6SdFile13addDirClusterEv+0x18>
uint8_t SdFile::addDirCluster(void) {
  if (!addCluster()) return false;

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    1e86:	11 50       	subi	r17, 0x01	; 1
    1e88:	f2 cf       	rjmp	.-28     	; 0x1e6e <_ZN6SdFile13addDirClusterEv+0x5e>
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
  }
  // Increase directory file size by cluster size
  fileSize_ += 512UL << vol_->clusterSizeShift_;
    1e8a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1e8c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	92 e0       	ldi	r25, 0x02	; 2
    1e92:	a0 e0       	ldi	r26, 0x00	; 0
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	05 84       	ldd	r0, Z+13	; 0x0d
    1e98:	04 c0       	rjmp	.+8      	; 0x1ea2 <_ZN6SdFile13addDirClusterEv+0x92>
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	aa 1f       	adc	r26, r26
    1ea0:	bb 1f       	adc	r27, r27
    1ea2:	0a 94       	dec	r0
    1ea4:	d2 f7       	brpl	.-12     	; 0x1e9a <_ZN6SdFile13addDirClusterEv+0x8a>
    1ea6:	4b 89       	ldd	r20, Y+19	; 0x13
    1ea8:	5c 89       	ldd	r21, Y+20	; 0x14
    1eaa:	6d 89       	ldd	r22, Y+21	; 0x15
    1eac:	7e 89       	ldd	r23, Y+22	; 0x16
    1eae:	84 0f       	add	r24, r20
    1eb0:	95 1f       	adc	r25, r21
    1eb2:	a6 1f       	adc	r26, r22
    1eb4:	b7 1f       	adc	r27, r23
    1eb6:	8b 8b       	std	Y+19, r24	; 0x13
    1eb8:	9c 8b       	std	Y+20, r25	; 0x14
    1eba:	ad 8b       	std	Y+21, r26	; 0x15
    1ebc:	be 8b       	std	Y+22, r27	; 0x16
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
  return true;
}
    1ec0:	df 91       	pop	r29
    1ec2:	cf 91       	pop	r28
    1ec4:	1f 91       	pop	r17
    1ec6:	ff 90       	pop	r15
    1ec8:	ef 90       	pop	r14
    1eca:	df 90       	pop	r13
    1ecc:	cf 90       	pop	r12
    1ece:	08 95       	ret

00001ed0 <_ZN6SdFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
    1ed0:	cf 93       	push	r28
    1ed2:	df 93       	push	r29
    1ed4:	ec 01       	movw	r28, r24
    1ed6:	46 2f       	mov	r20, r22
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    1ed8:	6e 85       	ldd	r22, Y+14	; 0x0e
    1eda:	7f 85       	ldd	r23, Y+15	; 0x0f
    1edc:	88 89       	ldd	r24, Y+16	; 0x10
    1ede:	99 89       	ldd	r25, Y+17	; 0x11
    1ee0:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <_ZN8SdVolume13cacheRawBlockEmh>
    1ee4:	88 23       	and	r24, r24
    1ee6:	41 f0       	breq	.+16     	; 0x1ef8 <_ZN6SdFile13cacheDirEntryEh+0x28>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    1ee8:	8a 89       	ldd	r24, Y+18	; 0x12
    1eea:	20 e2       	ldi	r18, 0x20	; 32
    1eec:	82 9f       	mul	r24, r18
    1eee:	c0 01       	movw	r24, r0
    1ef0:	11 24       	eor	r1, r1
    1ef2:	88 57       	subi	r24, 0x78	; 120
    1ef4:	9c 4f       	sbci	r25, 0xFC	; 252
    1ef6:	02 c0       	rjmp	.+4      	; 0x1efc <_ZN6SdFile13cacheDirEntryEh+0x2c>
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	90 e0       	ldi	r25, 0x00	; 0
  return SdVolume::cacheBuffer_.dir + dirIndex_;
}
    1efc:	df 91       	pop	r29
    1efe:	cf 91       	pop	r28
    1f00:	08 95       	ret

00001f02 <_ZN6SdFile10make83NameEPKcPh>:
    }
  }
}
//------------------------------------------------------------------------------
// format directory name field from a 8.3 name string
uint8_t SdFile::make83Name(const char* str, uint8_t* name) {
    1f02:	fb 01       	movw	r30, r22
    1f04:	9b 01       	movw	r18, r22
    1f06:	25 5f       	subi	r18, 0xF5	; 245
    1f08:	3f 4f       	sbci	r19, 0xFF	; 255
  uint8_t c;
  uint8_t n = 7;  // max index for part before dot
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
    1f0a:	40 e2       	ldi	r20, 0x20	; 32
    1f0c:	41 93       	st	Z+, r20
    1f0e:	e2 17       	cp	r30, r18
    1f10:	f3 07       	cpc	r31, r19
    1f12:	e1 f7       	brne	.-8      	; 0x1f0c <_ZN6SdFile10make83NameEPKcPh+0xa>
    1f14:	dc 01       	movw	r26, r24
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	27 e0       	ldi	r18, 0x07	; 7
  i = 0;
  while ((c = *str++) != '\0') {
    1f1a:	8d 91       	ld	r24, X+
    1f1c:	88 23       	and	r24, r24
    1f1e:	19 f1       	breq	.+70     	; 0x1f66 <_ZN6SdFile10make83NameEPKcPh+0x64>
    if (c == '.') {
    1f20:	8e 32       	cpi	r24, 0x2E	; 46
    1f22:	19 f0       	breq	.+6      	; 0x1f2a <_ZN6SdFile10make83NameEPKcPh+0x28>
    1f24:	e8 e6       	ldi	r30, 0x68	; 104
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	08 c0       	rjmp	.+16     	; 0x1f3a <_ZN6SdFile10make83NameEPKcPh+0x38>
      if (n == 10) return false;  // only one dot allowed
    1f2a:	2a 30       	cpi	r18, 0x0A	; 10
    1f2c:	09 f1       	breq	.+66     	; 0x1f70 <_ZN6SdFile10make83NameEPKcPh+0x6e>
      n = 10;  // max index for full 8.3 name
      i = 8;   // place for extension
    1f2e:	98 e0       	ldi	r25, 0x08	; 8
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
      n = 10;  // max index for full 8.3 name
    1f30:	2a e0       	ldi	r18, 0x0A	; 10
    1f32:	f3 cf       	rjmp	.-26     	; 0x1f1a <_ZN6SdFile10make83NameEPKcPh+0x18>
    1f34:	31 96       	adiw	r30, 0x01	; 1
    } else {
      // illegal FAT characters
      uint8_t b;
#if defined(__AVR__)
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
      while ((b = pgm_read_byte(p++))) if (b == c) return false;
    1f36:	38 17       	cp	r19, r24
    1f38:	d9 f0       	breq	.+54     	; 0x1f70 <_ZN6SdFile10make83NameEPKcPh+0x6e>
    1f3a:	34 91       	lpm	r19, Z
    1f3c:	31 11       	cpse	r19, r1
    1f3e:	fa cf       	rjmp	.-12     	; 0x1f34 <_ZN6SdFile10make83NameEPKcPh+0x32>
      const uint8_t valid[] = "|<>^+=?/[];,*\"\\";
      const uint8_t *p = valid;
      while ((b = *p++)) if (b == c) return false;
#endif
      // check size and only allow ASCII printable characters
      if (i > n || c < 0X21 || c > 0X7E)return false;
    1f40:	29 17       	cp	r18, r25
    1f42:	b0 f0       	brcs	.+44     	; 0x1f70 <_ZN6SdFile10make83NameEPKcPh+0x6e>
    1f44:	3f ed       	ldi	r19, 0xDF	; 223
    1f46:	38 0f       	add	r19, r24
    1f48:	3e 35       	cpi	r19, 0x5E	; 94
    1f4a:	90 f4       	brcc	.+36     	; 0x1f70 <_ZN6SdFile10make83NameEPKcPh+0x6e>
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    1f4c:	31 e0       	ldi	r19, 0x01	; 1
    1f4e:	39 0f       	add	r19, r25
    1f50:	fb 01       	movw	r30, r22
    1f52:	e9 0f       	add	r30, r25
    1f54:	f1 1d       	adc	r31, r1
    1f56:	9f e9       	ldi	r25, 0x9F	; 159
    1f58:	98 0f       	add	r25, r24
    1f5a:	9a 31       	cpi	r25, 0x1A	; 26
    1f5c:	08 f4       	brcc	.+2      	; 0x1f60 <_ZN6SdFile10make83NameEPKcPh+0x5e>
    1f5e:	80 52       	subi	r24, 0x20	; 32
    1f60:	80 83       	st	Z, r24
    1f62:	93 2f       	mov	r25, r19
    1f64:	da cf       	rjmp	.-76     	; 0x1f1a <_ZN6SdFile10make83NameEPKcPh+0x18>
    }
  }
  // must have a file name, extension is optional
  return name[0] != ' ';
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	fb 01       	movw	r30, r22
    1f6a:	90 81       	ld	r25, Z
    1f6c:	90 32       	cpi	r25, 0x20	; 32
    1f6e:	09 f4       	brne	.+2      	; 0x1f72 <_ZN6SdFile10make83NameEPKcPh+0x70>
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
    1f70:	80 e0       	ldi	r24, 0x00	; 0
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    }
  }
  // must have a file name, extension is optional
  return name[0] != ' ';
}
    1f72:	08 95       	ret

00001f74 <_ZN6SdFile8openRootEP8SdVolume>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the FAT volume has not been initialized
 * or it a FAT12 volume.
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
    1f74:	0f 93       	push	r16
    1f76:	1f 93       	push	r17
    1f78:	cf 93       	push	r28
    1f7a:	df 93       	push	r29
  // error if file is already open
  if (isOpen()) return false;
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	25 81       	ldd	r18, Z+5	; 0x05
    1f80:	22 23       	and	r18, r18
    1f82:	11 f0       	breq	.+4      	; 0x1f88 <_ZN6SdFile8openRootEP8SdVolume+0x14>
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	42 c0       	rjmp	.+132    	; 0x200c <_ZN6SdFile8openRootEP8SdVolume+0x98>
    1f88:	8b 01       	movw	r16, r22
    1f8a:	ec 01       	movw	r28, r24
    1f8c:	fb 01       	movw	r30, r22
    1f8e:	87 89       	ldd	r24, Z+23	; 0x17

  if (vol->fatType() == 16) {
    1f90:	80 31       	cpi	r24, 0x10	; 16
    1f92:	b1 f4       	brne	.+44     	; 0x1fc0 <_ZN6SdFile8openRootEP8SdVolume+0x4c>
    type_ = FAT_FILE_TYPE_ROOT16;
    1f94:	82 e0       	ldi	r24, 0x02	; 2
    1f96:	8d 83       	std	Y+5, r24	; 0x05
    firstCluster_ = 0;
    1f98:	1f 8a       	std	Y+23, r1	; 0x17
    1f9a:	18 8e       	std	Y+24, r1	; 0x18
    1f9c:	19 8e       	std	Y+25, r1	; 0x19
    1f9e:	1a 8e       	std	Y+26, r1	; 0x1a
    1fa0:	80 8d       	ldd	r24, Z+24	; 0x18
    1fa2:	91 8d       	ldd	r25, Z+25	; 0x19
    fileSize_ = 32 * vol->rootDirEntryCount();
    1fa4:	a0 e0       	ldi	r26, 0x00	; 0
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	25 e0       	ldi	r18, 0x05	; 5
    1faa:	88 0f       	add	r24, r24
    1fac:	99 1f       	adc	r25, r25
    1fae:	aa 1f       	adc	r26, r26
    1fb0:	bb 1f       	adc	r27, r27
    1fb2:	2a 95       	dec	r18
    1fb4:	d1 f7       	brne	.-12     	; 0x1faa <_ZN6SdFile8openRootEP8SdVolume+0x36>
    1fb6:	8b 8b       	std	Y+19, r24	; 0x13
    1fb8:	9c 8b       	std	Y+20, r25	; 0x14
    1fba:	ad 8b       	std	Y+21, r26	; 0x15
    1fbc:	be 8b       	std	Y+22, r27	; 0x16
    1fbe:	15 c0       	rjmp	.+42     	; 0x1fea <_ZN6SdFile8openRootEP8SdVolume+0x76>
  } else if (vol->fatType() == 32) {
    1fc0:	80 32       	cpi	r24, 0x20	; 32
    1fc2:	01 f7       	brne	.-64     	; 0x1f84 <_ZN6SdFile8openRootEP8SdVolume+0x10>
    type_ = FAT_FILE_TYPE_ROOT32;
    1fc4:	83 e0       	ldi	r24, 0x03	; 3
    1fc6:	8d 83       	std	Y+5, r24	; 0x05
  uint8_t fatType(void) const {return fatType_;}
  /** \return The number of entries in the root directory for FAT16 volumes. */
  uint32_t rootDirEntryCount(void) const {return rootDirEntryCount_;}
  /** \return The logical block number for the start of the root directory
       on FAT16 volumes or the first cluster number on FAT32 volumes. */
  uint32_t rootDirStart(void) const {return rootDirStart_;}
    1fc8:	fb 01       	movw	r30, r22
    1fca:	42 8d       	ldd	r20, Z+26	; 0x1a
    1fcc:	53 8d       	ldd	r21, Z+27	; 0x1b
    1fce:	64 8d       	ldd	r22, Z+28	; 0x1c
    1fd0:	75 8d       	ldd	r23, Z+29	; 0x1d
    firstCluster_ = vol->rootDirStart();
    1fd2:	4f 8b       	std	Y+23, r20	; 0x17
    1fd4:	58 8f       	std	Y+24, r21	; 0x18
    1fd6:	69 8f       	std	Y+25, r22	; 0x19
    1fd8:	7a 8f       	std	Y+26, r23	; 0x1a
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    1fda:	9e 01       	movw	r18, r28
    1fdc:	2d 5e       	subi	r18, 0xED	; 237
    1fde:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe0:	c8 01       	movw	r24, r16
    1fe2:	0e 94 28 17 	call	0x2e50	; 0x2e50 <_ZNK8SdVolume9chainSizeEmPm>
    1fe6:	88 23       	and	r24, r24
    1fe8:	69 f2       	breq	.-102    	; 0x1f84 <_ZN6SdFile8openRootEP8SdVolume+0x10>
  } else {
    // volume is not initialized or FAT12
    return false;
  }
  vol_ = vol;
    1fea:	1c 8f       	std	Y+28, r17	; 0x1c
    1fec:	0b 8f       	std	Y+27, r16	; 0x1b
  // read only
  flags_ = O_READ;
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	8c 83       	std	Y+4, r24	; 0x04

  // set to start of file
  curCluster_ = 0;
    1ff2:	1e 82       	std	Y+6, r1	; 0x06
    1ff4:	1f 82       	std	Y+7, r1	; 0x07
    1ff6:	18 86       	std	Y+8, r1	; 0x08
    1ff8:	19 86       	std	Y+9, r1	; 0x09
  curPosition_ = 0;
    1ffa:	1a 86       	std	Y+10, r1	; 0x0a
    1ffc:	1b 86       	std	Y+11, r1	; 0x0b
    1ffe:	1c 86       	std	Y+12, r1	; 0x0c
    2000:	1d 86       	std	Y+13, r1	; 0x0d

  // root has no directory entry
  dirBlock_ = 0;
    2002:	1e 86       	std	Y+14, r1	; 0x0e
    2004:	1f 86       	std	Y+15, r1	; 0x0f
    2006:	18 8a       	std	Y+16, r1	; 0x10
    2008:	19 8a       	std	Y+17, r1	; 0x11
  dirIndex_ = 0;
    200a:	1a 8a       	std	Y+18, r1	; 0x12
  return true;
}
    200c:	df 91       	pop	r29
    200e:	cf 91       	pop	r28
    2010:	1f 91       	pop	r17
    2012:	0f 91       	pop	r16
    2014:	08 95       	ret

00002016 <_ZN6SdFile4readEPvj>:
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int16_t SdFile::read(void* buf, uint16_t nbyte) {
    2016:	2f 92       	push	r2
    2018:	3f 92       	push	r3
    201a:	4f 92       	push	r4
    201c:	5f 92       	push	r5
    201e:	6f 92       	push	r6
    2020:	7f 92       	push	r7
    2022:	8f 92       	push	r8
    2024:	9f 92       	push	r9
    2026:	af 92       	push	r10
    2028:	bf 92       	push	r11
    202a:	cf 92       	push	r12
    202c:	df 92       	push	r13
    202e:	ef 92       	push	r14
    2030:	ff 92       	push	r15
    2032:	0f 93       	push	r16
    2034:	1f 93       	push	r17
    2036:	cf 93       	push	r28
    2038:	df 93       	push	r29
    203a:	ec 01       	movw	r28, r24
    203c:	5b 01       	movw	r10, r22
    203e:	4a 01       	movw	r8, r20
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    2040:	8d 81       	ldd	r24, Y+5	; 0x05
    2042:	81 11       	cpse	r24, r1
    2044:	03 c0       	rjmp	.+6      	; 0x204c <_ZN6SdFile4readEPvj+0x36>
    2046:	8f ef       	ldi	r24, 0xFF	; 255
    2048:	9f ef       	ldi	r25, 0xFF	; 255
    204a:	d7 c0       	rjmp	.+430    	; 0x21fa <_ZN6SdFile4readEPvj+0x1e4>
    204c:	8c 81       	ldd	r24, Y+4	; 0x04
    204e:	80 ff       	sbrs	r24, 0
    2050:	fa cf       	rjmp	.-12     	; 0x2046 <_ZN6SdFile4readEPvj+0x30>

  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;
    2052:	4b 88       	ldd	r4, Y+19	; 0x13
    2054:	5c 88       	ldd	r5, Y+20	; 0x14
    2056:	6d 88       	ldd	r6, Y+21	; 0x15
    2058:	7e 88       	ldd	r7, Y+22	; 0x16
    205a:	4a 85       	ldd	r20, Y+10	; 0x0a
    205c:	5b 85       	ldd	r21, Y+11	; 0x0b
    205e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2060:	7d 85       	ldd	r23, Y+13	; 0x0d
    2062:	c4 01       	movw	r24, r8
    2064:	a0 e0       	ldi	r26, 0x00	; 0
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	93 01       	movw	r18, r6
    206a:	82 01       	movw	r16, r4
    206c:	04 1b       	sub	r16, r20
    206e:	15 0b       	sbc	r17, r21
    2070:	26 0b       	sbc	r18, r22
    2072:	37 0b       	sbc	r19, r23
    2074:	08 17       	cp	r16, r24
    2076:	19 07       	cpc	r17, r25
    2078:	2a 07       	cpc	r18, r26
    207a:	3b 07       	cpc	r19, r27
    207c:	18 f4       	brcc	.+6      	; 0x2084 <_ZN6SdFile4readEPvj+0x6e>
    207e:	42 01       	movw	r8, r4
    2080:	84 1a       	sub	r8, r20
    2082:	95 0a       	sbc	r9, r21

  // amount left to read
  uint16_t toRead = nbyte;
    2084:	24 01       	movw	r4, r8
        if (curPosition_ == 0) {
          // use first cluster in file
          curCluster_ = firstCluster_;
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
    2086:	1e 01       	movw	r2, r28
    2088:	26 e0       	ldi	r18, 0x06	; 6
    208a:	22 0e       	add	r2, r18
    208c:	31 1c       	adc	r3, r1
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint16_t toRead = nbyte;
  while (toRead > 0) {
    208e:	41 14       	cp	r4, r1
    2090:	51 04       	cpc	r5, r1
    2092:	09 f4       	brne	.+2      	; 0x2096 <_ZN6SdFile4readEPvj+0x80>
    2094:	7e c0       	rjmp	.+252    	; 0x2192 <_ZN6SdFile4readEPvj+0x17c>
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    2096:	4a 85       	ldd	r20, Y+10	; 0x0a
    2098:	5b 85       	ldd	r21, Y+11	; 0x0b
    209a:	6c 85       	ldd	r22, Y+12	; 0x0c
    209c:	7d 85       	ldd	r23, Y+13	; 0x0d
    209e:	6a 01       	movw	r12, r20
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	d8 22       	and	r13, r24
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    20a4:	ed 81       	ldd	r30, Y+5	; 0x05
    20a6:	8a 01       	movw	r16, r20
    20a8:	9b 01       	movw	r18, r22
    20aa:	89 e0       	ldi	r24, 0x09	; 9
    20ac:	36 95       	lsr	r19
    20ae:	27 95       	ror	r18
    20b0:	17 95       	ror	r17
    20b2:	07 95       	ror	r16
    20b4:	8a 95       	dec	r24
    20b6:	d1 f7       	brne	.-12     	; 0x20ac <_ZN6SdFile4readEPvj+0x96>
    20b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20bc:	e2 30       	cpi	r30, 0x02	; 2
    20be:	61 f4       	brne	.+24     	; 0x20d8 <_ZN6SdFile4readEPvj+0xc2>
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    20c0:	fc 01       	movw	r30, r24
    20c2:	82 8d       	ldd	r24, Z+26	; 0x1a
    20c4:	93 8d       	ldd	r25, Z+27	; 0x1b
    20c6:	a4 8d       	ldd	r26, Z+28	; 0x1c
    20c8:	b5 8d       	ldd	r27, Z+29	; 0x1d
    20ca:	bc 01       	movw	r22, r24
    20cc:	cd 01       	movw	r24, r26
    20ce:	60 0f       	add	r22, r16
    20d0:	71 1f       	adc	r23, r17
    20d2:	82 1f       	adc	r24, r18
    20d4:	93 1f       	adc	r25, r19
    20d6:	3f c0       	rjmp	.+126    	; 0x2156 <_ZN6SdFile4readEPvj+0x140>
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    20d8:	fc 01       	movw	r30, r24
    20da:	74 80       	ldd	r7, Z+4	; 0x04
    20dc:	7a 94       	dec	r7
    20de:	70 22       	and	r7, r16
    } else {
      uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
      if (offset == 0 && blockOfCluster == 0) {
    20e0:	c1 14       	cp	r12, r1
    20e2:	d1 04       	cpc	r13, r1
    20e4:	c9 f4       	brne	.+50     	; 0x2118 <_ZN6SdFile4readEPvj+0x102>
    20e6:	71 10       	cpse	r7, r1
    20e8:	17 c0       	rjmp	.+46     	; 0x2118 <_ZN6SdFile4readEPvj+0x102>
        // start of new cluster
        if (curPosition_ == 0) {
    20ea:	45 2b       	or	r20, r21
    20ec:	46 2b       	or	r20, r22
    20ee:	47 2b       	or	r20, r23
    20f0:	49 f4       	brne	.+18     	; 0x2104 <_ZN6SdFile4readEPvj+0xee>
          // use first cluster in file
          curCluster_ = firstCluster_;
    20f2:	8f 89       	ldd	r24, Y+23	; 0x17
    20f4:	98 8d       	ldd	r25, Y+24	; 0x18
    20f6:	a9 8d       	ldd	r26, Y+25	; 0x19
    20f8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    20fa:	8e 83       	std	Y+6, r24	; 0x06
    20fc:	9f 83       	std	Y+7, r25	; 0x07
    20fe:	a8 87       	std	Y+8, r26	; 0x08
    2100:	b9 87       	std	Y+9, r27	; 0x09
    2102:	0a c0       	rjmp	.+20     	; 0x2118 <_ZN6SdFile4readEPvj+0x102>
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
    2104:	4e 81       	ldd	r20, Y+6	; 0x06
    2106:	5f 81       	ldd	r21, Y+7	; 0x07
    2108:	68 85       	ldd	r22, Y+8	; 0x08
    210a:	79 85       	ldd	r23, Y+9	; 0x09
    210c:	91 01       	movw	r18, r2
    210e:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <_ZNK8SdVolume6fatGetEmPm>
    2112:	88 23       	and	r24, r24
    2114:	09 f4       	brne	.+2      	; 0x2118 <_ZN6SdFile4readEPvj+0x102>
    2116:	97 cf       	rjmp	.-210    	; 0x2046 <_ZN6SdFile4readEPvj+0x30>
        }
      }
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    2118:	eb 8d       	ldd	r30, Y+27	; 0x1b
    211a:	fc 8d       	ldd	r31, Y+28	; 0x1c
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    211c:	8e 81       	ldd	r24, Y+6	; 0x06
    211e:	9f 81       	ldd	r25, Y+7	; 0x07
    2120:	a8 85       	ldd	r26, Y+8	; 0x08
    2122:	b9 85       	ldd	r27, Y+9	; 0x09
    2124:	02 97       	sbiw	r24, 0x02	; 2
    2126:	a1 09       	sbc	r26, r1
    2128:	b1 09       	sbc	r27, r1
    212a:	05 84       	ldd	r0, Z+13	; 0x0d
    212c:	04 c0       	rjmp	.+8      	; 0x2136 <_ZN6SdFile4readEPvj+0x120>
    212e:	88 0f       	add	r24, r24
    2130:	99 1f       	adc	r25, r25
    2132:	aa 1f       	adc	r26, r26
    2134:	bb 1f       	adc	r27, r27
    2136:	0a 94       	dec	r0
    2138:	d2 f7       	brpl	.-12     	; 0x212e <_ZN6SdFile4readEPvj+0x118>
    213a:	46 85       	ldd	r20, Z+14	; 0x0e
    213c:	57 85       	ldd	r21, Z+15	; 0x0f
    213e:	60 89       	ldd	r22, Z+16	; 0x10
    2140:	71 89       	ldd	r23, Z+17	; 0x11
    2142:	84 0f       	add	r24, r20
    2144:	95 1f       	adc	r25, r21
    2146:	a6 1f       	adc	r26, r22
    2148:	b7 1f       	adc	r27, r23
    214a:	bc 01       	movw	r22, r24
    214c:	cd 01       	movw	r24, r26
    214e:	67 0d       	add	r22, r7
    2150:	71 1d       	adc	r23, r1
    2152:	81 1d       	adc	r24, r1
    2154:	91 1d       	adc	r25, r1
    }
    uint16_t n = toRead;

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	32 e0       	ldi	r19, 0x02	; 2
    215a:	2c 19       	sub	r18, r12
    215c:	3d 09       	sbc	r19, r13
    215e:	32 01       	movw	r6, r4
    2160:	24 15       	cp	r18, r4
    2162:	35 05       	cpc	r19, r5
    2164:	08 f4       	brcc	.+2      	; 0x2168 <_ZN6SdFile4readEPvj+0x152>
    2166:	39 01       	movw	r6, r18
   */
  uint8_t type(void) const {return type_;}
  uint8_t truncate(uint32_t size);
  /** \return Unbuffered read flag. */
  uint8_t unbufferedRead(void) const {
    return flags_ & F_FILE_UNBUFFERED_READ;
    2168:	2c 81       	ldd	r18, Y+4	; 0x04

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) &&
    216a:	26 fd       	sbrc	r18, 6
    216c:	04 c0       	rjmp	.+8      	; 0x2176 <_ZN6SdFile4readEPvj+0x160>
    216e:	61 14       	cp	r6, r1
    2170:	f2 e0       	ldi	r31, 0x02	; 2
    2172:	7f 06       	cpc	r7, r31
    2174:	79 f5       	brne	.+94     	; 0x21d4 <_ZN6SdFile4readEPvj+0x1be>
    2176:	00 91 07 01 	lds	r16, 0x0107
    217a:	10 91 08 01 	lds	r17, 0x0108
    217e:	20 91 09 01 	lds	r18, 0x0109
    2182:	30 91 0a 01 	lds	r19, 0x010A
    2186:	60 17       	cp	r22, r16
    2188:	71 07       	cpc	r23, r17
    218a:	82 07       	cpc	r24, r18
    218c:	93 07       	cpc	r25, r19
    218e:	19 f4       	brne	.+6      	; 0x2196 <_ZN6SdFile4readEPvj+0x180>
    2190:	21 c0       	rjmp	.+66     	; 0x21d4 <_ZN6SdFile4readEPvj+0x1be>
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
    2192:	c4 01       	movw	r24, r8
    2194:	32 c0       	rjmp	.+100    	; 0x21fa <_ZN6SdFile4readEPvj+0x1e4>
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);}
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
    2196:	75 01       	movw	r14, r10
    2198:	83 01       	movw	r16, r6
    219a:	96 01       	movw	r18, r12
    219c:	ab 01       	movw	r20, r22
    219e:	bc 01       	movw	r22, r24
    21a0:	80 91 86 03 	lds	r24, 0x0386
    21a4:	90 91 87 03 	lds	r25, 0x0387
    21a8:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <_ZN7Sd2Card8readDataEmjjPh>
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) &&
      block != SdVolume::cacheBlockNumber_) {
      if (!vol_->readData(block, offset, n, dst)) return -1;
    21ac:	88 23       	and	r24, r24
    21ae:	09 f4       	brne	.+2      	; 0x21b2 <_ZN6SdFile4readEPvj+0x19c>
    21b0:	4a cf       	rjmp	.-364    	; 0x2046 <_ZN6SdFile4readEPvj+0x30>
    21b2:	a6 0c       	add	r10, r6
    21b4:	b7 1c       	adc	r11, r7
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    21b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    21b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    21ba:	ac 85       	ldd	r26, Y+12	; 0x0c
    21bc:	bd 85       	ldd	r27, Y+13	; 0x0d
    21be:	86 0d       	add	r24, r6
    21c0:	97 1d       	adc	r25, r7
    21c2:	a1 1d       	adc	r26, r1
    21c4:	b1 1d       	adc	r27, r1
    21c6:	8a 87       	std	Y+10, r24	; 0x0a
    21c8:	9b 87       	std	Y+11, r25	; 0x0b
    21ca:	ac 87       	std	Y+12, r26	; 0x0c
    21cc:	bd 87       	std	Y+13, r27	; 0x0d
    toRead -= n;
    21ce:	46 18       	sub	r4, r6
    21d0:	57 08       	sbc	r5, r7
    21d2:	5d cf       	rjmp	.-326    	; 0x208e <_ZN6SdFile4readEPvj+0x78>
      block != SdVolume::cacheBlockNumber_) {
      if (!vol_->readData(block, offset, n, dst)) return -1;
      dst += n;
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
    21d4:	40 e0       	ldi	r20, 0x00	; 0
    21d6:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <_ZN8SdVolume13cacheRawBlockEmh>
    21da:	88 23       	and	r24, r24
    21dc:	09 f4       	brne	.+2      	; 0x21e0 <_ZN6SdFile4readEPvj+0x1ca>
    21de:	33 cf       	rjmp	.-410    	; 0x2046 <_ZN6SdFile4readEPvj+0x30>
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
    21e0:	f6 01       	movw	r30, r12
    21e2:	e8 57       	subi	r30, 0x78	; 120
    21e4:	fc 4f       	sbci	r31, 0xFC	; 252
    21e6:	d5 01       	movw	r26, r10
      uint8_t* end = src + n;
    21e8:	cf 01       	movw	r24, r30
    21ea:	86 0d       	add	r24, r6
    21ec:	97 1d       	adc	r25, r7
      while (src != end) *dst++ = *src++;
    21ee:	e8 17       	cp	r30, r24
    21f0:	f9 07       	cpc	r31, r25
    21f2:	f9 f2       	breq	.-66     	; 0x21b2 <_ZN6SdFile4readEPvj+0x19c>
    21f4:	21 91       	ld	r18, Z+
    21f6:	2d 93       	st	X+, r18
    21f8:	fa cf       	rjmp	.-12     	; 0x21ee <_ZN6SdFile4readEPvj+0x1d8>
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
}
    21fa:	df 91       	pop	r29
    21fc:	cf 91       	pop	r28
    21fe:	1f 91       	pop	r17
    2200:	0f 91       	pop	r16
    2202:	ff 90       	pop	r15
    2204:	ef 90       	pop	r14
    2206:	df 90       	pop	r13
    2208:	cf 90       	pop	r12
    220a:	bf 90       	pop	r11
    220c:	af 90       	pop	r10
    220e:	9f 90       	pop	r9
    2210:	8f 90       	pop	r8
    2212:	7f 90       	pop	r7
    2214:	6f 90       	pop	r6
    2216:	5f 90       	pop	r5
    2218:	4f 90       	pop	r4
    221a:	3f 90       	pop	r3
    221c:	2f 90       	pop	r2
    221e:	08 95       	ret

00002220 <_ZN6SdFile12readDirCacheEv>:
  return n < 0 ? -1 : 0;
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
    2220:	ff 92       	push	r15
    2222:	0f 93       	push	r16
    2224:	1f 93       	push	r17
    2226:	cf 93       	push	r28
    2228:	df 93       	push	r29
    222a:	1f 92       	push	r1
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
  // error if not directory
  if (!isDir()) return NULL;
    2230:	fc 01       	movw	r30, r24
    2232:	25 81       	ldd	r18, Z+5	; 0x05
    2234:	22 30       	cpi	r18, 0x02	; 2
    2236:	18 f4       	brcc	.+6      	; 0x223e <_ZN6SdFile12readDirCacheEv+0x1e>
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	33 c0       	rjmp	.+102    	; 0x22a4 <_ZN6SdFile12readDirCacheEv+0x84>
    223e:	8c 01       	movw	r16, r24

  // index of entry in cache
  uint8_t i = (curPosition_ >> 5) & 0XF;
    2240:	fc 01       	movw	r30, r24
    2242:	42 85       	ldd	r20, Z+10	; 0x0a
    2244:	53 85       	ldd	r21, Z+11	; 0x0b
    2246:	64 85       	ldd	r22, Z+12	; 0x0c
    2248:	75 85       	ldd	r23, Z+13	; 0x0d
    224a:	85 e0       	ldi	r24, 0x05	; 5
    224c:	76 95       	lsr	r23
    224e:	67 95       	ror	r22
    2250:	57 95       	ror	r21
    2252:	47 95       	ror	r20
    2254:	8a 95       	dec	r24
    2256:	d1 f7       	brne	.-12     	; 0x224c <_ZN6SdFile12readDirCacheEv+0x2c>
    2258:	f4 2f       	mov	r31, r20
    225a:	ff 70       	andi	r31, 0x0F	; 15
    225c:	ff 2e       	mov	r15, r31
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    225e:	41 e0       	ldi	r20, 0x01	; 1
    2260:	50 e0       	ldi	r21, 0x00	; 0
    2262:	be 01       	movw	r22, r28
    2264:	6f 5f       	subi	r22, 0xFF	; 255
    2266:	7f 4f       	sbci	r23, 0xFF	; 255
    2268:	c8 01       	movw	r24, r16
    226a:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN6SdFile4readEPvj>
    226e:	01 97       	sbiw	r24, 0x01	; 1
    2270:	19 f4       	brne	.+6      	; 0x2278 <_ZN6SdFile12readDirCacheEv+0x58>
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	02 c0       	rjmp	.+4      	; 0x227c <_ZN6SdFile12readDirCacheEv+0x5c>
    2278:	8f ef       	ldi	r24, 0xFF	; 255
    227a:	9f ef       	ldi	r25, 0xFF	; 255

  // use read to locate and cache block
  if (read() < 0) return NULL;
    227c:	01 96       	adiw	r24, 0x01	; 1
    227e:	e1 f2       	breq	.-72     	; 0x2238 <_ZN6SdFile12readDirCacheEv+0x18>

  // advance to next entry
  curPosition_ += 31;
    2280:	f8 01       	movw	r30, r16
    2282:	82 85       	ldd	r24, Z+10	; 0x0a
    2284:	93 85       	ldd	r25, Z+11	; 0x0b
    2286:	a4 85       	ldd	r26, Z+12	; 0x0c
    2288:	b5 85       	ldd	r27, Z+13	; 0x0d
    228a:	4f 96       	adiw	r24, 0x1f	; 31
    228c:	a1 1d       	adc	r26, r1
    228e:	b1 1d       	adc	r27, r1
    2290:	82 87       	std	Z+10, r24	; 0x0a
    2292:	93 87       	std	Z+11, r25	; 0x0b
    2294:	a4 87       	std	Z+12, r26	; 0x0c
    2296:	b5 87       	std	Z+13, r27	; 0x0d

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
    2298:	f0 e2       	ldi	r31, 0x20	; 32
    229a:	ff 9e       	mul	r15, r31
    229c:	c0 01       	movw	r24, r0
    229e:	11 24       	eor	r1, r1
    22a0:	88 57       	subi	r24, 0x78	; 120
    22a2:	9c 4f       	sbci	r25, 0xFC	; 252
}
    22a4:	0f 90       	pop	r0
    22a6:	df 91       	pop	r29
    22a8:	cf 91       	pop	r28
    22aa:	1f 91       	pop	r17
    22ac:	0f 91       	pop	r16
    22ae:	ff 90       	pop	r15
    22b0:	08 95       	ret

000022b2 <_ZN6SdFile7seekSetEm>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    22b2:	8f 92       	push	r8
    22b4:	9f 92       	push	r9
    22b6:	af 92       	push	r10
    22b8:	bf 92       	push	r11
    22ba:	cf 92       	push	r12
    22bc:	df 92       	push	r13
    22be:	ef 92       	push	r14
    22c0:	ff 92       	push	r15
    22c2:	0f 93       	push	r16
    22c4:	1f 93       	push	r17
    22c6:	cf 93       	push	r28
    22c8:	df 93       	push	r29
    22ca:	ec 01       	movw	r28, r24
    22cc:	8d 81       	ldd	r24, Y+5	; 0x05
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    22ce:	81 11       	cpse	r24, r1
    22d0:	02 c0       	rjmp	.+4      	; 0x22d6 <_ZN6SdFile7seekSetEm+0x24>
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	77 c0       	rjmp	.+238    	; 0x23c4 <_ZN6SdFile7seekSetEm+0x112>
    22d6:	0b 89       	ldd	r16, Y+19	; 0x13
    22d8:	1c 89       	ldd	r17, Y+20	; 0x14
    22da:	2d 89       	ldd	r18, Y+21	; 0x15
    22dc:	3e 89       	ldd	r19, Y+22	; 0x16
    22de:	04 17       	cp	r16, r20
    22e0:	15 07       	cpc	r17, r21
    22e2:	26 07       	cpc	r18, r22
    22e4:	37 07       	cpc	r19, r23
    22e6:	a8 f3       	brcs	.-22     	; 0x22d2 <_ZN6SdFile7seekSetEm+0x20>
    22e8:	6a 01       	movw	r12, r20
    22ea:	7b 01       	movw	r14, r22

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    22ec:	82 30       	cpi	r24, 0x02	; 2
    22ee:	29 f4       	brne	.+10     	; 0x22fa <_ZN6SdFile7seekSetEm+0x48>
    curPosition_ = pos;
    22f0:	ca 86       	std	Y+10, r12	; 0x0a
    22f2:	db 86       	std	Y+11, r13	; 0x0b
    22f4:	ec 86       	std	Y+12, r14	; 0x0c
    22f6:	fd 86       	std	Y+13, r15	; 0x0d
    22f8:	0d c0       	rjmp	.+26     	; 0x2314 <_ZN6SdFile7seekSetEm+0x62>
    return true;
  }
  if (pos == 0) {
    22fa:	c1 14       	cp	r12, r1
    22fc:	d1 04       	cpc	r13, r1
    22fe:	e1 04       	cpc	r14, r1
    2300:	f1 04       	cpc	r15, r1
    2302:	51 f4       	brne	.+20     	; 0x2318 <_ZN6SdFile7seekSetEm+0x66>
    // set position to start of file
    curCluster_ = 0;
    2304:	1e 82       	std	Y+6, r1	; 0x06
    2306:	1f 82       	std	Y+7, r1	; 0x07
    2308:	18 86       	std	Y+8, r1	; 0x08
    230a:	19 86       	std	Y+9, r1	; 0x09
    curPosition_ = 0;
    230c:	1a 86       	std	Y+10, r1	; 0x0a
    230e:	1b 86       	std	Y+11, r1	; 0x0b
    2310:	1c 86       	std	Y+12, r1	; 0x0c
    2312:	1d 86       	std	Y+13, r1	; 0x0d
    return true;
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	56 c0       	rjmp	.+172    	; 0x23c4 <_ZN6SdFile7seekSetEm+0x112>
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    2318:	8a 84       	ldd	r8, Y+10	; 0x0a
    231a:	9b 84       	ldd	r9, Y+11	; 0x0b
    231c:	ac 84       	ldd	r10, Y+12	; 0x0c
    231e:	bd 84       	ldd	r11, Y+13	; 0x0d
    2320:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2322:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2324:	25 85       	ldd	r18, Z+13	; 0x0d
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	27 5f       	subi	r18, 0xF7	; 247
    232a:	3f 4f       	sbci	r19, 0xFF	; 255
    232c:	b5 01       	movw	r22, r10
    232e:	a4 01       	movw	r20, r8
    2330:	41 50       	subi	r20, 0x01	; 1
    2332:	51 09       	sbc	r21, r1
    2334:	61 09       	sbc	r22, r1
    2336:	71 09       	sbc	r23, r1
    2338:	02 2e       	mov	r0, r18
    233a:	04 c0       	rjmp	.+8      	; 0x2344 <_ZN6SdFile7seekSetEm+0x92>
    233c:	76 95       	lsr	r23
    233e:	67 95       	ror	r22
    2340:	57 95       	ror	r21
    2342:	47 95       	ror	r20
    2344:	0a 94       	dec	r0
    2346:	d2 f7       	brpl	.-12     	; 0x233c <_ZN6SdFile7seekSetEm+0x8a>
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    2348:	d7 01       	movw	r26, r14
    234a:	c6 01       	movw	r24, r12
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	a1 09       	sbc	r26, r1
    2350:	b1 09       	sbc	r27, r1
    2352:	04 c0       	rjmp	.+8      	; 0x235c <_ZN6SdFile7seekSetEm+0xaa>
    2354:	b6 95       	lsr	r27
    2356:	a7 95       	ror	r26
    2358:	97 95       	ror	r25
    235a:	87 95       	ror	r24
    235c:	2a 95       	dec	r18
    235e:	d2 f7       	brpl	.-12     	; 0x2354 <_ZN6SdFile7seekSetEm+0xa2>

  if (nNew < nCur || curPosition_ == 0) {
    2360:	84 17       	cp	r24, r20
    2362:	95 07       	cpc	r25, r21
    2364:	a6 07       	cpc	r26, r22
    2366:	b7 07       	cpc	r27, r23
    2368:	20 f0       	brcs	.+8      	; 0x2372 <_ZN6SdFile7seekSetEm+0xc0>
    236a:	89 28       	or	r8, r9
    236c:	8a 28       	or	r8, r10
    236e:	8b 28       	or	r8, r11
    2370:	49 f4       	brne	.+18     	; 0x2384 <_ZN6SdFile7seekSetEm+0xd2>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    2372:	4f 89       	ldd	r20, Y+23	; 0x17
    2374:	58 8d       	ldd	r21, Y+24	; 0x18
    2376:	69 8d       	ldd	r22, Y+25	; 0x19
    2378:	7a 8d       	ldd	r23, Y+26	; 0x1a
    237a:	4e 83       	std	Y+6, r20	; 0x06
    237c:	5f 83       	std	Y+7, r21	; 0x07
    237e:	68 87       	std	Y+8, r22	; 0x08
    2380:	79 87       	std	Y+9, r23	; 0x09
    2382:	04 c0       	rjmp	.+8      	; 0x238c <_ZN6SdFile7seekSetEm+0xda>
  } else {
    // advance from curPosition
    nNew -= nCur;
    2384:	84 1b       	sub	r24, r20
    2386:	95 0b       	sbc	r25, r21
    2388:	a6 0b       	sbc	r26, r22
    238a:	b7 0b       	sbc	r27, r23
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    238c:	4c 01       	movw	r8, r24
    238e:	5d 01       	movw	r10, r26
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    2390:	8e 01       	movw	r16, r28
    2392:	0a 5f       	subi	r16, 0xFA	; 250
    2394:	1f 4f       	sbci	r17, 0xFF	; 255
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    2396:	81 14       	cp	r8, r1
    2398:	91 04       	cpc	r9, r1
    239a:	a1 04       	cpc	r10, r1
    239c:	b1 04       	cpc	r11, r1
    239e:	09 f4       	brne	.+2      	; 0x23a2 <_ZN6SdFile7seekSetEm+0xf0>
    23a0:	a7 cf       	rjmp	.-178    	; 0x22f0 <_ZN6SdFile7seekSetEm+0x3e>
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    23a2:	4e 81       	ldd	r20, Y+6	; 0x06
    23a4:	5f 81       	ldd	r21, Y+7	; 0x07
    23a6:	68 85       	ldd	r22, Y+8	; 0x08
    23a8:	79 85       	ldd	r23, Y+9	; 0x09
    23aa:	98 01       	movw	r18, r16
    23ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23b0:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <_ZNK8SdVolume6fatGetEmPm>
    23b4:	91 e0       	ldi	r25, 0x01	; 1
    23b6:	89 1a       	sub	r8, r25
    23b8:	91 08       	sbc	r9, r1
    23ba:	a1 08       	sbc	r10, r1
    23bc:	b1 08       	sbc	r11, r1
    23be:	81 11       	cpse	r24, r1
    23c0:	ea cf       	rjmp	.-44     	; 0x2396 <_ZN6SdFile7seekSetEm+0xe4>
    23c2:	87 cf       	rjmp	.-242    	; 0x22d2 <_ZN6SdFile7seekSetEm+0x20>
  }
  curPosition_ = pos;
  return true;
}
    23c4:	df 91       	pop	r29
    23c6:	cf 91       	pop	r28
    23c8:	1f 91       	pop	r17
    23ca:	0f 91       	pop	r16
    23cc:	ff 90       	pop	r15
    23ce:	ef 90       	pop	r14
    23d0:	df 90       	pop	r13
    23d2:	cf 90       	pop	r12
    23d4:	bf 90       	pop	r11
    23d6:	af 90       	pop	r10
    23d8:	9f 90       	pop	r9
    23da:	8f 90       	pop	r8
    23dc:	08 95       	ret

000023de <_ZN6SdFile4syncEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    23de:	0f 93       	push	r16
    23e0:	1f 93       	push	r17
    23e2:	cf 93       	push	r28
    23e4:	df 93       	push	r29
    23e6:	ec 01       	movw	r28, r24
  // only allow open files and directories
  if (!isOpen()) return false;
    23e8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ea:	88 23       	and	r24, r24
    23ec:	c9 f1       	breq	.+114    	; 0x2460 <_ZN6SdFile4syncEv+0x82>

  if (flags_ & F_FILE_DIR_DIRTY) {
    23ee:	8c 81       	ldd	r24, Y+4	; 0x04
    23f0:	87 ff       	sbrs	r24, 7
    23f2:	30 c0       	rjmp	.+96     	; 0x2454 <_ZN6SdFile4syncEv+0x76>
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    23f4:	61 e0       	ldi	r22, 0x01	; 1
    23f6:	ce 01       	movw	r24, r28
    23f8:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <_ZN6SdFile13cacheDirEntryEh>
    23fc:	8c 01       	movw	r16, r24
    if (!d) return false;
    23fe:	89 2b       	or	r24, r25
    2400:	79 f1       	breq	.+94     	; 0x2460 <_ZN6SdFile4syncEv+0x82>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    2402:	8d 81       	ldd	r24, Y+5	; 0x05
    2404:	82 30       	cpi	r24, 0x02	; 2
    2406:	48 f4       	brcc	.+18     	; 0x241a <_ZN6SdFile4syncEv+0x3c>
    2408:	8b 89       	ldd	r24, Y+19	; 0x13
    240a:	9c 89       	ldd	r25, Y+20	; 0x14
    240c:	ad 89       	ldd	r26, Y+21	; 0x15
    240e:	be 89       	ldd	r27, Y+22	; 0x16
    2410:	f8 01       	movw	r30, r16
    2412:	84 8f       	std	Z+28, r24	; 0x1c
    2414:	95 8f       	std	Z+29, r25	; 0x1d
    2416:	a6 8f       	std	Z+30, r26	; 0x1e
    2418:	b7 8f       	std	Z+31, r27	; 0x1f

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    241a:	8f 89       	ldd	r24, Y+23	; 0x17
    241c:	98 8d       	ldd	r25, Y+24	; 0x18
    241e:	a9 8d       	ldd	r26, Y+25	; 0x19
    2420:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2422:	f8 01       	movw	r30, r16
    2424:	93 8f       	std	Z+27, r25	; 0x1b
    2426:	82 8f       	std	Z+26, r24	; 0x1a
    d->firstClusterHigh = firstCluster_ >> 16;
    2428:	b5 8b       	std	Z+21, r27	; 0x15
    242a:	a4 8b       	std	Z+20, r26	; 0x14

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    242c:	e0 91 7f 03 	lds	r30, 0x037F
    2430:	f0 91 80 03 	lds	r31, 0x0380
    2434:	30 97       	sbiw	r30, 0x00	; 0
    2436:	59 f0       	breq	.+22     	; 0x244e <_ZN6SdFile4syncEv+0x70>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    2438:	b8 01       	movw	r22, r16
    243a:	6a 5e       	subi	r22, 0xEA	; 234
    243c:	7f 4f       	sbci	r23, 0xFF	; 255
    243e:	c8 01       	movw	r24, r16
    2440:	48 96       	adiw	r24, 0x18	; 24
    2442:	09 95       	icall
      d->lastAccessDate = d->lastWriteDate;
    2444:	f8 01       	movw	r30, r16
    2446:	80 8d       	ldd	r24, Z+24	; 0x18
    2448:	91 8d       	ldd	r25, Z+25	; 0x19
    244a:	93 8b       	std	Z+19, r25	; 0x13
    244c:	82 8b       	std	Z+18, r24	; 0x12
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    244e:	8c 81       	ldd	r24, Y+4	; 0x04
    2450:	8f 77       	andi	r24, 0x7F	; 127
    2452:	8c 83       	std	Y+4, r24	; 0x04
  }
  return SdVolume::cacheFlush();
}
    2454:	df 91       	pop	r29
    2456:	cf 91       	pop	r28
    2458:	1f 91       	pop	r17
    245a:	0f 91       	pop	r16
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    245c:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <_ZN8SdVolume10cacheFlushEv>
}
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	df 91       	pop	r29
    2464:	cf 91       	pop	r28
    2466:	1f 91       	pop	r17
    2468:	0f 91       	pop	r16
    246a:	08 95       	ret

0000246c <_ZN6SdFile5closeEv>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
    246c:	cf 93       	push	r28
    246e:	df 93       	push	r29
    2470:	ec 01       	movw	r28, r24
  if (!sync())return false;
    2472:	0e 94 ef 11 	call	0x23de	; 0x23de <_ZN6SdFile4syncEv>
    2476:	88 23       	and	r24, r24
    2478:	11 f0       	breq	.+4      	; 0x247e <_ZN6SdFile5closeEv+0x12>
  type_ = FAT_FILE_TYPE_CLOSED;
    247a:	1d 82       	std	Y+5, r1	; 0x05
  return true;
    247c:	81 e0       	ldi	r24, 0x01	; 1
}
    247e:	df 91       	pop	r29
    2480:	cf 91       	pop	r28
    2482:	08 95       	ret

00002484 <_ZN6SdFile8truncateEm>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
    2484:	4f 92       	push	r4
    2486:	5f 92       	push	r5
    2488:	6f 92       	push	r6
    248a:	7f 92       	push	r7
    248c:	8f 92       	push	r8
    248e:	9f 92       	push	r9
    2490:	af 92       	push	r10
    2492:	bf 92       	push	r11
    2494:	ef 92       	push	r14
    2496:	ff 92       	push	r15
    2498:	0f 93       	push	r16
    249a:	1f 93       	push	r17
    249c:	cf 93       	push	r28
    249e:	df 93       	push	r29
    24a0:	00 d0       	rcall	.+0      	; 0x24a2 <_ZN6SdFile8truncateEm+0x1e>
    24a2:	00 d0       	rcall	.+0      	; 0x24a4 <_ZN6SdFile8truncateEm+0x20>
    24a4:	cd b7       	in	r28, 0x3d	; 61
    24a6:	de b7       	in	r29, 0x3e	; 62
    24a8:	fc 01       	movw	r30, r24
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    24aa:	85 81       	ldd	r24, Z+5	; 0x05
    24ac:	81 30       	cpi	r24, 0x01	; 1
    24ae:	e9 f4       	brne	.+58     	; 0x24ea <_ZN6SdFile8truncateEm+0x66>
    24b0:	84 81       	ldd	r24, Z+4	; 0x04
    24b2:	81 ff       	sbrs	r24, 1
    24b4:	1a c0       	rjmp	.+52     	; 0x24ea <_ZN6SdFile8truncateEm+0x66>

  // error if length is greater than current size
  if (length > fileSize_) return false;
    24b6:	83 89       	ldd	r24, Z+19	; 0x13
    24b8:	94 89       	ldd	r25, Z+20	; 0x14
    24ba:	a5 89       	ldd	r26, Z+21	; 0x15
    24bc:	b6 89       	ldd	r27, Z+22	; 0x16
    24be:	84 17       	cp	r24, r20
    24c0:	95 07       	cpc	r25, r21
    24c2:	a6 07       	cpc	r26, r22
    24c4:	b7 07       	cpc	r27, r23
    24c6:	88 f0       	brcs	.+34     	; 0x24ea <_ZN6SdFile8truncateEm+0x66>

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    24c8:	89 2b       	or	r24, r25
    24ca:	8a 2b       	or	r24, r26
    24cc:	8b 2b       	or	r24, r27
    24ce:	09 f4       	brne	.+2      	; 0x24d2 <_ZN6SdFile8truncateEm+0x4e>
    24d0:	79 c0       	rjmp	.+242    	; 0x25c4 <_ZN6SdFile8truncateEm+0x140>
    24d2:	4a 01       	movw	r8, r20
    24d4:	5b 01       	movw	r10, r22
    24d6:	7f 01       	movw	r14, r30

  // remember position for seek after truncation
  uint32_t newPos = curPosition_ > length ? length : curPosition_;
    24d8:	42 84       	ldd	r4, Z+10	; 0x0a
    24da:	53 84       	ldd	r5, Z+11	; 0x0b
    24dc:	64 84       	ldd	r6, Z+12	; 0x0c
    24de:	75 84       	ldd	r7, Z+13	; 0x0d

  // position to last cluster in truncated file
  if (!seekSet(length)) return false;
    24e0:	cf 01       	movw	r24, r30
    24e2:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_ZN6SdFile7seekSetEm>
    24e6:	81 11       	cpse	r24, r1
    24e8:	02 c0       	rjmp	.+4      	; 0x24ee <_ZN6SdFile8truncateEm+0x6a>
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    firstCluster_ = 0;
  } else {
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	6c c0       	rjmp	.+216    	; 0x25c6 <_ZN6SdFile8truncateEm+0x142>
    24ee:	f7 01       	movw	r30, r14
    24f0:	83 8d       	ldd	r24, Z+27	; 0x1b
    24f2:	94 8d       	ldd	r25, Z+28	; 0x1c
  uint32_t newPos = curPosition_ > length ? length : curPosition_;

  // position to last cluster in truncated file
  if (!seekSet(length)) return false;

  if (length == 0) {
    24f4:	81 14       	cp	r8, r1
    24f6:	91 04       	cpc	r9, r1
    24f8:	a1 04       	cpc	r10, r1
    24fa:	b1 04       	cpc	r11, r1
    24fc:	71 f4       	brne	.+28     	; 0x251a <_ZN6SdFile8truncateEm+0x96>
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    24fe:	47 89       	ldd	r20, Z+23	; 0x17
    2500:	50 8d       	ldd	r21, Z+24	; 0x18
    2502:	61 8d       	ldd	r22, Z+25	; 0x19
    2504:	72 8d       	ldd	r23, Z+26	; 0x1a
    2506:	0e 94 46 19 	call	0x328c	; 0x328c <_ZN8SdVolume9freeChainEm>
    250a:	88 23       	and	r24, r24
    250c:	71 f3       	breq	.-36     	; 0x24ea <_ZN6SdFile8truncateEm+0x66>
    firstCluster_ = 0;
    250e:	f7 01       	movw	r30, r14
    2510:	17 8a       	std	Z+23, r1	; 0x17
    2512:	10 8e       	std	Z+24, r1	; 0x18
    2514:	11 8e       	std	Z+25, r1	; 0x19
    2516:	12 8e       	std	Z+26, r1	; 0x1a
    2518:	3a c0       	rjmp	.+116    	; 0x258e <_ZN6SdFile8truncateEm+0x10a>
  } else {
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;
    251a:	f7 01       	movw	r30, r14
    251c:	46 81       	ldd	r20, Z+6	; 0x06
    251e:	57 81       	ldd	r21, Z+7	; 0x07
    2520:	60 85       	ldd	r22, Z+8	; 0x08
    2522:	71 85       	ldd	r23, Z+9	; 0x09
    2524:	9e 01       	movw	r18, r28
    2526:	2f 5f       	subi	r18, 0xFF	; 255
    2528:	3f 4f       	sbci	r19, 0xFF	; 255
    252a:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <_ZNK8SdVolume6fatGetEmPm>
    252e:	88 23       	and	r24, r24
    2530:	e1 f2       	breq	.-72     	; 0x24ea <_ZN6SdFile8truncateEm+0x66>

    if (!vol_->isEOC(toFree)) {
    2532:	49 81       	ldd	r20, Y+1	; 0x01
    2534:	5a 81       	ldd	r21, Y+2	; 0x02
    2536:	6b 81       	ldd	r22, Y+3	; 0x03
    2538:	7c 81       	ldd	r23, Y+4	; 0x04
    253a:	f7 01       	movw	r30, r14
    253c:	83 8d       	ldd	r24, Z+27	; 0x1b
    253e:	94 8d       	ldd	r25, Z+28	; 0x1c
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2540:	fc 01       	movw	r30, r24
    2542:	27 89       	ldd	r18, Z+23	; 0x17
    2544:	20 31       	cpi	r18, 0x10	; 16
    2546:	29 f0       	breq	.+10     	; 0x2552 <_ZN6SdFile8truncateEm+0xce>
    2548:	08 ef       	ldi	r16, 0xF8	; 248
    254a:	1f ef       	ldi	r17, 0xFF	; 255
    254c:	2f ef       	ldi	r18, 0xFF	; 255
    254e:	3f e0       	ldi	r19, 0x0F	; 15
    2550:	04 c0       	rjmp	.+8      	; 0x255a <_ZN6SdFile8truncateEm+0xd6>
    2552:	08 ef       	ldi	r16, 0xF8	; 248
    2554:	1f ef       	ldi	r17, 0xFF	; 255
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	40 17       	cp	r20, r16
    255c:	51 07       	cpc	r21, r17
    255e:	62 07       	cpc	r22, r18
    2560:	73 07       	cpc	r23, r19
    2562:	a8 f4       	brcc	.+42     	; 0x258e <_ZN6SdFile8truncateEm+0x10a>
      // free extra clusters
      if (!vol_->freeChain(toFree)) return false;
    2564:	0e 94 46 19 	call	0x328c	; 0x328c <_ZN8SdVolume9freeChainEm>
    2568:	88 23       	and	r24, r24
    256a:	09 f4       	brne	.+2      	; 0x256e <_ZN6SdFile8truncateEm+0xea>
    256c:	be cf       	rjmp	.-132    	; 0x24ea <_ZN6SdFile8truncateEm+0x66>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    256e:	f7 01       	movw	r30, r14
    2570:	46 81       	ldd	r20, Z+6	; 0x06
    2572:	57 81       	ldd	r21, Z+7	; 0x07
    2574:	60 85       	ldd	r22, Z+8	; 0x08
    2576:	71 85       	ldd	r23, Z+9	; 0x09
    2578:	0f ef       	ldi	r16, 0xFF	; 255
    257a:	1f ef       	ldi	r17, 0xFF	; 255
    257c:	2f ef       	ldi	r18, 0xFF	; 255
    257e:	3f e0       	ldi	r19, 0x0F	; 15
    2580:	83 8d       	ldd	r24, Z+27	; 0x1b
    2582:	94 8d       	ldd	r25, Z+28	; 0x1c
    2584:	0e 94 91 17 	call	0x2f22	; 0x2f22 <_ZN8SdVolume6fatPutEmm>

      // current cluster is end of chain
      if (!vol_->fatPutEOC(curCluster_)) return false;
    2588:	88 23       	and	r24, r24
    258a:	09 f4       	brne	.+2      	; 0x258e <_ZN6SdFile8truncateEm+0x10a>
    258c:	ae cf       	rjmp	.-164    	; 0x24ea <_ZN6SdFile8truncateEm+0x66>
    }
  }
  fileSize_ = length;
    258e:	f7 01       	movw	r30, r14
    2590:	83 8a       	std	Z+19, r8	; 0x13
    2592:	94 8a       	std	Z+20, r9	; 0x14
    2594:	a5 8a       	std	Z+21, r10	; 0x15
    2596:	b6 8a       	std	Z+22, r11	; 0x16

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    2598:	84 81       	ldd	r24, Z+4	; 0x04
    259a:	80 68       	ori	r24, 0x80	; 128
    259c:	84 83       	std	Z+4, r24	; 0x04

  if (!sync()) return false;
    259e:	c7 01       	movw	r24, r14
    25a0:	0e 94 ef 11 	call	0x23de	; 0x23de <_ZN6SdFile4syncEv>
    25a4:	88 23       	and	r24, r24
    25a6:	09 f4       	brne	.+2      	; 0x25aa <_ZN6SdFile8truncateEm+0x126>
    25a8:	a0 cf       	rjmp	.-192    	; 0x24ea <_ZN6SdFile8truncateEm+0x66>
    25aa:	b5 01       	movw	r22, r10
    25ac:	a4 01       	movw	r20, r8
    25ae:	48 14       	cp	r4, r8
    25b0:	59 04       	cpc	r5, r9
    25b2:	6a 04       	cpc	r6, r10
    25b4:	7b 04       	cpc	r7, r11
    25b6:	10 f4       	brcc	.+4      	; 0x25bc <_ZN6SdFile8truncateEm+0x138>
    25b8:	b3 01       	movw	r22, r6
    25ba:	a2 01       	movw	r20, r4

  // set file to correct position
  return seekSet(newPos);
    25bc:	c7 01       	movw	r24, r14
    25be:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_ZN6SdFile7seekSetEm>
    25c2:	01 c0       	rjmp	.+2      	; 0x25c6 <_ZN6SdFile8truncateEm+0x142>

  // error if length is greater than current size
  if (length > fileSize_) return false;

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    25c4:	81 e0       	ldi	r24, 0x01	; 1

  if (!sync()) return false;

  // set file to correct position
  return seekSet(newPos);
}
    25c6:	0f 90       	pop	r0
    25c8:	0f 90       	pop	r0
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
    25ce:	df 91       	pop	r29
    25d0:	cf 91       	pop	r28
    25d2:	1f 91       	pop	r17
    25d4:	0f 91       	pop	r16
    25d6:	ff 90       	pop	r15
    25d8:	ef 90       	pop	r14
    25da:	bf 90       	pop	r11
    25dc:	af 90       	pop	r10
    25de:	9f 90       	pop	r9
    25e0:	8f 90       	pop	r8
    25e2:	7f 90       	pop	r7
    25e4:	6f 90       	pop	r6
    25e6:	5f 90       	pop	r5
    25e8:	4f 90       	pop	r4
    25ea:	08 95       	ret

000025ec <_ZN6SdFile15openCachedEntryEhh>:
  // open cached entry
  return openCachedEntry(index & 0XF, oflag);
}
//------------------------------------------------------------------------------
// open a cached directory entry. Assumes vol_ is initializes
uint8_t SdFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {
    25ec:	1f 93       	push	r17
    25ee:	cf 93       	push	r28
    25f0:	df 93       	push	r29
    25f2:	ec 01       	movw	r28, r24
  // location of entry in cache
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;
    25f4:	80 e2       	ldi	r24, 0x20	; 32
    25f6:	68 9f       	mul	r22, r24
    25f8:	f0 01       	movw	r30, r0
    25fa:	11 24       	eor	r1, r1
    25fc:	9f 01       	movw	r18, r30
    25fe:	28 57       	subi	r18, 0x78	; 120
    2600:	3c 4f       	sbci	r19, 0xFC	; 252

  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    2602:	d9 01       	movw	r26, r18
    2604:	1b 96       	adiw	r26, 0x0b	; 11
    2606:	9c 91       	ld	r25, X
    2608:	91 71       	andi	r25, 0x11	; 17
    260a:	29 f0       	breq	.+10     	; 0x2616 <_ZN6SdFile15openCachedEntryEhh+0x2a>
    if (oflag & (O_WRITE | O_TRUNC)) return false;
    260c:	84 2f       	mov	r24, r20
    260e:	82 74       	andi	r24, 0x42	; 66
    2610:	11 f0       	breq	.+4      	; 0x2616 <_ZN6SdFile15openCachedEntryEhh+0x2a>
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	5b c0       	rjmp	.+182    	; 0x26cc <_ZN6SdFile15openCachedEntryEhh+0xe0>
    2616:	14 2f       	mov	r17, r20
  }
  // remember location of directory entry on SD
  dirIndex_ = dirIndex;
    2618:	6a 8b       	std	Y+18, r22	; 0x12
  dirBlock_ = SdVolume::cacheBlockNumber_;
    261a:	80 91 07 01 	lds	r24, 0x0107
    261e:	90 91 08 01 	lds	r25, 0x0108
    2622:	a0 91 09 01 	lds	r26, 0x0109
    2626:	b0 91 0a 01 	lds	r27, 0x010A
    262a:	8e 87       	std	Y+14, r24	; 0x0e
    262c:	9f 87       	std	Y+15, r25	; 0x0f
    262e:	a8 8b       	std	Y+16, r26	; 0x10
    2630:	b9 8b       	std	Y+17, r27	; 0x11

  // copy first cluster number for directory fields
  firstCluster_ = (uint32_t)p->firstClusterHigh << 16;
    2632:	e8 57       	subi	r30, 0x78	; 120
    2634:	fc 4f       	sbci	r31, 0xFC	; 252
    2636:	44 89       	ldd	r20, Z+20	; 0x14
    2638:	55 89       	ldd	r21, Z+21	; 0x15
    263a:	60 e0       	ldi	r22, 0x00	; 0
    263c:	70 e0       	ldi	r23, 0x00	; 0
    263e:	ba 01       	movw	r22, r20
    2640:	55 27       	eor	r21, r21
    2642:	44 27       	eor	r20, r20
    2644:	4f 8b       	std	Y+23, r20	; 0x17
    2646:	58 8f       	std	Y+24, r21	; 0x18
    2648:	69 8f       	std	Y+25, r22	; 0x19
    264a:	7a 8f       	std	Y+26, r23	; 0x1a
  firstCluster_ |= p->firstClusterLow;
    264c:	82 8d       	ldd	r24, Z+26	; 0x1a
    264e:	93 8d       	ldd	r25, Z+27	; 0x1b
    2650:	a0 e0       	ldi	r26, 0x00	; 0
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	48 2b       	or	r20, r24
    2656:	59 2b       	or	r21, r25
    2658:	6a 2b       	or	r22, r26
    265a:	7b 2b       	or	r23, r27
    265c:	4f 8b       	std	Y+23, r20	; 0x17
    265e:	58 8f       	std	Y+24, r21	; 0x18
    2660:	69 8f       	std	Y+25, r22	; 0x19
    2662:	7a 8f       	std	Y+26, r23	; 0x1a
}
/** Mask for file/subdirectory tests */
uint8_t const DIR_ATT_FILE_TYPE_MASK = (DIR_ATT_VOLUME_ID | DIR_ATT_DIRECTORY);
/** Directory entry is for a file */
static inline uint8_t DIR_IS_FILE(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_FILE_TYPE_MASK) == 0;
    2664:	d9 01       	movw	r26, r18
    2666:	1b 96       	adiw	r26, 0x0b	; 11
    2668:	8c 91       	ld	r24, X
    266a:	88 71       	andi	r24, 0x18	; 24

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    266c:	51 f4       	brne	.+20     	; 0x2682 <_ZN6SdFile15openCachedEntryEhh+0x96>
    fileSize_ = p->fileSize;
    266e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2670:	95 8d       	ldd	r25, Z+29	; 0x1d
    2672:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2674:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2676:	8b 8b       	std	Y+19, r24	; 0x13
    2678:	9c 8b       	std	Y+20, r25	; 0x14
    267a:	ad 8b       	std	Y+21, r26	; 0x15
    267c:	be 8b       	std	Y+22, r27	; 0x16
    type_ = FAT_FILE_TYPE_NORMAL;
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	0d c0       	rjmp	.+26     	; 0x269c <_ZN6SdFile15openCachedEntryEhh+0xb0>
  } else if (DIR_IS_SUBDIR(p)) {
    2682:	80 31       	cpi	r24, 0x10	; 16
    2684:	31 f6       	brne	.-116    	; 0x2612 <_ZN6SdFile15openCachedEntryEhh+0x26>
    if (!vol_->chainSize(firstCluster_, &fileSize_)) return false;
    2686:	9e 01       	movw	r18, r28
    2688:	2d 5e       	subi	r18, 0xED	; 237
    268a:	3f 4f       	sbci	r19, 0xFF	; 255
    268c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    268e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2690:	0e 94 28 17 	call	0x2e50	; 0x2e50 <_ZNK8SdVolume9chainSizeEmPm>
    2694:	88 23       	and	r24, r24
    2696:	09 f4       	brne	.+2      	; 0x269a <_ZN6SdFile15openCachedEntryEhh+0xae>
    2698:	bc cf       	rjmp	.-136    	; 0x2612 <_ZN6SdFile15openCachedEntryEhh+0x26>
    type_ = FAT_FILE_TYPE_SUBDIR;
    269a:	84 e0       	ldi	r24, 0x04	; 4
    269c:	8d 83       	std	Y+5, r24	; 0x05
  } else {
    return false;
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    269e:	81 2f       	mov	r24, r17
    26a0:	8f 70       	andi	r24, 0x0F	; 15
    26a2:	8c 83       	std	Y+4, r24	; 0x04

  // set to start of file
  curCluster_ = 0;
    26a4:	1e 82       	std	Y+6, r1	; 0x06
    26a6:	1f 82       	std	Y+7, r1	; 0x07
    26a8:	18 86       	std	Y+8, r1	; 0x08
    26aa:	19 86       	std	Y+9, r1	; 0x09
  curPosition_ = 0;
    26ac:	1a 86       	std	Y+10, r1	; 0x0a
    26ae:	1b 86       	std	Y+11, r1	; 0x0b
    26b0:	1c 86       	std	Y+12, r1	; 0x0c
    26b2:	1d 86       	std	Y+13, r1	; 0x0d

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    26b4:	16 ff       	sbrs	r17, 6
    26b6:	09 c0       	rjmp	.+18     	; 0x26ca <_ZN6SdFile15openCachedEntryEhh+0xde>
    26b8:	40 e0       	ldi	r20, 0x00	; 0
    26ba:	50 e0       	ldi	r21, 0x00	; 0
    26bc:	ba 01       	movw	r22, r20
    26be:	ce 01       	movw	r24, r28
  return true;
}
    26c0:	df 91       	pop	r29
    26c2:	cf 91       	pop	r28
    26c4:	1f 91       	pop	r17
  // set to start of file
  curCluster_ = 0;
  curPosition_ = 0;

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    26c6:	0c 94 42 12 	jmp	0x2484	; 0x2484 <_ZN6SdFile8truncateEm>
  return true;
    26ca:	81 e0       	ldi	r24, 0x01	; 1
}
    26cc:	df 91       	pop	r29
    26ce:	cf 91       	pop	r28
    26d0:	1f 91       	pop	r17
    26d2:	08 95       	ret

000026d4 <_ZN6SdFile4openEPS_PKch>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    26d4:	cf 92       	push	r12
    26d6:	df 92       	push	r13
    26d8:	ef 92       	push	r14
    26da:	ff 92       	push	r15
    26dc:	0f 93       	push	r16
    26de:	1f 93       	push	r17
    26e0:	cf 93       	push	r28
    26e2:	df 93       	push	r29
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
    26e8:	2c 97       	sbiw	r28, 0x0c	; 12
    26ea:	0f b6       	in	r0, 0x3f	; 63
    26ec:	f8 94       	cli
    26ee:	de bf       	out	0x3e, r29	; 62
    26f0:	0f be       	out	0x3f, r0	; 63
    26f2:	cd bf       	out	0x3d, r28	; 61
  uint8_t dname[11];
  dir_t* p;

  // error if already open
  if (isOpen())return false;
    26f4:	fc 01       	movw	r30, r24
    26f6:	35 81       	ldd	r19, Z+5	; 0x05
    26f8:	31 11       	cpse	r19, r1
    26fa:	c2 c0       	rjmp	.+388    	; 0x2880 <_ZN6SdFile4openEPS_PKch+0x1ac>
    26fc:	d2 2e       	mov	r13, r18
    26fe:	8b 01       	movw	r16, r22
    2700:	7c 01       	movw	r14, r24

  if (!make83Name(fileName, dname)) return false;
    2702:	be 01       	movw	r22, r28
    2704:	6f 5f       	subi	r22, 0xFF	; 255
    2706:	7f 4f       	sbci	r23, 0xFF	; 255
    2708:	ca 01       	movw	r24, r20
    270a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <_ZN6SdFile10make83NameEPKcPh>
    270e:	88 23       	and	r24, r24
    2710:	09 f4       	brne	.+2      	; 0x2714 <_ZN6SdFile4openEPS_PKch+0x40>
    2712:	b6 c0       	rjmp	.+364    	; 0x2880 <_ZN6SdFile4openEPS_PKch+0x1ac>
  vol_ = dirFile->vol_;
    2714:	f8 01       	movw	r30, r16
    2716:	83 8d       	ldd	r24, Z+27	; 0x1b
    2718:	94 8d       	ldd	r25, Z+28	; 0x1c
    271a:	f7 01       	movw	r30, r14
    271c:	94 8f       	std	Z+28, r25	; 0x1c
    271e:	83 8f       	std	Z+27, r24	; 0x1b
  int8_t readDir(dir_t* dir);
  static uint8_t remove(SdFile* dirFile, const char* fileName);
  uint8_t remove(void);
  /** Set the file's current position to zero. */
  void rewind(void) {
    curPosition_ = curCluster_ = 0;
    2720:	f8 01       	movw	r30, r16
    2722:	16 82       	std	Z+6, r1	; 0x06
    2724:	17 82       	std	Z+7, r1	; 0x07
    2726:	10 86       	std	Z+8, r1	; 0x08
    2728:	11 86       	std	Z+9, r1	; 0x09
    272a:	12 86       	std	Z+10, r1	; 0x0a
    272c:	13 86       	std	Z+11, r1	; 0x0b
    272e:	14 86       	std	Z+12, r1	; 0x0c
    2730:	15 86       	std	Z+13, r1	; 0x0d
  dirFile->rewind();

  // bool for empty entry found
  uint8_t emptyFound = false;
    2732:	30 e0       	ldi	r19, 0x00	; 0

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    2734:	f8 01       	movw	r30, r16
    2736:	82 85       	ldd	r24, Z+10	; 0x0a
    2738:	93 85       	ldd	r25, Z+11	; 0x0b
    273a:	a4 85       	ldd	r26, Z+12	; 0x0c
    273c:	b5 85       	ldd	r27, Z+13	; 0x0d
    273e:	43 89       	ldd	r20, Z+19	; 0x13
    2740:	54 89       	ldd	r21, Z+20	; 0x14
    2742:	65 89       	ldd	r22, Z+21	; 0x15
    2744:	76 89       	ldd	r23, Z+22	; 0x16
    2746:	84 17       	cp	r24, r20
    2748:	95 07       	cpc	r25, r21
    274a:	a6 07       	cpc	r26, r22
    274c:	b7 07       	cpc	r27, r23
    274e:	08 f0       	brcs	.+2      	; 0x2752 <_ZN6SdFile4openEPS_PKch+0x7e>
    2750:	41 c0       	rjmp	.+130    	; 0x27d4 <_ZN6SdFile4openEPS_PKch+0x100>
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    2752:	25 e0       	ldi	r18, 0x05	; 5
    2754:	b6 95       	lsr	r27
    2756:	a7 95       	ror	r26
    2758:	97 95       	ror	r25
    275a:	87 95       	ror	r24
    275c:	2a 95       	dec	r18
    275e:	d1 f7       	brne	.-12     	; 0x2754 <_ZN6SdFile4openEPS_PKch+0x80>
    2760:	f8 2f       	mov	r31, r24
    2762:	ff 70       	andi	r31, 0x0F	; 15
    2764:	cf 2e       	mov	r12, r31
    p = dirFile->readDirCache();
    2766:	c8 01       	movw	r24, r16
    2768:	3c 87       	std	Y+12, r19	; 0x0c
    276a:	0e 94 10 11 	call	0x2220	; 0x2220 <_ZN6SdFile12readDirCacheEv>
    if (p == NULL) return false;
    276e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2770:	00 97       	sbiw	r24, 0x00	; 0
    2772:	09 f4       	brne	.+2      	; 0x2776 <_ZN6SdFile4openEPS_PKch+0xa2>
    2774:	85 c0       	rjmp	.+266    	; 0x2880 <_ZN6SdFile4openEPS_PKch+0x1ac>

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    2776:	fc 01       	movw	r30, r24
    2778:	20 81       	ld	r18, Z
    277a:	22 23       	and	r18, r18
    277c:	09 f4       	brne	.+2      	; 0x2780 <_ZN6SdFile4openEPS_PKch+0xac>
    277e:	84 c0       	rjmp	.+264    	; 0x2888 <_ZN6SdFile4openEPS_PKch+0x1b4>
    2780:	25 3e       	cpi	r18, 0xE5	; 229
    2782:	99 f0       	breq	.+38     	; 0x27aa <_ZN6SdFile4openEPS_PKch+0xd6>
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    } else if (!memcmp(dname, p->name, 11)) {
    2784:	4b e0       	ldi	r20, 0x0B	; 11
    2786:	50 e0       	ldi	r21, 0x00	; 0
    2788:	bc 01       	movw	r22, r24
    278a:	ce 01       	movw	r24, r28
    278c:	01 96       	adiw	r24, 0x01	; 1
    278e:	3c 87       	std	Y+12, r19	; 0x0c
    2790:	0e 94 80 25 	call	0x4b00	; 0x4b00 <memcmp>
    2794:	3c 85       	ldd	r19, Y+12	; 0x0c
    2796:	89 2b       	or	r24, r25
    2798:	69 f6       	brne	.-102    	; 0x2734 <_ZN6SdFile4openEPS_PKch+0x60>
      // don't open existing file if O_CREAT and O_EXCL
      if ((oflag & (O_CREAT | O_EXCL)) == (O_CREAT | O_EXCL)) return false;
    279a:	8d 2d       	mov	r24, r13
    279c:	80 73       	andi	r24, 0x30	; 48
    279e:	80 33       	cpi	r24, 0x30	; 48
    27a0:	09 f4       	brne	.+2      	; 0x27a4 <_ZN6SdFile4openEPS_PKch+0xd0>
    27a2:	6e c0       	rjmp	.+220    	; 0x2880 <_ZN6SdFile4openEPS_PKch+0x1ac>

      // open found file
      return openCachedEntry(0XF & index, oflag);
    27a4:	4d 2d       	mov	r20, r13
    27a6:	6c 2d       	mov	r22, r12
    27a8:	67 c0       	rjmp	.+206    	; 0x2878 <_ZN6SdFile4openEPS_PKch+0x1a4>
    p = dirFile->readDirCache();
    if (p == NULL) return false;

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
      // remember first empty slot
      if (!emptyFound) {
    27aa:	31 11       	cpse	r19, r1
    27ac:	6b c0       	rjmp	.+214    	; 0x2884 <_ZN6SdFile4openEPS_PKch+0x1b0>
        emptyFound = true;
        dirIndex_ = index;
    27ae:	f7 01       	movw	r30, r14
    27b0:	c2 8a       	std	Z+18, r12	; 0x12
        dirBlock_ = SdVolume::cacheBlockNumber_;
    27b2:	40 91 07 01 	lds	r20, 0x0107
    27b6:	50 91 08 01 	lds	r21, 0x0108
    27ba:	60 91 09 01 	lds	r22, 0x0109
    27be:	70 91 0a 01 	lds	r23, 0x010A
    27c2:	46 87       	std	Z+14, r20	; 0x0e
    27c4:	57 87       	std	Z+15, r21	; 0x0f
    27c6:	60 8b       	std	Z+16, r22	; 0x10
    27c8:	71 8b       	std	Z+17, r23	; 0x11
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    27ca:	fc 01       	movw	r30, r24
    27cc:	80 81       	ld	r24, Z
    if (p == NULL) return false;

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
      // remember first empty slot
      if (!emptyFound) {
        emptyFound = true;
    27ce:	31 e0       	ldi	r19, 0x01	; 1
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    27d0:	81 11       	cpse	r24, r1
    27d2:	b0 cf       	rjmp	.-160    	; 0x2734 <_ZN6SdFile4openEPS_PKch+0x60>
      // open found file
      return openCachedEntry(0XF & index, oflag);
    }
  }
  // only create file if O_CREAT and O_WRITE
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;
    27d4:	8d 2d       	mov	r24, r13
    27d6:	82 71       	andi	r24, 0x12	; 18
    27d8:	82 31       	cpi	r24, 0x12	; 18
    27da:	09 f0       	breq	.+2      	; 0x27de <_ZN6SdFile4openEPS_PKch+0x10a>
    27dc:	51 c0       	rjmp	.+162    	; 0x2880 <_ZN6SdFile4openEPS_PKch+0x1ac>

  // cache found slot or add cluster if end of file
  if (emptyFound) {
    27de:	33 23       	and	r19, r19
    27e0:	41 f0       	breq	.+16     	; 0x27f2 <_ZN6SdFile4openEPS_PKch+0x11e>
    p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    27e2:	61 e0       	ldi	r22, 0x01	; 1
    27e4:	c7 01       	movw	r24, r14
    27e6:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <_ZN6SdFile13cacheDirEntryEh>
    27ea:	8c 01       	movw	r16, r24
    if (!p) return false;
    27ec:	89 2b       	or	r24, r25
    27ee:	79 f4       	brne	.+30     	; 0x280e <_ZN6SdFile4openEPS_PKch+0x13a>
    27f0:	47 c0       	rjmp	.+142    	; 0x2880 <_ZN6SdFile4openEPS_PKch+0x1ac>
  } else {
    if (dirFile->type_ == FAT_FILE_TYPE_ROOT16) return false;
    27f2:	f8 01       	movw	r30, r16
    27f4:	85 81       	ldd	r24, Z+5	; 0x05
    27f6:	82 30       	cpi	r24, 0x02	; 2
    27f8:	09 f4       	brne	.+2      	; 0x27fc <_ZN6SdFile4openEPS_PKch+0x128>
    27fa:	42 c0       	rjmp	.+132    	; 0x2880 <_ZN6SdFile4openEPS_PKch+0x1ac>

    // add and zero cluster for dirFile - first cluster is in cache for write
    if (!dirFile->addDirCluster()) return false;
    27fc:	c8 01       	movw	r24, r16
    27fe:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN6SdFile13addDirClusterEv>
    2802:	88 23       	and	r24, r24
    2804:	e9 f1       	breq	.+122    	; 0x2880 <_ZN6SdFile4openEPS_PKch+0x1ac>

    // use first entry in cluster
    dirIndex_ = 0;
    2806:	f7 01       	movw	r30, r14
    2808:	12 8a       	std	Z+18, r1	; 0x12
    p = SdVolume::cacheBuffer_.dir;
    280a:	08 e8       	ldi	r16, 0x88	; 136
    280c:	13 e0       	ldi	r17, 0x03	; 3
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
    280e:	80 e2       	ldi	r24, 0x20	; 32
    2810:	f8 01       	movw	r30, r16
    2812:	11 92       	st	Z+, r1
    2814:	8a 95       	dec	r24
    2816:	e9 f7       	brne	.-6      	; 0x2812 <_ZN6SdFile4openEPS_PKch+0x13e>
  memcpy(p->name, dname, 11);
    2818:	8b e0       	ldi	r24, 0x0B	; 11
    281a:	fe 01       	movw	r30, r28
    281c:	31 96       	adiw	r30, 0x01	; 1
    281e:	d8 01       	movw	r26, r16
    2820:	01 90       	ld	r0, Z+
    2822:	0d 92       	st	X+, r0
    2824:	8a 95       	dec	r24
    2826:	e1 f7       	brne	.-8      	; 0x2820 <_ZN6SdFile4openEPS_PKch+0x14c>

  // set timestamps
  if (dateTime_) {
    2828:	e0 91 7f 03 	lds	r30, 0x037F
    282c:	f0 91 80 03 	lds	r31, 0x0380
    2830:	30 97       	sbiw	r30, 0x00	; 0
    2832:	39 f0       	breq	.+14     	; 0x2842 <_ZN6SdFile4openEPS_PKch+0x16e>
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
    2834:	b8 01       	movw	r22, r16
    2836:	62 5f       	subi	r22, 0xF2	; 242
    2838:	7f 4f       	sbci	r23, 0xFF	; 255
    283a:	c8 01       	movw	r24, r16
    283c:	40 96       	adiw	r24, 0x10	; 16
    283e:	09 95       	icall
    2840:	09 c0       	rjmp	.+18     	; 0x2854 <_ZN6SdFile4openEPS_PKch+0x180>
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    2842:	81 e2       	ldi	r24, 0x21	; 33
    2844:	98 e2       	ldi	r25, 0x28	; 40
    2846:	f8 01       	movw	r30, r16
    2848:	91 8b       	std	Z+17, r25	; 0x11
    284a:	80 8b       	std	Z+16, r24	; 0x10
    p->creationTime = FAT_DEFAULT_TIME;
    284c:	80 e0       	ldi	r24, 0x00	; 0
    284e:	98 e0       	ldi	r25, 0x08	; 8
    2850:	97 87       	std	Z+15, r25	; 0x0f
    2852:	86 87       	std	Z+14, r24	; 0x0e
  }
  p->lastAccessDate = p->creationDate;
    2854:	f8 01       	movw	r30, r16
    2856:	80 89       	ldd	r24, Z+16	; 0x10
    2858:	91 89       	ldd	r25, Z+17	; 0x11
    285a:	93 8b       	std	Z+19, r25	; 0x13
    285c:	82 8b       	std	Z+18, r24	; 0x12
  p->lastWriteDate = p->creationDate;
    285e:	91 8f       	std	Z+25, r25	; 0x19
    2860:	80 8f       	std	Z+24, r24	; 0x18
  p->lastWriteTime = p->creationTime;
    2862:	86 85       	ldd	r24, Z+14	; 0x0e
    2864:	97 85       	ldd	r25, Z+15	; 0x0f
    2866:	97 8b       	std	Z+23, r25	; 0x17
    2868:	86 8b       	std	Z+22, r24	; 0x16

  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;
    286a:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <_ZN8SdVolume10cacheFlushEv>
    286e:	88 23       	and	r24, r24
    2870:	39 f0       	breq	.+14     	; 0x2880 <_ZN6SdFile4openEPS_PKch+0x1ac>

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
    2872:	4d 2d       	mov	r20, r13
    2874:	f7 01       	movw	r30, r14
    2876:	62 89       	ldd	r22, Z+18	; 0x12
    2878:	c7 01       	movw	r24, r14
    287a:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN6SdFile15openCachedEntryEhh>
    287e:	09 c0       	rjmp	.+18     	; 0x2892 <_ZN6SdFile4openEPS_PKch+0x1be>
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
  uint8_t dname[11];
  dir_t* p;

  // error if already open
  if (isOpen())return false;
    2880:	80 e0       	ldi	r24, 0x00	; 0
    2882:	07 c0       	rjmp	.+14     	; 0x2892 <_ZN6SdFile4openEPS_PKch+0x1be>
    p = dirFile->readDirCache();
    if (p == NULL) return false;

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
      // remember first empty slot
      if (!emptyFound) {
    2884:	31 e0       	ldi	r19, 0x01	; 1
    2886:	56 cf       	rjmp	.-340    	; 0x2734 <_ZN6SdFile4openEPS_PKch+0x60>
    2888:	33 23       	and	r19, r19
    288a:	09 f4       	brne	.+2      	; 0x288e <_ZN6SdFile4openEPS_PKch+0x1ba>
    288c:	90 cf       	rjmp	.-224    	; 0x27ae <_ZN6SdFile4openEPS_PKch+0xda>
    288e:	31 e0       	ldi	r19, 0x01	; 1
    2890:	a1 cf       	rjmp	.-190    	; 0x27d4 <_ZN6SdFile4openEPS_PKch+0x100>
  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
}
    2892:	2c 96       	adiw	r28, 0x0c	; 12
    2894:	0f b6       	in	r0, 0x3f	; 63
    2896:	f8 94       	cli
    2898:	de bf       	out	0x3e, r29	; 62
    289a:	0f be       	out	0x3f, r0	; 63
    289c:	cd bf       	out	0x3d, r28	; 61
    289e:	df 91       	pop	r29
    28a0:	cf 91       	pop	r28
    28a2:	1f 91       	pop	r17
    28a4:	0f 91       	pop	r16
    28a6:	ff 90       	pop	r15
    28a8:	ef 90       	pop	r14
    28aa:	df 90       	pop	r13
    28ac:	cf 90       	pop	r12
    28ae:	08 95       	ret

000028b0 <_ZN6SdFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    28b0:	2f 92       	push	r2
    28b2:	3f 92       	push	r3
    28b4:	4f 92       	push	r4
    28b6:	5f 92       	push	r5
    28b8:	6f 92       	push	r6
    28ba:	7f 92       	push	r7
    28bc:	8f 92       	push	r8
    28be:	9f 92       	push	r9
    28c0:	af 92       	push	r10
    28c2:	bf 92       	push	r11
    28c4:	cf 92       	push	r12
    28c6:	df 92       	push	r13
    28c8:	ef 92       	push	r14
    28ca:	ff 92       	push	r15
    28cc:	0f 93       	push	r16
    28ce:	1f 93       	push	r17
    28d0:	cf 93       	push	r28
    28d2:	df 93       	push	r29
    28d4:	00 d0       	rcall	.+0      	; 0x28d6 <_ZN6SdFile5writeEPKvj+0x26>
    28d6:	00 d0       	rcall	.+0      	; 0x28d8 <_ZN6SdFile5writeEPKvj+0x28>
    28d8:	cd b7       	in	r28, 0x3d	; 61
    28da:	de b7       	in	r29, 0x3e	; 62
    28dc:	8c 01       	movw	r16, r24
    28de:	6b 01       	movw	r12, r22
    28e0:	3a 01       	movw	r6, r20

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    28e2:	dc 01       	movw	r26, r24
    28e4:	15 96       	adiw	r26, 0x05	; 5
    28e6:	8c 91       	ld	r24, X
    28e8:	15 97       	sbiw	r26, 0x05	; 5
    28ea:	81 30       	cpi	r24, 0x01	; 1
    28ec:	c9 f4       	brne	.+50     	; 0x2920 <_ZN6SdFile5writeEPKvj+0x70>
    28ee:	14 96       	adiw	r26, 0x04	; 4
    28f0:	8c 91       	ld	r24, X
    28f2:	81 ff       	sbrs	r24, 1
    28f4:	15 c0       	rjmp	.+42     	; 0x2920 <_ZN6SdFile5writeEPKvj+0x70>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    28f6:	82 ff       	sbrs	r24, 2
    28f8:	1d c0       	rjmp	.+58     	; 0x2934 <_ZN6SdFile5writeEPKvj+0x84>
    28fa:	f8 01       	movw	r30, r16
    28fc:	43 89       	ldd	r20, Z+19	; 0x13
    28fe:	54 89       	ldd	r21, Z+20	; 0x14
    2900:	65 89       	ldd	r22, Z+21	; 0x15
    2902:	76 89       	ldd	r23, Z+22	; 0x16
    2904:	82 85       	ldd	r24, Z+10	; 0x0a
    2906:	93 85       	ldd	r25, Z+11	; 0x0b
    2908:	a4 85       	ldd	r26, Z+12	; 0x0c
    290a:	b5 85       	ldd	r27, Z+13	; 0x0d
    290c:	84 17       	cp	r24, r20
    290e:	95 07       	cpc	r25, r21
    2910:	a6 07       	cpc	r26, r22
    2912:	b7 07       	cpc	r27, r23
    2914:	79 f0       	breq	.+30     	; 0x2934 <_ZN6SdFile5writeEPKvj+0x84>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    2916:	c8 01       	movw	r24, r16
    2918:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) goto writeErrorReturn;
    291c:	81 11       	cpse	r24, r1
    291e:	0a c0       	rjmp	.+20     	; 0x2934 <_ZN6SdFile5writeEPKvj+0x84>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	d8 01       	movw	r26, r16
    2926:	13 96       	adiw	r26, 0x03	; 3
    2928:	9c 93       	st	X, r25
    292a:	8e 93       	st	-X, r24
    292c:	12 97       	sbiw	r26, 0x02	; 2

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    292e:	80 e0       	ldi	r24, 0x00	; 0
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	48 c1       	rjmp	.+656    	; 0x2bc4 <_ZN6SdFile5writeEPKvj+0x314>
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2934:	43 01       	movw	r8, r6
    2936:	84 c0       	rjmp	.+264    	; 0x2a40 <_ZN6SdFile5writeEPKvj+0x190>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    2938:	d8 01       	movw	r26, r16
    293a:	5b 96       	adiw	r26, 0x1b	; 27
    293c:	8d 91       	ld	r24, X+
    293e:	9c 91       	ld	r25, X
    2940:	5c 97       	sbiw	r26, 0x1c	; 28
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    2942:	fc 01       	movw	r30, r24
    2944:	54 80       	ldd	r5, Z+4	; 0x04
    2946:	2f ef       	ldi	r18, 0xFF	; 255
    2948:	25 0d       	add	r18, r5
    294a:	1a 01       	movw	r2, r20
    294c:	2b 01       	movw	r4, r22
    294e:	39 e0       	ldi	r19, 0x09	; 9
    2950:	56 94       	lsr	r5
    2952:	47 94       	ror	r4
    2954:	37 94       	ror	r3
    2956:	27 94       	ror	r2
    2958:	3a 95       	dec	r19
    295a:	d1 f7       	brne	.-12     	; 0x2950 <_ZN6SdFile5writeEPKvj+0xa0>
    295c:	52 2e       	mov	r5, r18
    295e:	52 20       	and	r5, r2
    uint16_t blockOffset = curPosition_ & 0X1FF;
    2960:	7a 01       	movw	r14, r20
    2962:	f1 e0       	ldi	r31, 0x01	; 1
    2964:	ff 22       	and	r15, r31
    if (blockOfCluster == 0 && blockOffset == 0) {
    2966:	55 20       	and	r5, r5
    2968:	09 f4       	brne	.+2      	; 0x296c <_ZN6SdFile5writeEPKvj+0xbc>
    296a:	76 c0       	rjmp	.+236    	; 0x2a58 <_ZN6SdFile5writeEPKvj+0x1a8>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	92 e0       	ldi	r25, 0x02	; 2
    2970:	8e 19       	sub	r24, r14
    2972:	9f 09       	sbc	r25, r15
    2974:	54 01       	movw	r10, r8
    2976:	88 15       	cp	r24, r8
    2978:	99 05       	cpc	r25, r9
    297a:	08 f4       	brcc	.+2      	; 0x297e <_ZN6SdFile5writeEPKvj+0xce>
    297c:	5c 01       	movw	r10, r24

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    297e:	d8 01       	movw	r26, r16
    2980:	5b 96       	adiw	r26, 0x1b	; 27
    2982:	2d 91       	ld	r18, X+
    2984:	3c 91       	ld	r19, X
    2986:	5c 97       	sbiw	r26, 0x1c	; 28
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    2988:	16 96       	adiw	r26, 0x06	; 6
    298a:	8d 91       	ld	r24, X+
    298c:	9d 91       	ld	r25, X+
    298e:	0d 90       	ld	r0, X+
    2990:	bc 91       	ld	r27, X
    2992:	a0 2d       	mov	r26, r0
    2994:	02 97       	sbiw	r24, 0x02	; 2
    2996:	a1 09       	sbc	r26, r1
    2998:	b1 09       	sbc	r27, r1
    299a:	f9 01       	movw	r30, r18
    299c:	05 84       	ldd	r0, Z+13	; 0x0d
    299e:	04 c0       	rjmp	.+8      	; 0x29a8 <_ZN6SdFile5writeEPKvj+0xf8>
    29a0:	88 0f       	add	r24, r24
    29a2:	99 1f       	adc	r25, r25
    29a4:	aa 1f       	adc	r26, r26
    29a6:	bb 1f       	adc	r27, r27
    29a8:	0a 94       	dec	r0
    29aa:	d2 f7       	brpl	.-12     	; 0x29a0 <_ZN6SdFile5writeEPKvj+0xf0>
    29ac:	46 85       	ldd	r20, Z+14	; 0x0e
    29ae:	57 85       	ldd	r21, Z+15	; 0x0f
    29b0:	60 89       	ldd	r22, Z+16	; 0x10
    29b2:	71 89       	ldd	r23, Z+17	; 0x11
    29b4:	84 0f       	add	r24, r20
    29b6:	95 1f       	adc	r25, r21
    29b8:	a6 1f       	adc	r26, r22
    29ba:	b7 1f       	adc	r27, r23
    29bc:	9c 01       	movw	r18, r24
    29be:	ad 01       	movw	r20, r26
    29c0:	25 0d       	add	r18, r5
    29c2:	31 1d       	adc	r19, r1
    29c4:	41 1d       	adc	r20, r1
    29c6:	51 1d       	adc	r21, r1
    29c8:	19 01       	movw	r2, r18
    29ca:	2a 01       	movw	r4, r20
    if (n == 512) {
    29cc:	a1 14       	cp	r10, r1
    29ce:	32 e0       	ldi	r19, 0x02	; 2
    29d0:	b3 06       	cpc	r11, r19
    29d2:	09 f0       	breq	.+2      	; 0x29d6 <_ZN6SdFile5writeEPKvj+0x126>
    29d4:	88 c0       	rjmp	.+272    	; 0x2ae6 <_ZN6SdFile5writeEPKvj+0x236>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    29d6:	80 91 07 01 	lds	r24, 0x0107
    29da:	90 91 08 01 	lds	r25, 0x0108
    29de:	a0 91 09 01 	lds	r26, 0x0109
    29e2:	b0 91 0a 01 	lds	r27, 0x010A
    29e6:	82 15       	cp	r24, r2
    29e8:	93 05       	cpc	r25, r3
    29ea:	a4 05       	cpc	r26, r4
    29ec:	b5 05       	cpc	r27, r5
    29ee:	59 f4       	brne	.+22     	; 0x2a06 <_ZN6SdFile5writeEPKvj+0x156>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    29f0:	8f ef       	ldi	r24, 0xFF	; 255
    29f2:	9f ef       	ldi	r25, 0xFF	; 255
    29f4:	dc 01       	movw	r26, r24
    29f6:	80 93 07 01 	sts	0x0107, r24
    29fa:	90 93 08 01 	sts	0x0108, r25
    29fe:	a0 93 09 01 	sts	0x0109, r26
    2a02:	b0 93 0a 01 	sts	0x010A, r27
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    2a06:	96 01       	movw	r18, r12
    2a08:	b2 01       	movw	r22, r4
    2a0a:	a1 01       	movw	r20, r2
    2a0c:	80 91 86 03 	lds	r24, 0x0386
    2a10:	90 91 87 03 	lds	r25, 0x0387
    2a14:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <_ZN7Sd2Card10writeBlockEmPKh>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    2a18:	88 23       	and	r24, r24
    2a1a:	09 f4       	brne	.+2      	; 0x2a1e <_ZN6SdFile5writeEPKvj+0x16e>
    2a1c:	81 cf       	rjmp	.-254    	; 0x2920 <_ZN6SdFile5writeEPKvj+0x70>
      src += 512;
    2a1e:	9e ef       	ldi	r25, 0xFE	; 254
    2a20:	d9 1a       	sub	r13, r25
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    2a22:	8a 18       	sub	r8, r10
    2a24:	9b 08       	sbc	r9, r11
    curPosition_ += n;
    2a26:	f8 01       	movw	r30, r16
    2a28:	82 85       	ldd	r24, Z+10	; 0x0a
    2a2a:	93 85       	ldd	r25, Z+11	; 0x0b
    2a2c:	a4 85       	ldd	r26, Z+12	; 0x0c
    2a2e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2a30:	8a 0d       	add	r24, r10
    2a32:	9b 1d       	adc	r25, r11
    2a34:	a1 1d       	adc	r26, r1
    2a36:	b1 1d       	adc	r27, r1
    2a38:	82 87       	std	Z+10, r24	; 0x0a
    2a3a:	93 87       	std	Z+11, r25	; 0x0b
    2a3c:	a4 87       	std	Z+12, r26	; 0x0c
    2a3e:	b5 87       	std	Z+13, r27	; 0x0d
    2a40:	d8 01       	movw	r26, r16
    2a42:	1a 96       	adiw	r26, 0x0a	; 10
    2a44:	4d 91       	ld	r20, X+
    2a46:	5d 91       	ld	r21, X+
    2a48:	6d 91       	ld	r22, X+
    2a4a:	7c 91       	ld	r23, X
    2a4c:	1d 97       	sbiw	r26, 0x0d	; 13
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    2a4e:	81 14       	cp	r8, r1
    2a50:	91 04       	cpc	r9, r1
    2a52:	09 f0       	breq	.+2      	; 0x2a56 <_ZN6SdFile5writeEPKvj+0x1a6>
    2a54:	71 cf       	rjmp	.-286    	; 0x2938 <_ZN6SdFile5writeEPKvj+0x88>
    2a56:	87 c0       	rjmp	.+270    	; 0x2b66 <_ZN6SdFile5writeEPKvj+0x2b6>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    2a58:	e1 14       	cp	r14, r1
    2a5a:	f1 04       	cpc	r15, r1
    2a5c:	09 f0       	breq	.+2      	; 0x2a60 <_ZN6SdFile5writeEPKvj+0x1b0>
    2a5e:	86 cf       	rjmp	.-244    	; 0x296c <_ZN6SdFile5writeEPKvj+0xbc>
      // start of new cluster
      if (curCluster_ == 0) {
    2a60:	16 96       	adiw	r26, 0x06	; 6
    2a62:	4d 91       	ld	r20, X+
    2a64:	5d 91       	ld	r21, X+
    2a66:	6d 91       	ld	r22, X+
    2a68:	7c 91       	ld	r23, X
    2a6a:	19 97       	sbiw	r26, 0x09	; 9
    2a6c:	41 15       	cp	r20, r1
    2a6e:	51 05       	cpc	r21, r1
    2a70:	61 05       	cpc	r22, r1
    2a72:	71 05       	cpc	r23, r1
    2a74:	59 f4       	brne	.+22     	; 0x2a8c <_ZN6SdFile5writeEPKvj+0x1dc>
        if (firstCluster_ == 0) {
    2a76:	57 96       	adiw	r26, 0x17	; 23
    2a78:	8d 91       	ld	r24, X+
    2a7a:	9d 91       	ld	r25, X+
    2a7c:	0d 90       	ld	r0, X+
    2a7e:	bc 91       	ld	r27, X
    2a80:	a0 2d       	mov	r26, r0
    2a82:	00 97       	sbiw	r24, 0x00	; 0
    2a84:	a1 05       	cpc	r26, r1
    2a86:	b1 05       	cpc	r27, r1
    2a88:	41 f5       	brne	.+80     	; 0x2ada <_ZN6SdFile5writeEPKvj+0x22a>
    2a8a:	21 c0       	rjmp	.+66     	; 0x2ace <_ZN6SdFile5writeEPKvj+0x21e>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    2a8c:	9e 01       	movw	r18, r28
    2a8e:	2f 5f       	subi	r18, 0xFF	; 255
    2a90:	3f 4f       	sbci	r19, 0xFF	; 255
    2a92:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <_ZNK8SdVolume6fatGetEmPm>
    2a96:	88 23       	and	r24, r24
    2a98:	09 f4       	brne	.+2      	; 0x2a9c <_ZN6SdFile5writeEPKvj+0x1ec>
    2a9a:	4a cf       	rjmp	.-364    	; 0x2930 <_ZN6SdFile5writeEPKvj+0x80>
        if (vol_->isEOC(next)) {
    2a9c:	89 81       	ldd	r24, Y+1	; 0x01
    2a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa0:	ab 81       	ldd	r26, Y+3	; 0x03
    2aa2:	bc 81       	ldd	r27, Y+4	; 0x04
    2aa4:	f8 01       	movw	r30, r16
    2aa6:	23 8d       	ldd	r18, Z+27	; 0x1b
    2aa8:	34 8d       	ldd	r19, Z+28	; 0x1c
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2aaa:	f9 01       	movw	r30, r18
    2aac:	27 89       	ldd	r18, Z+23	; 0x17
    2aae:	20 31       	cpi	r18, 0x10	; 16
    2ab0:	29 f0       	breq	.+10     	; 0x2abc <_ZN6SdFile5writeEPKvj+0x20c>
    2ab2:	48 ef       	ldi	r20, 0xF8	; 248
    2ab4:	5f ef       	ldi	r21, 0xFF	; 255
    2ab6:	6f ef       	ldi	r22, 0xFF	; 255
    2ab8:	7f e0       	ldi	r23, 0x0F	; 15
    2aba:	04 c0       	rjmp	.+8      	; 0x2ac4 <_ZN6SdFile5writeEPKvj+0x214>
    2abc:	48 ef       	ldi	r20, 0xF8	; 248
    2abe:	5f ef       	ldi	r21, 0xFF	; 255
    2ac0:	60 e0       	ldi	r22, 0x00	; 0
    2ac2:	70 e0       	ldi	r23, 0x00	; 0
    2ac4:	84 17       	cp	r24, r20
    2ac6:	95 07       	cpc	r25, r21
    2ac8:	a6 07       	cpc	r26, r22
    2aca:	b7 07       	cpc	r27, r23
    2acc:	30 f0       	brcs	.+12     	; 0x2ada <_ZN6SdFile5writeEPKvj+0x22a>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    2ace:	c8 01       	movw	r24, r16
    2ad0:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <_ZN6SdFile10addClusterEv>
    2ad4:	81 11       	cpse	r24, r1
    2ad6:	4a cf       	rjmp	.-364    	; 0x296c <_ZN6SdFile5writeEPKvj+0xbc>
    2ad8:	23 cf       	rjmp	.-442    	; 0x2920 <_ZN6SdFile5writeEPKvj+0x70>
        } else {
          curCluster_ = next;
    2ada:	f8 01       	movw	r30, r16
    2adc:	86 83       	std	Z+6, r24	; 0x06
    2ade:	97 83       	std	Z+7, r25	; 0x07
    2ae0:	a0 87       	std	Z+8, r26	; 0x08
    2ae2:	b1 87       	std	Z+9, r27	; 0x09
    2ae4:	43 cf       	rjmp	.-378    	; 0x296c <_ZN6SdFile5writeEPKvj+0xbc>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    2ae6:	e1 14       	cp	r14, r1
    2ae8:	f1 04       	cpc	r15, r1
    2aea:	29 f5       	brne	.+74     	; 0x2b36 <_ZN6SdFile5writeEPKvj+0x286>
    2aec:	d8 01       	movw	r26, r16
    2aee:	1a 96       	adiw	r26, 0x0a	; 10
    2af0:	4d 91       	ld	r20, X+
    2af2:	5d 91       	ld	r21, X+
    2af4:	6d 91       	ld	r22, X+
    2af6:	7c 91       	ld	r23, X
    2af8:	1d 97       	sbiw	r26, 0x0d	; 13
    2afa:	53 96       	adiw	r26, 0x13	; 19
    2afc:	8d 91       	ld	r24, X+
    2afe:	9d 91       	ld	r25, X+
    2b00:	0d 90       	ld	r0, X+
    2b02:	bc 91       	ld	r27, X
    2b04:	a0 2d       	mov	r26, r0
    2b06:	48 17       	cp	r20, r24
    2b08:	59 07       	cpc	r21, r25
    2b0a:	6a 07       	cpc	r22, r26
    2b0c:	7b 07       	cpc	r23, r27
    2b0e:	98 f0       	brcs	.+38     	; 0x2b36 <_ZN6SdFile5writeEPKvj+0x286>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    2b10:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <_ZN8SdVolume10cacheFlushEv>
    2b14:	88 23       	and	r24, r24
    2b16:	09 f4       	brne	.+2      	; 0x2b1a <_ZN6SdFile5writeEPKvj+0x26a>
    2b18:	03 cf       	rjmp	.-506    	; 0x2920 <_ZN6SdFile5writeEPKvj+0x70>
        SdVolume::cacheBlockNumber_ = block;
    2b1a:	20 92 07 01 	sts	0x0107, r2
    2b1e:	30 92 08 01 	sts	0x0108, r3
    2b22:	40 92 09 01 	sts	0x0109, r4
    2b26:	50 92 0a 01 	sts	0x010A, r5
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    2b2a:	80 91 85 03 	lds	r24, 0x0385
    2b2e:	81 60       	ori	r24, 0x01	; 1
    2b30:	80 93 85 03 	sts	0x0385, r24
    2b34:	08 c0       	rjmp	.+16     	; 0x2b46 <_ZN6SdFile5writeEPKvj+0x296>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    2b36:	41 e0       	ldi	r20, 0x01	; 1
    2b38:	c2 01       	movw	r24, r4
    2b3a:	b1 01       	movw	r22, r2
    2b3c:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <_ZN8SdVolume13cacheRawBlockEmh>
    2b40:	88 23       	and	r24, r24
    2b42:	09 f4       	brne	.+2      	; 0x2b46 <_ZN6SdFile5writeEPKvj+0x296>
    2b44:	ed ce       	rjmp	.-550    	; 0x2920 <_ZN6SdFile5writeEPKvj+0x70>
    2b46:	d6 01       	movw	r26, r12
    2b48:	f7 01       	movw	r30, r14
    2b4a:	e8 57       	subi	r30, 0x78	; 120
    2b4c:	fc 4f       	sbci	r31, 0xFC	; 252
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
    2b4e:	cf 01       	movw	r24, r30
    2b50:	8a 0d       	add	r24, r10
    2b52:	9b 1d       	adc	r25, r11
      while (dst != end) *dst++ = *src++;
    2b54:	e8 17       	cp	r30, r24
    2b56:	f9 07       	cpc	r31, r25
    2b58:	19 f0       	breq	.+6      	; 0x2b60 <_ZN6SdFile5writeEPKvj+0x2b0>
    2b5a:	2d 91       	ld	r18, X+
    2b5c:	21 93       	st	Z+, r18
    2b5e:	fa cf       	rjmp	.-12     	; 0x2b54 <_ZN6SdFile5writeEPKvj+0x2a4>
    2b60:	ca 0c       	add	r12, r10
    2b62:	db 1c       	adc	r13, r11
    2b64:	5e cf       	rjmp	.-324    	; 0x2a22 <_ZN6SdFile5writeEPKvj+0x172>
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    2b66:	53 96       	adiw	r26, 0x13	; 19
    2b68:	cd 90       	ld	r12, X+
    2b6a:	dd 90       	ld	r13, X+
    2b6c:	ed 90       	ld	r14, X+
    2b6e:	fc 90       	ld	r15, X
    2b70:	56 97       	sbiw	r26, 0x16	; 22
    2b72:	14 96       	adiw	r26, 0x04	; 4
    2b74:	8c 91       	ld	r24, X
    2b76:	c4 16       	cp	r12, r20
    2b78:	d5 06       	cpc	r13, r21
    2b7a:	e6 06       	cpc	r14, r22
    2b7c:	f7 06       	cpc	r15, r23
    2b7e:	40 f4       	brcc	.+16     	; 0x2b90 <_ZN6SdFile5writeEPKvj+0x2e0>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    2b80:	f8 01       	movw	r30, r16
    2b82:	43 8b       	std	Z+19, r20	; 0x13
    2b84:	54 8b       	std	Z+20, r21	; 0x14
    2b86:	65 8b       	std	Z+21, r22	; 0x15
    2b88:	76 8b       	std	Z+22, r23	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    2b8a:	80 68       	ori	r24, 0x80	; 128
    2b8c:	84 83       	std	Z+4, r24	; 0x04
    2b8e:	0d c0       	rjmp	.+26     	; 0x2baa <_ZN6SdFile5writeEPKvj+0x2fa>
  } else if (dateTime_ && nbyte) {
    2b90:	20 91 7f 03 	lds	r18, 0x037F
    2b94:	30 91 80 03 	lds	r19, 0x0380
    2b98:	23 2b       	or	r18, r19
    2b9a:	39 f0       	breq	.+14     	; 0x2baa <_ZN6SdFile5writeEPKvj+0x2fa>
    2b9c:	61 14       	cp	r6, r1
    2b9e:	71 04       	cpc	r7, r1
    2ba0:	21 f0       	breq	.+8      	; 0x2baa <_ZN6SdFile5writeEPKvj+0x2fa>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    2ba2:	80 68       	ori	r24, 0x80	; 128
    2ba4:	d8 01       	movw	r26, r16
    2ba6:	14 96       	adiw	r26, 0x04	; 4
    2ba8:	8c 93       	st	X, r24
  }

  if (flags_ & O_SYNC) {
    2baa:	f8 01       	movw	r30, r16
    2bac:	84 81       	ldd	r24, Z+4	; 0x04
    2bae:	83 fd       	sbrc	r24, 3
    2bb0:	02 c0       	rjmp	.+4      	; 0x2bb6 <_ZN6SdFile5writeEPKvj+0x306>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    2bb2:	c3 01       	movw	r24, r6
    2bb4:	07 c0       	rjmp	.+14     	; 0x2bc4 <_ZN6SdFile5writeEPKvj+0x314>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    2bb6:	c8 01       	movw	r24, r16
    2bb8:	0e 94 ef 11 	call	0x23de	; 0x23de <_ZN6SdFile4syncEv>
    2bbc:	88 23       	and	r24, r24
    2bbe:	09 f4       	brne	.+2      	; 0x2bc2 <_ZN6SdFile5writeEPKvj+0x312>
    2bc0:	af ce       	rjmp	.-674    	; 0x2920 <_ZN6SdFile5writeEPKvj+0x70>
    2bc2:	f7 cf       	rjmp	.-18     	; 0x2bb2 <_ZN6SdFile5writeEPKvj+0x302>
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    2bc4:	0f 90       	pop	r0
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	0f 90       	pop	r0
    2bcc:	df 91       	pop	r29
    2bce:	cf 91       	pop	r28
    2bd0:	1f 91       	pop	r17
    2bd2:	0f 91       	pop	r16
    2bd4:	ff 90       	pop	r15
    2bd6:	ef 90       	pop	r14
    2bd8:	df 90       	pop	r13
    2bda:	cf 90       	pop	r12
    2bdc:	bf 90       	pop	r11
    2bde:	af 90       	pop	r10
    2be0:	9f 90       	pop	r9
    2be2:	8f 90       	pop	r8
    2be4:	7f 90       	pop	r7
    2be6:	6f 90       	pop	r6
    2be8:	5f 90       	pop	r5
    2bea:	4f 90       	pop	r4
    2bec:	3f 90       	pop	r3
    2bee:	2f 90       	pop	r2
    2bf0:	08 95       	ret

00002bf2 <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    2bf2:	cf 93       	push	r28
    2bf4:	df 93       	push	r29
    2bf6:	1f 92       	push	r1
    2bf8:	cd b7       	in	r28, 0x3d	; 61
    2bfa:	de b7       	in	r29, 0x3e	; 62
    2bfc:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    2bfe:	41 e0       	ldi	r20, 0x01	; 1
    2c00:	50 e0       	ldi	r21, 0x00	; 0
    2c02:	be 01       	movw	r22, r28
    2c04:	6f 5f       	subi	r22, 0xFF	; 255
    2c06:	7f 4f       	sbci	r23, 0xFF	; 255
    2c08:	0e 94 58 14 	call	0x28b0	; 0x28b0 <_ZN6SdFile5writeEPKvj>
}
    2c0c:	0f 90       	pop	r0
    2c0e:	df 91       	pop	r29
    2c10:	cf 91       	pop	r28
    2c12:	08 95       	ret

00002c14 <_ZN8SdVolume10cacheFlushEv>:

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    2c14:	80 91 85 03 	lds	r24, 0x0385
    2c18:	88 23       	and	r24, r24
    2c1a:	a9 f1       	breq	.+106    	; 0x2c86 <_ZN8SdVolume10cacheFlushEv+0x72>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    2c1c:	40 91 07 01 	lds	r20, 0x0107
    2c20:	50 91 08 01 	lds	r21, 0x0108
    2c24:	60 91 09 01 	lds	r22, 0x0109
    2c28:	70 91 0a 01 	lds	r23, 0x010A
    2c2c:	28 e8       	ldi	r18, 0x88	; 136
    2c2e:	33 e0       	ldi	r19, 0x03	; 3
    2c30:	80 91 86 03 	lds	r24, 0x0386
    2c34:	90 91 87 03 	lds	r25, 0x0387
    2c38:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <_ZN7Sd2Card10writeBlockEmPKh>
    2c3c:	81 11       	cpse	r24, r1
    2c3e:	02 c0       	rjmp	.+4      	; 0x2c44 <_ZN8SdVolume10cacheFlushEv+0x30>
      return false;
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	08 95       	ret
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    2c44:	40 91 81 03 	lds	r20, 0x0381
    2c48:	50 91 82 03 	lds	r21, 0x0382
    2c4c:	60 91 83 03 	lds	r22, 0x0383
    2c50:	70 91 84 03 	lds	r23, 0x0384
    2c54:	41 15       	cp	r20, r1
    2c56:	51 05       	cpc	r21, r1
    2c58:	61 05       	cpc	r22, r1
    2c5a:	71 05       	cpc	r23, r1
    2c5c:	91 f0       	breq	.+36     	; 0x2c82 <_ZN8SdVolume10cacheFlushEv+0x6e>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    2c5e:	28 e8       	ldi	r18, 0x88	; 136
    2c60:	33 e0       	ldi	r19, 0x03	; 3
    2c62:	80 91 86 03 	lds	r24, 0x0386
    2c66:	90 91 87 03 	lds	r25, 0x0387
    2c6a:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <_ZN7Sd2Card10writeBlockEmPKh>
    2c6e:	88 23       	and	r24, r24
    2c70:	39 f3       	breq	.-50     	; 0x2c40 <_ZN8SdVolume10cacheFlushEv+0x2c>
        return false;
      }
      cacheMirrorBlock_ = 0;
    2c72:	10 92 81 03 	sts	0x0381, r1
    2c76:	10 92 82 03 	sts	0x0382, r1
    2c7a:	10 92 83 03 	sts	0x0383, r1
    2c7e:	10 92 84 03 	sts	0x0384, r1
    }
    cacheDirty_ = 0;
    2c82:	10 92 85 03 	sts	0x0385, r1
  }
  return true;
    2c86:	81 e0       	ldi	r24, 0x01	; 1
}
    2c88:	08 95       	ret

00002c8a <_ZN8SdVolume13cacheRawBlockEmh>:
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    2c8a:	cf 92       	push	r12
    2c8c:	df 92       	push	r13
    2c8e:	ef 92       	push	r14
    2c90:	ff 92       	push	r15
    2c92:	cf 93       	push	r28
    2c94:	6b 01       	movw	r12, r22
    2c96:	7c 01       	movw	r14, r24
    2c98:	c4 2f       	mov	r28, r20
  if (cacheBlockNumber_ != blockNumber) {
    2c9a:	80 91 07 01 	lds	r24, 0x0107
    2c9e:	90 91 08 01 	lds	r25, 0x0108
    2ca2:	a0 91 09 01 	lds	r26, 0x0109
    2ca6:	b0 91 0a 01 	lds	r27, 0x010A
    2caa:	8c 15       	cp	r24, r12
    2cac:	9d 05       	cpc	r25, r13
    2cae:	ae 05       	cpc	r26, r14
    2cb0:	bf 05       	cpc	r27, r15
    2cb2:	d1 f0       	breq	.+52     	; 0x2ce8 <_ZN8SdVolume13cacheRawBlockEmh+0x5e>
    if (!cacheFlush()) return false;
    2cb4:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <_ZN8SdVolume10cacheFlushEv>
    2cb8:	81 11       	cpse	r24, r1
    2cba:	02 c0       	rjmp	.+4      	; 0x2cc0 <_ZN8SdVolume13cacheRawBlockEmh+0x36>
    2cbc:	80 e0       	ldi	r24, 0x00	; 0
    2cbe:	1a c0       	rjmp	.+52     	; 0x2cf4 <_ZN8SdVolume13cacheRawBlockEmh+0x6a>
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    2cc0:	28 e8       	ldi	r18, 0x88	; 136
    2cc2:	33 e0       	ldi	r19, 0x03	; 3
    2cc4:	b7 01       	movw	r22, r14
    2cc6:	a6 01       	movw	r20, r12
    2cc8:	80 91 86 03 	lds	r24, 0x0386
    2ccc:	90 91 87 03 	lds	r25, 0x0387
    2cd0:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <_ZN7Sd2Card9readBlockEmPh>
    2cd4:	88 23       	and	r24, r24
    2cd6:	91 f3       	breq	.-28     	; 0x2cbc <_ZN8SdVolume13cacheRawBlockEmh+0x32>
    cacheBlockNumber_ = blockNumber;
    2cd8:	c0 92 07 01 	sts	0x0107, r12
    2cdc:	d0 92 08 01 	sts	0x0108, r13
    2ce0:	e0 92 09 01 	sts	0x0109, r14
    2ce4:	f0 92 0a 01 	sts	0x010A, r15
  }
  cacheDirty_ |= action;
    2ce8:	80 91 85 03 	lds	r24, 0x0385
    2cec:	c8 2b       	or	r28, r24
    2cee:	c0 93 85 03 	sts	0x0385, r28
  return true;
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
}
    2cf4:	cf 91       	pop	r28
    2cf6:	ff 90       	pop	r15
    2cf8:	ef 90       	pop	r14
    2cfa:	df 90       	pop	r13
    2cfc:	cf 90       	pop	r12
    2cfe:	08 95       	ret

00002d00 <_ZN8SdVolume14cacheZeroBlockEm>:
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    2d00:	cf 92       	push	r12
    2d02:	df 92       	push	r13
    2d04:	ef 92       	push	r14
    2d06:	ff 92       	push	r15
    2d08:	6b 01       	movw	r12, r22
    2d0a:	7c 01       	movw	r14, r24
  if (!cacheFlush()) return false;
    2d0c:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <_ZN8SdVolume10cacheFlushEv>
    2d10:	88 23       	and	r24, r24
    2d12:	a9 f0       	breq	.+42     	; 0x2d3e <_ZN8SdVolume14cacheZeroBlockEm+0x3e>
    2d14:	e8 e8       	ldi	r30, 0x88	; 136
    2d16:	f3 e0       	ldi	r31, 0x03	; 3

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    cacheBuffer_.data[i] = 0;
    2d18:	11 92       	st	Z+, r1
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
  if (!cacheFlush()) return false;

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    2d1a:	85 e0       	ldi	r24, 0x05	; 5
    2d1c:	e8 38       	cpi	r30, 0x88	; 136
    2d1e:	f8 07       	cpc	r31, r24
    2d20:	d9 f7       	brne	.-10     	; 0x2d18 <_ZN8SdVolume14cacheZeroBlockEm+0x18>
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
    2d22:	c0 92 07 01 	sts	0x0107, r12
    2d26:	d0 92 08 01 	sts	0x0108, r13
    2d2a:	e0 92 09 01 	sts	0x0109, r14
    2d2e:	f0 92 0a 01 	sts	0x010A, r15
    2d32:	80 91 85 03 	lds	r24, 0x0385
    2d36:	81 60       	ori	r24, 0x01	; 1
    2d38:	80 93 85 03 	sts	0x0385, r24
  cacheSetDirty();
  return true;
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
}
    2d3e:	ff 90       	pop	r15
    2d40:	ef 90       	pop	r14
    2d42:	df 90       	pop	r13
    2d44:	cf 90       	pop	r12
    2d46:	08 95       	ret

00002d48 <_ZNK8SdVolume6fatGetEmPm>:
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    2d48:	8f 92       	push	r8
    2d4a:	9f 92       	push	r9
    2d4c:	af 92       	push	r10
    2d4e:	bf 92       	push	r11
    2d50:	cf 92       	push	r12
    2d52:	df 92       	push	r13
    2d54:	ef 92       	push	r14
    2d56:	ff 92       	push	r15
    2d58:	0f 93       	push	r16
    2d5a:	1f 93       	push	r17
    2d5c:	cf 93       	push	r28
    2d5e:	df 93       	push	r29
    2d60:	fc 01       	movw	r30, r24
  if (cluster > (clusterCount_ + 1)) return false;
    2d62:	81 85       	ldd	r24, Z+9	; 0x09
    2d64:	92 85       	ldd	r25, Z+10	; 0x0a
    2d66:	a3 85       	ldd	r26, Z+11	; 0x0b
    2d68:	b4 85       	ldd	r27, Z+12	; 0x0c
    2d6a:	01 96       	adiw	r24, 0x01	; 1
    2d6c:	a1 1d       	adc	r26, r1
    2d6e:	b1 1d       	adc	r27, r1
    2d70:	84 17       	cp	r24, r20
    2d72:	95 07       	cpc	r25, r21
    2d74:	a6 07       	cpc	r26, r22
    2d76:	b7 07       	cpc	r27, r23
    2d78:	10 f4       	brcc	.+4      	; 0x2d7e <_ZNK8SdVolume6fatGetEmPm+0x36>
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
    2d7c:	5c c0       	rjmp	.+184    	; 0x2e36 <_ZNK8SdVolume6fatGetEmPm+0xee>
  uint32_t lba = fatStartBlock_;
    2d7e:	83 89       	ldd	r24, Z+19	; 0x13
    2d80:	94 89       	ldd	r25, Z+20	; 0x14
    2d82:	a5 89       	ldd	r26, Z+21	; 0x15
    2d84:	b6 89       	ldd	r27, Z+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2d86:	c7 89       	ldd	r28, Z+23	; 0x17
    2d88:	c0 31       	cpi	r28, 0x10	; 16
    2d8a:	29 f4       	brne	.+10     	; 0x2d96 <_ZNK8SdVolume6fatGetEmPm+0x4e>
    2d8c:	85 2e       	mov	r8, r21
    2d8e:	96 2e       	mov	r9, r22
    2d90:	a7 2e       	mov	r10, r23
    2d92:	bb 24       	eor	r11, r11
    2d94:	09 c0       	rjmp	.+18     	; 0x2da8 <_ZNK8SdVolume6fatGetEmPm+0x60>
    2d96:	4a 01       	movw	r8, r20
    2d98:	5b 01       	movw	r10, r22
    2d9a:	c7 e0       	ldi	r28, 0x07	; 7
    2d9c:	b6 94       	lsr	r11
    2d9e:	a7 94       	ror	r10
    2da0:	97 94       	ror	r9
    2da2:	87 94       	ror	r8
    2da4:	ca 95       	dec	r28
    2da6:	d1 f7       	brne	.-12     	; 0x2d9c <_ZNK8SdVolume6fatGetEmPm+0x54>
    2da8:	e9 01       	movw	r28, r18
    2daa:	6a 01       	movw	r12, r20
    2dac:	7b 01       	movw	r14, r22
    2dae:	8f 01       	movw	r16, r30
    2db0:	bc 01       	movw	r22, r24
    2db2:	cd 01       	movw	r24, r26
    2db4:	68 0d       	add	r22, r8
    2db6:	79 1d       	adc	r23, r9
    2db8:	8a 1d       	adc	r24, r10
    2dba:	9b 1d       	adc	r25, r11
  if (lba != cacheBlockNumber_) {
    2dbc:	80 90 07 01 	lds	r8, 0x0107
    2dc0:	90 90 08 01 	lds	r9, 0x0108
    2dc4:	a0 90 09 01 	lds	r10, 0x0109
    2dc8:	b0 90 0a 01 	lds	r11, 0x010A
    2dcc:	68 15       	cp	r22, r8
    2dce:	79 05       	cpc	r23, r9
    2dd0:	8a 05       	cpc	r24, r10
    2dd2:	9b 05       	cpc	r25, r11
    2dd4:	99 f4       	brne	.+38     	; 0x2dfc <_ZNK8SdVolume6fatGetEmPm+0xb4>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    2dd6:	f8 01       	movw	r30, r16
    2dd8:	87 89       	ldd	r24, Z+23	; 0x17
    2dda:	80 31       	cpi	r24, 0x10	; 16
    2ddc:	a9 f4       	brne	.+42     	; 0x2e08 <_ZNK8SdVolume6fatGetEmPm+0xc0>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    2dde:	b7 01       	movw	r22, r14
    2de0:	a6 01       	movw	r20, r12
    2de2:	55 27       	eor	r21, r21
    2de4:	66 27       	eor	r22, r22
    2de6:	77 27       	eor	r23, r23
    2de8:	44 0f       	add	r20, r20
    2dea:	55 1f       	adc	r21, r21
    2dec:	fa 01       	movw	r30, r20
    2dee:	e8 57       	subi	r30, 0x78	; 120
    2df0:	fc 4f       	sbci	r31, 0xFC	; 252
    2df2:	80 81       	ld	r24, Z
    2df4:	91 81       	ldd	r25, Z+1	; 0x01
    2df6:	a0 e0       	ldi	r26, 0x00	; 0
    2df8:	b0 e0       	ldi	r27, 0x00	; 0
    2dfa:	18 c0       	rjmp	.+48     	; 0x2e2c <_ZNK8SdVolume6fatGetEmPm+0xe4>
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    2dfc:	40 e0       	ldi	r20, 0x00	; 0
    2dfe:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <_ZN8SdVolume13cacheRawBlockEmh>
    2e02:	81 11       	cpse	r24, r1
    2e04:	e8 cf       	rjmp	.-48     	; 0x2dd6 <_ZNK8SdVolume6fatGetEmPm+0x8e>
    2e06:	b9 cf       	rjmp	.-142    	; 0x2d7a <_ZNK8SdVolume6fatGetEmPm+0x32>
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    2e08:	b7 01       	movw	r22, r14
    2e0a:	a6 01       	movw	r20, r12
    2e0c:	4f 77       	andi	r20, 0x7F	; 127
    2e0e:	55 27       	eor	r21, r21
    2e10:	66 27       	eor	r22, r22
    2e12:	77 27       	eor	r23, r23
    2e14:	44 0f       	add	r20, r20
    2e16:	55 1f       	adc	r21, r21
    2e18:	44 0f       	add	r20, r20
    2e1a:	55 1f       	adc	r21, r21
    2e1c:	fa 01       	movw	r30, r20
    2e1e:	e8 57       	subi	r30, 0x78	; 120
    2e20:	fc 4f       	sbci	r31, 0xFC	; 252
    2e22:	80 81       	ld	r24, Z
    2e24:	91 81       	ldd	r25, Z+1	; 0x01
    2e26:	a2 81       	ldd	r26, Z+2	; 0x02
    2e28:	b3 81       	ldd	r27, Z+3	; 0x03
    2e2a:	bf 70       	andi	r27, 0x0F	; 15
    2e2c:	88 83       	st	Y, r24
    2e2e:	99 83       	std	Y+1, r25	; 0x01
    2e30:	aa 83       	std	Y+2, r26	; 0x02
    2e32:	bb 83       	std	Y+3, r27	; 0x03
    2e34:	81 e0       	ldi	r24, 0x01	; 1
  }
  return true;
}
    2e36:	df 91       	pop	r29
    2e38:	cf 91       	pop	r28
    2e3a:	1f 91       	pop	r17
    2e3c:	0f 91       	pop	r16
    2e3e:	ff 90       	pop	r15
    2e40:	ef 90       	pop	r14
    2e42:	df 90       	pop	r13
    2e44:	cf 90       	pop	r12
    2e46:	bf 90       	pop	r11
    2e48:	af 90       	pop	r10
    2e4a:	9f 90       	pop	r9
    2e4c:	8f 90       	pop	r8
    2e4e:	08 95       	ret

00002e50 <_ZNK8SdVolume9chainSizeEmPm>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    2e50:	4f 92       	push	r4
    2e52:	5f 92       	push	r5
    2e54:	6f 92       	push	r6
    2e56:	7f 92       	push	r7
    2e58:	af 92       	push	r10
    2e5a:	bf 92       	push	r11
    2e5c:	cf 92       	push	r12
    2e5e:	df 92       	push	r13
    2e60:	ef 92       	push	r14
    2e62:	ff 92       	push	r15
    2e64:	0f 93       	push	r16
    2e66:	1f 93       	push	r17
    2e68:	cf 93       	push	r28
    2e6a:	df 93       	push	r29
    2e6c:	00 d0       	rcall	.+0      	; 0x2e6e <_ZNK8SdVolume9chainSizeEmPm+0x1e>
    2e6e:	00 d0       	rcall	.+0      	; 0x2e70 <_ZNK8SdVolume9chainSizeEmPm+0x20>
    2e70:	cd b7       	in	r28, 0x3d	; 61
    2e72:	de b7       	in	r29, 0x3e	; 62
    2e74:	8c 01       	movw	r16, r24
    2e76:	49 83       	std	Y+1, r20	; 0x01
    2e78:	5a 83       	std	Y+2, r21	; 0x02
    2e7a:	6b 83       	std	Y+3, r22	; 0x03
    2e7c:	7c 83       	std	Y+4, r23	; 0x04
    2e7e:	59 01       	movw	r10, r18
  uint32_t s = 0;
    2e80:	c1 2c       	mov	r12, r1
    2e82:	d1 2c       	mov	r13, r1
    2e84:	76 01       	movw	r14, r12
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    2e86:	41 2c       	mov	r4, r1
    2e88:	82 e0       	ldi	r24, 0x02	; 2
    2e8a:	58 2e       	mov	r5, r24
    2e8c:	61 2c       	mov	r6, r1
    2e8e:	71 2c       	mov	r7, r1
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    2e90:	49 81       	ldd	r20, Y+1	; 0x01
    2e92:	5a 81       	ldd	r21, Y+2	; 0x02
    2e94:	6b 81       	ldd	r22, Y+3	; 0x03
    2e96:	7c 81       	ldd	r23, Y+4	; 0x04
    2e98:	9e 01       	movw	r18, r28
    2e9a:	2f 5f       	subi	r18, 0xFF	; 255
    2e9c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e9e:	c8 01       	movw	r24, r16
    2ea0:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <_ZNK8SdVolume6fatGetEmPm>
    2ea4:	88 23       	and	r24, r24
    2ea6:	51 f1       	breq	.+84     	; 0x2efc <_ZNK8SdVolume9chainSizeEmPm+0xac>
    s += 512UL << clusterSizeShift_;
    2ea8:	d3 01       	movw	r26, r6
    2eaa:	c2 01       	movw	r24, r4
    2eac:	f8 01       	movw	r30, r16
    2eae:	05 84       	ldd	r0, Z+13	; 0x0d
    2eb0:	04 c0       	rjmp	.+8      	; 0x2eba <_ZNK8SdVolume9chainSizeEmPm+0x6a>
    2eb2:	88 0f       	add	r24, r24
    2eb4:	99 1f       	adc	r25, r25
    2eb6:	aa 1f       	adc	r26, r26
    2eb8:	bb 1f       	adc	r27, r27
    2eba:	0a 94       	dec	r0
    2ebc:	d2 f7       	brpl	.-12     	; 0x2eb2 <_ZNK8SdVolume9chainSizeEmPm+0x62>
    2ebe:	c8 0e       	add	r12, r24
    2ec0:	d9 1e       	adc	r13, r25
    2ec2:	ea 1e       	adc	r14, r26
    2ec4:	fb 1e       	adc	r15, r27
  } while (!isEOC(cluster));
    2ec6:	49 81       	ldd	r20, Y+1	; 0x01
    2ec8:	5a 81       	ldd	r21, Y+2	; 0x02
    2eca:	6b 81       	ldd	r22, Y+3	; 0x03
    2ecc:	7c 81       	ldd	r23, Y+4	; 0x04
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2ece:	87 89       	ldd	r24, Z+23	; 0x17
    2ed0:	80 31       	cpi	r24, 0x10	; 16
    2ed2:	29 f0       	breq	.+10     	; 0x2ede <_ZNK8SdVolume9chainSizeEmPm+0x8e>
    2ed4:	88 ef       	ldi	r24, 0xF8	; 248
    2ed6:	9f ef       	ldi	r25, 0xFF	; 255
    2ed8:	af ef       	ldi	r26, 0xFF	; 255
    2eda:	bf e0       	ldi	r27, 0x0F	; 15
    2edc:	04 c0       	rjmp	.+8      	; 0x2ee6 <_ZNK8SdVolume9chainSizeEmPm+0x96>
    2ede:	88 ef       	ldi	r24, 0xF8	; 248
    2ee0:	9f ef       	ldi	r25, 0xFF	; 255
    2ee2:	a0 e0       	ldi	r26, 0x00	; 0
    2ee4:	b0 e0       	ldi	r27, 0x00	; 0
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    2ee6:	48 17       	cp	r20, r24
    2ee8:	59 07       	cpc	r21, r25
    2eea:	6a 07       	cpc	r22, r26
    2eec:	7b 07       	cpc	r23, r27
    2eee:	80 f2       	brcs	.-96     	; 0x2e90 <_ZNK8SdVolume9chainSizeEmPm+0x40>
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    2ef0:	f5 01       	movw	r30, r10
    2ef2:	c0 82       	st	Z, r12
    2ef4:	d1 82       	std	Z+1, r13	; 0x01
    2ef6:	e2 82       	std	Z+2, r14	; 0x02
    2ef8:	f3 82       	std	Z+3, r15	; 0x03
  return true;
    2efa:	81 e0       	ldi	r24, 0x01	; 1
}
    2efc:	0f 90       	pop	r0
    2efe:	0f 90       	pop	r0
    2f00:	0f 90       	pop	r0
    2f02:	0f 90       	pop	r0
    2f04:	df 91       	pop	r29
    2f06:	cf 91       	pop	r28
    2f08:	1f 91       	pop	r17
    2f0a:	0f 91       	pop	r16
    2f0c:	ff 90       	pop	r15
    2f0e:	ef 90       	pop	r14
    2f10:	df 90       	pop	r13
    2f12:	cf 90       	pop	r12
    2f14:	bf 90       	pop	r11
    2f16:	af 90       	pop	r10
    2f18:	7f 90       	pop	r7
    2f1a:	6f 90       	pop	r6
    2f1c:	5f 90       	pop	r5
    2f1e:	4f 90       	pop	r4
    2f20:	08 95       	ret

00002f22 <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    2f22:	4f 92       	push	r4
    2f24:	5f 92       	push	r5
    2f26:	6f 92       	push	r6
    2f28:	7f 92       	push	r7
    2f2a:	8f 92       	push	r8
    2f2c:	9f 92       	push	r9
    2f2e:	af 92       	push	r10
    2f30:	bf 92       	push	r11
    2f32:	cf 92       	push	r12
    2f34:	df 92       	push	r13
    2f36:	ef 92       	push	r14
    2f38:	ff 92       	push	r15
    2f3a:	0f 93       	push	r16
    2f3c:	1f 93       	push	r17
    2f3e:	cf 93       	push	r28
    2f40:	df 93       	push	r29
    2f42:	ec 01       	movw	r28, r24
    2f44:	6a 01       	movw	r12, r20
    2f46:	7b 01       	movw	r14, r22
    2f48:	28 01       	movw	r4, r16
    2f4a:	39 01       	movw	r6, r18
  // error if reserved cluster
  if (cluster < 2) return false;
    2f4c:	42 30       	cpi	r20, 0x02	; 2
    2f4e:	51 05       	cpc	r21, r1
    2f50:	61 05       	cpc	r22, r1
    2f52:	71 05       	cpc	r23, r1
    2f54:	10 f4       	brcc	.+4      	; 0x2f5a <_ZN8SdVolume6fatPutEmm+0x38>
    2f56:	80 e0       	ldi	r24, 0x00	; 0
    2f58:	73 c0       	rjmp	.+230    	; 0x3040 <_ZN8SdVolume6fatPutEmm+0x11e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    2f5a:	89 85       	ldd	r24, Y+9	; 0x09
    2f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f5e:	ab 85       	ldd	r26, Y+11	; 0x0b
    2f60:	bc 85       	ldd	r27, Y+12	; 0x0c
    2f62:	01 96       	adiw	r24, 0x01	; 1
    2f64:	a1 1d       	adc	r26, r1
    2f66:	b1 1d       	adc	r27, r1
    2f68:	84 17       	cp	r24, r20
    2f6a:	95 07       	cpc	r25, r21
    2f6c:	a6 07       	cpc	r26, r22
    2f6e:	b7 07       	cpc	r27, r23
    2f70:	90 f3       	brcs	.-28     	; 0x2f56 <_ZN8SdVolume6fatPutEmm+0x34>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    2f72:	8b 88       	ldd	r8, Y+19	; 0x13
    2f74:	9c 88       	ldd	r9, Y+20	; 0x14
    2f76:	ad 88       	ldd	r10, Y+21	; 0x15
    2f78:	be 88       	ldd	r11, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2f7a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f7c:	80 31       	cpi	r24, 0x10	; 16
    2f7e:	29 f4       	brne	.+10     	; 0x2f8a <_ZN8SdVolume6fatPutEmm+0x68>
    2f80:	bb 27       	eor	r27, r27
    2f82:	af 2d       	mov	r26, r15
    2f84:	9e 2d       	mov	r25, r14
    2f86:	8d 2d       	mov	r24, r13
    2f88:	09 c0       	rjmp	.+18     	; 0x2f9c <_ZN8SdVolume6fatPutEmm+0x7a>
    2f8a:	db 01       	movw	r26, r22
    2f8c:	ca 01       	movw	r24, r20
    2f8e:	47 e0       	ldi	r20, 0x07	; 7
    2f90:	b6 95       	lsr	r27
    2f92:	a7 95       	ror	r26
    2f94:	97 95       	ror	r25
    2f96:	87 95       	ror	r24
    2f98:	4a 95       	dec	r20
    2f9a:	d1 f7       	brne	.-12     	; 0x2f90 <_ZN8SdVolume6fatPutEmm+0x6e>
    2f9c:	88 0e       	add	r8, r24
    2f9e:	99 1e       	adc	r9, r25
    2fa0:	aa 1e       	adc	r10, r26
    2fa2:	bb 1e       	adc	r11, r27

  if (lba != cacheBlockNumber_) {
    2fa4:	80 91 07 01 	lds	r24, 0x0107
    2fa8:	90 91 08 01 	lds	r25, 0x0108
    2fac:	a0 91 09 01 	lds	r26, 0x0109
    2fb0:	b0 91 0a 01 	lds	r27, 0x010A
    2fb4:	88 16       	cp	r8, r24
    2fb6:	99 06       	cpc	r9, r25
    2fb8:	aa 06       	cpc	r10, r26
    2fba:	bb 06       	cpc	r11, r27
    2fbc:	79 f4       	brne	.+30     	; 0x2fdc <_ZN8SdVolume6fatPutEmm+0xba>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    2fbe:	8f 89       	ldd	r24, Y+23	; 0x17
    2fc0:	80 31       	cpi	r24, 0x10	; 16
    2fc2:	a1 f4       	brne	.+40     	; 0x2fec <_ZN8SdVolume6fatPutEmm+0xca>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    2fc4:	dd 24       	eor	r13, r13
    2fc6:	ee 24       	eor	r14, r14
    2fc8:	ff 24       	eor	r15, r15
    2fca:	c6 01       	movw	r24, r12
    2fcc:	88 0f       	add	r24, r24
    2fce:	99 1f       	adc	r25, r25
    2fd0:	fc 01       	movw	r30, r24
    2fd2:	e8 57       	subi	r30, 0x78	; 120
    2fd4:	fc 4f       	sbci	r31, 0xFC	; 252
    2fd6:	51 82       	std	Z+1, r5	; 0x01
    2fd8:	40 82       	st	Z, r4
    2fda:	19 c0       	rjmp	.+50     	; 0x300e <_ZN8SdVolume6fatPutEmm+0xec>
  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    2fdc:	40 e0       	ldi	r20, 0x00	; 0
    2fde:	c5 01       	movw	r24, r10
    2fe0:	b4 01       	movw	r22, r8
    2fe2:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <_ZN8SdVolume13cacheRawBlockEmh>
    2fe6:	81 11       	cpse	r24, r1
    2fe8:	ea cf       	rjmp	.-44     	; 0x2fbe <_ZN8SdVolume6fatPutEmm+0x9c>
    2fea:	b5 cf       	rjmp	.-150    	; 0x2f56 <_ZN8SdVolume6fatPutEmm+0x34>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    2fec:	e8 94       	clt
    2fee:	c7 f8       	bld	r12, 7
    2ff0:	dd 24       	eor	r13, r13
    2ff2:	ee 24       	eor	r14, r14
    2ff4:	ff 24       	eor	r15, r15
    2ff6:	c6 01       	movw	r24, r12
    2ff8:	88 0f       	add	r24, r24
    2ffa:	99 1f       	adc	r25, r25
    2ffc:	88 0f       	add	r24, r24
    2ffe:	99 1f       	adc	r25, r25
    3000:	fc 01       	movw	r30, r24
    3002:	e8 57       	subi	r30, 0x78	; 120
    3004:	fc 4f       	sbci	r31, 0xFC	; 252
    3006:	40 82       	st	Z, r4
    3008:	51 82       	std	Z+1, r5	; 0x01
    300a:	62 82       	std	Z+2, r6	; 0x02
    300c:	73 82       	std	Z+3, r7	; 0x03
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    300e:	80 91 85 03 	lds	r24, 0x0385
    3012:	81 60       	ori	r24, 0x01	; 1
    3014:	80 93 85 03 	sts	0x0385, r24
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    3018:	8a 89       	ldd	r24, Y+18	; 0x12
    301a:	82 30       	cpi	r24, 0x02	; 2
    301c:	80 f0       	brcs	.+32     	; 0x303e <_ZN8SdVolume6fatPutEmm+0x11c>
    301e:	8d 81       	ldd	r24, Y+5	; 0x05
    3020:	9e 81       	ldd	r25, Y+6	; 0x06
    3022:	af 81       	ldd	r26, Y+7	; 0x07
    3024:	b8 85       	ldd	r27, Y+8	; 0x08
    3026:	88 0e       	add	r8, r24
    3028:	99 1e       	adc	r9, r25
    302a:	aa 1e       	adc	r10, r26
    302c:	bb 1e       	adc	r11, r27
    302e:	80 92 81 03 	sts	0x0381, r8
    3032:	90 92 82 03 	sts	0x0382, r9
    3036:	a0 92 83 03 	sts	0x0383, r10
    303a:	b0 92 84 03 	sts	0x0384, r11
  return true;
    303e:	81 e0       	ldi	r24, 0x01	; 1
}
    3040:	df 91       	pop	r29
    3042:	cf 91       	pop	r28
    3044:	1f 91       	pop	r17
    3046:	0f 91       	pop	r16
    3048:	ff 90       	pop	r15
    304a:	ef 90       	pop	r14
    304c:	df 90       	pop	r13
    304e:	cf 90       	pop	r12
    3050:	bf 90       	pop	r11
    3052:	af 90       	pop	r10
    3054:	9f 90       	pop	r9
    3056:	8f 90       	pop	r8
    3058:	7f 90       	pop	r7
    305a:	6f 90       	pop	r6
    305c:	5f 90       	pop	r5
    305e:	4f 90       	pop	r4
    3060:	08 95       	ret

00003062 <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    3062:	2f 92       	push	r2
    3064:	3f 92       	push	r3
    3066:	4f 92       	push	r4
    3068:	5f 92       	push	r5
    306a:	6f 92       	push	r6
    306c:	7f 92       	push	r7
    306e:	9f 92       	push	r9
    3070:	af 92       	push	r10
    3072:	bf 92       	push	r11
    3074:	cf 92       	push	r12
    3076:	df 92       	push	r13
    3078:	ef 92       	push	r14
    307a:	ff 92       	push	r15
    307c:	0f 93       	push	r16
    307e:	1f 93       	push	r17
    3080:	cf 93       	push	r28
    3082:	df 93       	push	r29
    3084:	cd b7       	in	r28, 0x3d	; 61
    3086:	de b7       	in	r29, 0x3e	; 62
    3088:	60 97       	sbiw	r28, 0x10	; 16
    308a:	0f b6       	in	r0, 0x3f	; 63
    308c:	f8 94       	cli
    308e:	de bf       	out	0x3e, r29	; 62
    3090:	0f be       	out	0x3f, r0	; 63
    3092:	cd bf       	out	0x3d, r28	; 61
    3094:	5c 01       	movw	r10, r24
    3096:	49 87       	std	Y+9, r20	; 0x09
    3098:	5a 87       	std	Y+10, r21	; 0x0a
    309a:	6b 87       	std	Y+11, r22	; 0x0b
    309c:	7c 87       	std	Y+12, r23	; 0x0c
    309e:	19 01       	movw	r2, r18

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    30a0:	d9 01       	movw	r26, r18
    30a2:	cd 90       	ld	r12, X+
    30a4:	dd 90       	ld	r13, X+
    30a6:	ed 90       	ld	r14, X+
    30a8:	fc 90       	ld	r15, X
    30aa:	c1 14       	cp	r12, r1
    30ac:	d1 04       	cpc	r13, r1
    30ae:	e1 04       	cpc	r14, r1
    30b0:	f1 04       	cpc	r15, r1
    30b2:	31 f0       	breq	.+12     	; 0x30c0 <_ZN8SdVolume15allocContiguousEmPm+0x5e>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    30b4:	bf ef       	ldi	r27, 0xFF	; 255
    30b6:	cb 1a       	sub	r12, r27
    30b8:	db 0a       	sbc	r13, r27
    30ba:	eb 0a       	sbc	r14, r27
    30bc:	fb 0a       	sbc	r15, r27
    30be:	10 c0       	rjmp	.+32     	; 0x30e0 <_ZN8SdVolume15allocContiguousEmPm+0x7e>

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    30c0:	fc 01       	movw	r30, r24
    30c2:	c0 80       	ld	r12, Z
    30c4:	d1 80       	ldd	r13, Z+1	; 0x01
    30c6:	e2 80       	ldd	r14, Z+2	; 0x02
    30c8:	f3 80       	ldd	r15, Z+3	; 0x03

    // save next search start if one cluster
    setStart = 1 == count;
    30ca:	99 24       	eor	r9, r9
    30cc:	93 94       	inc	r9
    30ce:	09 85       	ldd	r16, Y+9	; 0x09
    30d0:	1a 85       	ldd	r17, Y+10	; 0x0a
    30d2:	2b 85       	ldd	r18, Y+11	; 0x0b
    30d4:	3c 85       	ldd	r19, Y+12	; 0x0c
    30d6:	01 30       	cpi	r16, 0x01	; 1
    30d8:	11 05       	cpc	r17, r1
    30da:	21 05       	cpc	r18, r1
    30dc:	31 05       	cpc	r19, r1
    30de:	09 f0       	breq	.+2      	; 0x30e2 <_ZN8SdVolume15allocContiguousEmPm+0x80>
    30e0:	91 2c       	mov	r9, r1
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    30e2:	f5 01       	movw	r30, r10
    30e4:	81 85       	ldd	r24, Z+9	; 0x09
    30e6:	92 85       	ldd	r25, Z+10	; 0x0a
    30e8:	a3 85       	ldd	r26, Z+11	; 0x0b
    30ea:	b4 85       	ldd	r27, Z+12	; 0x0c
    30ec:	8c 01       	movw	r16, r24
    30ee:	9d 01       	movw	r18, r26
    30f0:	0f 5f       	subi	r16, 0xFF	; 255
    30f2:	1f 4f       	sbci	r17, 0xFF	; 255
    30f4:	2f 4f       	sbci	r18, 0xFF	; 255
    30f6:	3f 4f       	sbci	r19, 0xFF	; 255
    30f8:	0d 87       	std	Y+13, r16	; 0x0d
    30fa:	1e 87       	std	Y+14, r17	; 0x0e
    30fc:	2f 87       	std	Y+15, r18	; 0x0f
    30fe:	38 8b       	std	Y+16, r19	; 0x10

    // save next search start if one cluster
    setStart = 1 == count;
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    3100:	26 01       	movw	r4, r12
    3102:	37 01       	movw	r6, r14

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    3104:	1d 82       	std	Y+5, r1	; 0x05
    3106:	1e 82       	std	Y+6, r1	; 0x06
    3108:	1f 82       	std	Y+7, r1	; 0x07
    310a:	18 86       	std	Y+8, r1	; 0x08
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    310c:	f5 01       	movw	r30, r10
    310e:	81 85       	ldd	r24, Z+9	; 0x09
    3110:	92 85       	ldd	r25, Z+10	; 0x0a
    3112:	a3 85       	ldd	r26, Z+11	; 0x0b
    3114:	b4 85       	ldd	r27, Z+12	; 0x0c
    3116:	0d 81       	ldd	r16, Y+5	; 0x05
    3118:	1e 81       	ldd	r17, Y+6	; 0x06
    311a:	2f 81       	ldd	r18, Y+7	; 0x07
    311c:	38 85       	ldd	r19, Y+8	; 0x08
    311e:	08 17       	cp	r16, r24
    3120:	19 07       	cpc	r17, r25
    3122:	2a 07       	cpc	r18, r26
    3124:	3b 07       	cpc	r19, r27
    3126:	08 f0       	brcs	.+2      	; 0x312a <_ZN8SdVolume15allocContiguousEmPm+0xc8>
    3128:	56 c0       	rjmp	.+172    	; 0x31d6 <_ZN8SdVolume15allocContiguousEmPm+0x174>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    312a:	2d 85       	ldd	r18, Y+13	; 0x0d
    312c:	3e 85       	ldd	r19, Y+14	; 0x0e
    312e:	4f 85       	ldd	r20, Y+15	; 0x0f
    3130:	58 89       	ldd	r21, Y+16	; 0x10
    3132:	24 15       	cp	r18, r4
    3134:	35 05       	cpc	r19, r5
    3136:	46 05       	cpc	r20, r6
    3138:	57 05       	cpc	r21, r7
    313a:	50 f4       	brcc	.+20     	; 0x3150 <_ZN8SdVolume15allocContiguousEmPm+0xee>
      bgnCluster = endCluster = 2;
    313c:	82 e0       	ldi	r24, 0x02	; 2
    313e:	48 2e       	mov	r4, r24
    3140:	51 2c       	mov	r5, r1
    3142:	61 2c       	mov	r6, r1
    3144:	71 2c       	mov	r7, r1
    3146:	92 e0       	ldi	r25, 0x02	; 2
    3148:	c9 2e       	mov	r12, r25
    314a:	d1 2c       	mov	r13, r1
    314c:	e1 2c       	mov	r14, r1
    314e:	f1 2c       	mov	r15, r1
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    3150:	9e 01       	movw	r18, r28
    3152:	2f 5f       	subi	r18, 0xFF	; 255
    3154:	3f 4f       	sbci	r19, 0xFF	; 255
    3156:	b3 01       	movw	r22, r6
    3158:	a2 01       	movw	r20, r4
    315a:	c5 01       	movw	r24, r10
    315c:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <_ZNK8SdVolume6fatGetEmPm>
    3160:	88 23       	and	r24, r24
    3162:	c9 f1       	breq	.+114    	; 0x31d6 <_ZN8SdVolume15allocContiguousEmPm+0x174>

    if (f != 0) {
    3164:	49 81       	ldd	r20, Y+1	; 0x01
    3166:	5a 81       	ldd	r21, Y+2	; 0x02
    3168:	6b 81       	ldd	r22, Y+3	; 0x03
    316a:	7c 81       	ldd	r23, Y+4	; 0x04
    316c:	d3 01       	movw	r26, r6
    316e:	c2 01       	movw	r24, r4
    3170:	01 96       	adiw	r24, 0x01	; 1
    3172:	a1 1d       	adc	r26, r1
    3174:	b1 1d       	adc	r27, r1
    3176:	45 2b       	or	r20, r21
    3178:	46 2b       	or	r20, r22
    317a:	47 2b       	or	r20, r23
    317c:	19 f0       	breq	.+6      	; 0x3184 <_ZN8SdVolume15allocContiguousEmPm+0x122>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    317e:	6c 01       	movw	r12, r24
    3180:	7d 01       	movw	r14, r26
    3182:	0f c0       	rjmp	.+30     	; 0x31a2 <_ZN8SdVolume15allocContiguousEmPm+0x140>
    } else if ((endCluster - bgnCluster + 1) == count) {
    3184:	ac 01       	movw	r20, r24
    3186:	bd 01       	movw	r22, r26
    3188:	4c 19       	sub	r20, r12
    318a:	5d 09       	sbc	r21, r13
    318c:	6e 09       	sbc	r22, r14
    318e:	7f 09       	sbc	r23, r15
    3190:	09 85       	ldd	r16, Y+9	; 0x09
    3192:	1a 85       	ldd	r17, Y+10	; 0x0a
    3194:	2b 85       	ldd	r18, Y+11	; 0x0b
    3196:	3c 85       	ldd	r19, Y+12	; 0x0c
    3198:	40 17       	cp	r20, r16
    319a:	51 07       	cpc	r21, r17
    319c:	62 07       	cpc	r22, r18
    319e:	73 07       	cpc	r23, r19
    31a0:	79 f0       	breq	.+30     	; 0x31c0 <_ZN8SdVolume15allocContiguousEmPm+0x15e>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    31a2:	2d 81       	ldd	r18, Y+5	; 0x05
    31a4:	3e 81       	ldd	r19, Y+6	; 0x06
    31a6:	4f 81       	ldd	r20, Y+7	; 0x07
    31a8:	58 85       	ldd	r21, Y+8	; 0x08
    31aa:	2f 5f       	subi	r18, 0xFF	; 255
    31ac:	3f 4f       	sbci	r19, 0xFF	; 255
    31ae:	4f 4f       	sbci	r20, 0xFF	; 255
    31b0:	5f 4f       	sbci	r21, 0xFF	; 255
    31b2:	2d 83       	std	Y+5, r18	; 0x05
    31b4:	3e 83       	std	Y+6, r19	; 0x06
    31b6:	4f 83       	std	Y+7, r20	; 0x07
    31b8:	58 87       	std	Y+8, r21	; 0x08
    31ba:	2c 01       	movw	r4, r24
    31bc:	3d 01       	movw	r6, r26
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
      // done - found space
      break;
    }
  }
    31be:	a6 cf       	rjmp	.-180    	; 0x310c <_ZN8SdVolume15allocContiguousEmPm+0xaa>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    31c0:	0f ef       	ldi	r16, 0xFF	; 255
    31c2:	1f ef       	ldi	r17, 0xFF	; 255
    31c4:	2f ef       	ldi	r18, 0xFF	; 255
    31c6:	3f e0       	ldi	r19, 0x0F	; 15
    31c8:	b3 01       	movw	r22, r6
    31ca:	a2 01       	movw	r20, r4
    31cc:	c5 01       	movw	r24, r10
    31ce:	0e 94 91 17 	call	0x2f22	; 0x2f22 <_ZN8SdVolume6fatPutEmm>
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    31d2:	81 11       	cpse	r24, r1
    31d4:	18 c0       	rjmp	.+48     	; 0x3206 <_ZN8SdVolume15allocContiguousEmPm+0x1a4>
    31d6:	80 e0       	ldi	r24, 0x00	; 0
    31d8:	41 c0       	rjmp	.+130    	; 0x325c <_ZN8SdVolume15allocContiguousEmPm+0x1fa>

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    31da:	d3 01       	movw	r26, r6
    31dc:	c2 01       	movw	r24, r4
    31de:	01 97       	sbiw	r24, 0x01	; 1
    31e0:	a1 09       	sbc	r26, r1
    31e2:	b1 09       	sbc	r27, r1
    31e4:	8d 83       	std	Y+5, r24	; 0x05
    31e6:	9e 83       	std	Y+6, r25	; 0x06
    31e8:	af 83       	std	Y+7, r26	; 0x07
    31ea:	b8 87       	std	Y+8, r27	; 0x08
    31ec:	93 01       	movw	r18, r6
    31ee:	82 01       	movw	r16, r4
    31f0:	ac 01       	movw	r20, r24
    31f2:	bd 01       	movw	r22, r26
    31f4:	c5 01       	movw	r24, r10
    31f6:	0e 94 91 17 	call	0x2f22	; 0x2f22 <_ZN8SdVolume6fatPutEmm>
    31fa:	88 23       	and	r24, r24
    31fc:	61 f3       	breq	.-40     	; 0x31d6 <_ZN8SdVolume15allocContiguousEmPm+0x174>
    endCluster--;
    31fe:	4d 80       	ldd	r4, Y+5	; 0x05
    3200:	5e 80       	ldd	r5, Y+6	; 0x06
    3202:	6f 80       	ldd	r6, Y+7	; 0x07
    3204:	78 84       	ldd	r7, Y+8	; 0x08
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    3206:	c4 14       	cp	r12, r4
    3208:	d5 04       	cpc	r13, r5
    320a:	e6 04       	cpc	r14, r6
    320c:	f7 04       	cpc	r15, r7
    320e:	28 f3       	brcs	.-54     	; 0x31da <_ZN8SdVolume15allocContiguousEmPm+0x178>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    3210:	d1 01       	movw	r26, r2
    3212:	4d 91       	ld	r20, X+
    3214:	5d 91       	ld	r21, X+
    3216:	6d 91       	ld	r22, X+
    3218:	7c 91       	ld	r23, X
    321a:	41 15       	cp	r20, r1
    321c:	51 05       	cpc	r21, r1
    321e:	61 05       	cpc	r22, r1
    3220:	71 05       	cpc	r23, r1
    3222:	99 f4       	brne	.+38     	; 0x324a <_ZN8SdVolume15allocContiguousEmPm+0x1e8>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    3224:	f1 01       	movw	r30, r2
    3226:	c0 82       	st	Z, r12
    3228:	d1 82       	std	Z+1, r13	; 0x01
    322a:	e2 82       	std	Z+2, r14	; 0x02
    322c:	f3 82       	std	Z+3, r15	; 0x03

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    322e:	99 20       	and	r9, r9
    3230:	a1 f0       	breq	.+40     	; 0x325a <_ZN8SdVolume15allocContiguousEmPm+0x1f8>
    3232:	ff ef       	ldi	r31, 0xFF	; 255
    3234:	cf 1a       	sub	r12, r31
    3236:	df 0a       	sbc	r13, r31
    3238:	ef 0a       	sbc	r14, r31
    323a:	ff 0a       	sbc	r15, r31
    323c:	d5 01       	movw	r26, r10
    323e:	cd 92       	st	X+, r12
    3240:	dd 92       	st	X+, r13
    3242:	ed 92       	st	X+, r14
    3244:	fc 92       	st	X, r15
    3246:	13 97       	sbiw	r26, 0x03	; 3
    3248:	08 c0       	rjmp	.+16     	; 0x325a <_ZN8SdVolume15allocContiguousEmPm+0x1f8>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    324a:	97 01       	movw	r18, r14
    324c:	86 01       	movw	r16, r12
    324e:	c5 01       	movw	r24, r10
    3250:	0e 94 91 17 	call	0x2f22	; 0x2f22 <_ZN8SdVolume6fatPutEmm>
    3254:	81 11       	cpse	r24, r1
    3256:	e6 cf       	rjmp	.-52     	; 0x3224 <_ZN8SdVolume15allocContiguousEmPm+0x1c2>
    3258:	be cf       	rjmp	.-132    	; 0x31d6 <_ZN8SdVolume15allocContiguousEmPm+0x174>
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
    325a:	81 e0       	ldi	r24, 0x01	; 1
}
    325c:	60 96       	adiw	r28, 0x10	; 16
    325e:	0f b6       	in	r0, 0x3f	; 63
    3260:	f8 94       	cli
    3262:	de bf       	out	0x3e, r29	; 62
    3264:	0f be       	out	0x3f, r0	; 63
    3266:	cd bf       	out	0x3d, r28	; 61
    3268:	df 91       	pop	r29
    326a:	cf 91       	pop	r28
    326c:	1f 91       	pop	r17
    326e:	0f 91       	pop	r16
    3270:	ff 90       	pop	r15
    3272:	ef 90       	pop	r14
    3274:	df 90       	pop	r13
    3276:	cf 90       	pop	r12
    3278:	bf 90       	pop	r11
    327a:	af 90       	pop	r10
    327c:	9f 90       	pop	r9
    327e:	7f 90       	pop	r7
    3280:	6f 90       	pop	r6
    3282:	5f 90       	pop	r5
    3284:	4f 90       	pop	r4
    3286:	3f 90       	pop	r3
    3288:	2f 90       	pop	r2
    328a:	08 95       	ret

0000328c <_ZN8SdVolume9freeChainEm>:
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    328c:	af 92       	push	r10
    328e:	bf 92       	push	r11
    3290:	cf 92       	push	r12
    3292:	df 92       	push	r13
    3294:	ef 92       	push	r14
    3296:	ff 92       	push	r15
    3298:	0f 93       	push	r16
    329a:	1f 93       	push	r17
    329c:	cf 93       	push	r28
    329e:	df 93       	push	r29
    32a0:	00 d0       	rcall	.+0      	; 0x32a2 <_ZN8SdVolume9freeChainEm+0x16>
    32a2:	00 d0       	rcall	.+0      	; 0x32a4 <_ZN8SdVolume9freeChainEm+0x18>
    32a4:	cd b7       	in	r28, 0x3d	; 61
    32a6:	de b7       	in	r29, 0x3e	; 62
    32a8:	5c 01       	movw	r10, r24
    32aa:	6a 01       	movw	r12, r20
    32ac:	7b 01       	movw	r14, r22
  // clear free cluster location
  allocSearchStart_ = 2;
    32ae:	82 e0       	ldi	r24, 0x02	; 2
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	a0 e0       	ldi	r26, 0x00	; 0
    32b4:	b0 e0       	ldi	r27, 0x00	; 0
    32b6:	f5 01       	movw	r30, r10
    32b8:	80 83       	st	Z, r24
    32ba:	91 83       	std	Z+1, r25	; 0x01
    32bc:	a2 83       	std	Z+2, r26	; 0x02
    32be:	b3 83       	std	Z+3, r27	; 0x03

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    32c0:	9e 01       	movw	r18, r28
    32c2:	2f 5f       	subi	r18, 0xFF	; 255
    32c4:	3f 4f       	sbci	r19, 0xFF	; 255
    32c6:	b7 01       	movw	r22, r14
    32c8:	a6 01       	movw	r20, r12
    32ca:	c5 01       	movw	r24, r10
    32cc:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <_ZNK8SdVolume6fatGetEmPm>
    32d0:	88 23       	and	r24, r24
    32d2:	11 f1       	breq	.+68     	; 0x3318 <_ZN8SdVolume9freeChainEm+0x8c>

    // free cluster
    if (!fatPut(cluster, 0)) return false;
    32d4:	00 e0       	ldi	r16, 0x00	; 0
    32d6:	10 e0       	ldi	r17, 0x00	; 0
    32d8:	98 01       	movw	r18, r16
    32da:	b7 01       	movw	r22, r14
    32dc:	a6 01       	movw	r20, r12
    32de:	c5 01       	movw	r24, r10
    32e0:	0e 94 91 17 	call	0x2f22	; 0x2f22 <_ZN8SdVolume6fatPutEmm>
    32e4:	88 23       	and	r24, r24
    32e6:	c1 f0       	breq	.+48     	; 0x3318 <_ZN8SdVolume9freeChainEm+0x8c>

    cluster = next;
    32e8:	c9 80       	ldd	r12, Y+1	; 0x01
    32ea:	da 80       	ldd	r13, Y+2	; 0x02
    32ec:	eb 80       	ldd	r14, Y+3	; 0x03
    32ee:	fc 80       	ldd	r15, Y+4	; 0x04
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    32f0:	f5 01       	movw	r30, r10
    32f2:	87 89       	ldd	r24, Z+23	; 0x17
    32f4:	80 31       	cpi	r24, 0x10	; 16
    32f6:	29 f0       	breq	.+10     	; 0x3302 <_ZN8SdVolume9freeChainEm+0x76>
    32f8:	88 ef       	ldi	r24, 0xF8	; 248
    32fa:	9f ef       	ldi	r25, 0xFF	; 255
    32fc:	af ef       	ldi	r26, 0xFF	; 255
    32fe:	bf e0       	ldi	r27, 0x0F	; 15
    3300:	04 c0       	rjmp	.+8      	; 0x330a <_ZN8SdVolume9freeChainEm+0x7e>
    3302:	88 ef       	ldi	r24, 0xF8	; 248
    3304:	9f ef       	ldi	r25, 0xFF	; 255
    3306:	a0 e0       	ldi	r26, 0x00	; 0
    3308:	b0 e0       	ldi	r27, 0x00	; 0
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    330a:	c8 16       	cp	r12, r24
    330c:	d9 06       	cpc	r13, r25
    330e:	ea 06       	cpc	r14, r26
    3310:	fb 06       	cpc	r15, r27
    3312:	b0 f2       	brcs	.-84     	; 0x32c0 <_ZN8SdVolume9freeChainEm+0x34>
    if (!fatPut(cluster, 0)) return false;

    cluster = next;
  } while (!isEOC(cluster));

  return true;
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	01 c0       	rjmp	.+2      	; 0x331a <_ZN8SdVolume9freeChainEm+0x8e>
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    3318:	80 e0       	ldi	r24, 0x00	; 0

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    331a:	0f 90       	pop	r0
    331c:	0f 90       	pop	r0
    331e:	0f 90       	pop	r0
    3320:	0f 90       	pop	r0
    3322:	df 91       	pop	r29
    3324:	cf 91       	pop	r28
    3326:	1f 91       	pop	r17
    3328:	0f 91       	pop	r16
    332a:	ff 90       	pop	r15
    332c:	ef 90       	pop	r14
    332e:	df 90       	pop	r13
    3330:	cf 90       	pop	r12
    3332:	bf 90       	pop	r11
    3334:	af 90       	pop	r10
    3336:	08 95       	ret

00003338 <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    3338:	8f 92       	push	r8
    333a:	9f 92       	push	r9
    333c:	af 92       	push	r10
    333e:	bf 92       	push	r11
    3340:	cf 92       	push	r12
    3342:	df 92       	push	r13
    3344:	ef 92       	push	r14
    3346:	ff 92       	push	r15
    3348:	0f 93       	push	r16
    334a:	1f 93       	push	r17
    334c:	cf 93       	push	r28
    334e:	df 93       	push	r29
    3350:	ec 01       	movw	r28, r24
    3352:	14 2f       	mov	r17, r20
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    3354:	70 93 87 03 	sts	0x0387, r23
    3358:	60 93 86 03 	sts	0x0386, r22
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    335c:	44 23       	and	r20, r20
    335e:	69 f1       	breq	.+90     	; 0x33ba <_ZN8SdVolume4initEP7Sd2Cardh+0x82>
    if (part > 4)return false;
    3360:	45 30       	cpi	r20, 0x05	; 5
    3362:	10 f0       	brcs	.+4      	; 0x3368 <_ZN8SdVolume4initEP7Sd2Cardh+0x30>
    3364:	80 e0       	ldi	r24, 0x00	; 0
    3366:	f2 c0       	rjmp	.+484    	; 0x354c <_ZN8SdVolume4initEP7Sd2Cardh+0x214>
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    3368:	40 e0       	ldi	r20, 0x00	; 0
    336a:	60 e0       	ldi	r22, 0x00	; 0
    336c:	70 e0       	ldi	r23, 0x00	; 0
    336e:	cb 01       	movw	r24, r22
    3370:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <_ZN8SdVolume13cacheRawBlockEmh>
    3374:	88 23       	and	r24, r24
    3376:	b1 f3       	breq	.-20     	; 0x3364 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    3378:	20 e1       	ldi	r18, 0x10	; 16
    337a:	12 9f       	mul	r17, r18
    337c:	a0 01       	movw	r20, r0
    337e:	11 24       	eor	r1, r1
    3380:	48 58       	subi	r20, 0x88	; 136
    3382:	5c 4f       	sbci	r21, 0xFC	; 252
    3384:	fa 01       	movw	r30, r20
    3386:	e2 54       	subi	r30, 0x42	; 66
    3388:	fe 4f       	sbci	r31, 0xFE	; 254
    338a:	80 81       	ld	r24, Z
    338c:	8f 77       	andi	r24, 0x7F	; 127
    338e:	51 f7       	brne	.-44     	; 0x3364 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      p->totalSectors < 100 ||
    3390:	3c 96       	adiw	r30, 0x0c	; 12
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    3392:	80 81       	ld	r24, Z
    3394:	91 81       	ldd	r25, Z+1	; 0x01
    3396:	a2 81       	ldd	r26, Z+2	; 0x02
    3398:	b3 81       	ldd	r27, Z+3	; 0x03
    339a:	84 36       	cpi	r24, 0x64	; 100
    339c:	91 05       	cpc	r25, r1
    339e:	a1 05       	cpc	r26, r1
    33a0:	b1 05       	cpc	r27, r1
    33a2:	00 f3       	brcs	.-64     	; 0x3364 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      p->totalSectors < 100 ||
      p->firstSector == 0) {
    33a4:	34 97       	sbiw	r30, 0x04	; 4
    33a6:	c0 80       	ld	r12, Z
    33a8:	d1 80       	ldd	r13, Z+1	; 0x01
    33aa:	e2 80       	ldd	r14, Z+2	; 0x02
    33ac:	f3 80       	ldd	r15, Z+3	; 0x03
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
      p->totalSectors < 100 ||
    33ae:	c1 14       	cp	r12, r1
    33b0:	d1 04       	cpc	r13, r1
    33b2:	e1 04       	cpc	r14, r1
    33b4:	f1 04       	cpc	r15, r1
    33b6:	21 f4       	brne	.+8      	; 0x33c0 <_ZN8SdVolume4initEP7Sd2Cardh+0x88>
    33b8:	d5 cf       	rjmp	.-86     	; 0x3364 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
    33ba:	c1 2c       	mov	r12, r1
    33bc:	d1 2c       	mov	r13, r1
    33be:	76 01       	movw	r14, r12
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    33c0:	40 e0       	ldi	r20, 0x00	; 0
    33c2:	c7 01       	movw	r24, r14
    33c4:	b6 01       	movw	r22, r12
    33c6:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <_ZN8SdVolume13cacheRawBlockEmh>
    33ca:	88 23       	and	r24, r24
    33cc:	59 f2       	breq	.-106    	; 0x3364 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    33ce:	80 91 93 03 	lds	r24, 0x0393
    33d2:	90 91 94 03 	lds	r25, 0x0394
    33d6:	81 15       	cp	r24, r1
    33d8:	92 40       	sbci	r25, 0x02	; 2
    33da:	21 f6       	brne	.-120    	; 0x3364 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->fatCount == 0 ||
    33dc:	90 91 98 03 	lds	r25, 0x0398
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    33e0:	99 23       	and	r25, r25
    33e2:	09 f4       	brne	.+2      	; 0x33e6 <_ZN8SdVolume4initEP7Sd2Cardh+0xae>
    33e4:	bf cf       	rjmp	.-130    	; 0x3364 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->fatCount == 0 ||
    33e6:	20 91 96 03 	lds	r18, 0x0396
    33ea:	30 91 97 03 	lds	r19, 0x0397
    33ee:	23 2b       	or	r18, r19
    33f0:	09 f4       	brne	.+2      	; 0x33f4 <_ZN8SdVolume4initEP7Sd2Cardh+0xbc>
    33f2:	b8 cf       	rjmp	.-144    	; 0x3364 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
    33f4:	80 91 95 03 	lds	r24, 0x0395
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    bpb->fatCount == 0 ||
    bpb->reservedSectorCount == 0 ||
    33f8:	88 23       	and	r24, r24
    33fa:	09 f4       	brne	.+2      	; 0x33fe <_ZN8SdVolume4initEP7Sd2Cardh+0xc6>
    33fc:	b3 cf       	rjmp	.-154    	; 0x3364 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
    33fe:	9a 8b       	std	Y+18, r25	; 0x12
  blocksPerCluster_ = bpb->sectorsPerCluster;
    3400:	8c 83       	std	Y+4, r24	; 0x04

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    3402:	1d 86       	std	Y+13, r1	; 0x0d
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	61 e0       	ldi	r22, 0x01	; 1
    3408:	70 e0       	ldi	r23, 0x00	; 0
    340a:	2d 85       	ldd	r18, Y+13	; 0x0d
    340c:	e2 2f       	mov	r30, r18
    340e:	ab 01       	movw	r20, r22
    3410:	02 2e       	mov	r0, r18
    3412:	02 c0       	rjmp	.+4      	; 0x3418 <_ZN8SdVolume4initEP7Sd2Cardh+0xe0>
    3414:	44 0f       	add	r20, r20
    3416:	55 1f       	adc	r21, r21
    3418:	0a 94       	dec	r0
    341a:	e2 f7       	brpl	.-8      	; 0x3414 <_ZN8SdVolume4initEP7Sd2Cardh+0xdc>
    341c:	84 17       	cp	r24, r20
    341e:	95 07       	cpc	r25, r21
    3420:	31 f0       	breq	.+12     	; 0x342e <_ZN8SdVolume4initEP7Sd2Cardh+0xf6>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    3422:	31 e0       	ldi	r19, 0x01	; 1
    3424:	32 0f       	add	r19, r18
    3426:	3d 87       	std	Y+13, r19	; 0x0d
    3428:	28 30       	cpi	r18, 0x08	; 8
    342a:	78 f3       	brcs	.-34     	; 0x340a <_ZN8SdVolume4initEP7Sd2Cardh+0xd2>
    342c:	9b cf       	rjmp	.-202    	; 0x3364 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    342e:	20 91 9e 03 	lds	r18, 0x039E
    3432:	30 91 9f 03 	lds	r19, 0x039F
    3436:	21 15       	cp	r18, r1
    3438:	31 05       	cpc	r19, r1
    343a:	19 f0       	breq	.+6      	; 0x3442 <_ZN8SdVolume4initEP7Sd2Cardh+0x10a>
    343c:	40 e0       	ldi	r20, 0x00	; 0
    343e:	50 e0       	ldi	r21, 0x00	; 0
    3440:	08 c0       	rjmp	.+16     	; 0x3452 <_ZN8SdVolume4initEP7Sd2Cardh+0x11a>
    3442:	20 91 ac 03 	lds	r18, 0x03AC
    3446:	30 91 ad 03 	lds	r19, 0x03AD
    344a:	40 91 ae 03 	lds	r20, 0x03AE
    344e:	50 91 af 03 	lds	r21, 0x03AF
    3452:	2d 83       	std	Y+5, r18	; 0x05
    3454:	3e 83       	std	Y+6, r19	; 0x06
    3456:	4f 83       	std	Y+7, r20	; 0x07
    3458:	58 87       	std	Y+8, r21	; 0x08

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    345a:	80 91 96 03 	lds	r24, 0x0396
    345e:	90 91 97 03 	lds	r25, 0x0397
    3462:	46 01       	movw	r8, r12
    3464:	57 01       	movw	r10, r14
    3466:	88 0e       	add	r8, r24
    3468:	99 1e       	adc	r9, r25
    346a:	a1 1c       	adc	r10, r1
    346c:	b1 1c       	adc	r11, r1
    346e:	8b 8a       	std	Y+19, r8	; 0x13
    3470:	9c 8a       	std	Y+20, r9	; 0x14
    3472:	ad 8a       	std	Y+21, r10	; 0x15
    3474:	be 8a       	std	Y+22, r11	; 0x16

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    3476:	00 91 99 03 	lds	r16, 0x0399
    347a:	10 91 9a 03 	lds	r17, 0x039A
    347e:	19 8f       	std	Y+25, r17	; 0x19
    3480:	08 8f       	std	Y+24, r16	; 0x18

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    3482:	a0 91 98 03 	lds	r26, 0x0398
    3486:	b0 e0       	ldi	r27, 0x00	; 0
    3488:	0e 94 2e 24 	call	0x485c	; 0x485c <__muluhisi3>
    348c:	86 0e       	add	r8, r22
    348e:	97 1e       	adc	r9, r23
    3490:	a8 1e       	adc	r10, r24
    3492:	b9 1e       	adc	r11, r25
    3494:	8a 8e       	std	Y+26, r8	; 0x1a
    3496:	9b 8e       	std	Y+27, r9	; 0x1b
    3498:	ac 8e       	std	Y+28, r10	; 0x1c
    349a:	bd 8e       	std	Y+29, r11	; 0x1d

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    349c:	85 e0       	ldi	r24, 0x05	; 5
    349e:	00 0f       	add	r16, r16
    34a0:	11 1f       	adc	r17, r17
    34a2:	8a 95       	dec	r24
    34a4:	e1 f7       	brne	.-8      	; 0x349e <_ZN8SdVolume4initEP7Sd2Cardh+0x166>
    34a6:	01 50       	subi	r16, 0x01	; 1
    34a8:	1e 4f       	sbci	r17, 0xFE	; 254
    34aa:	01 2f       	mov	r16, r17
    34ac:	11 27       	eor	r17, r17
    34ae:	06 95       	lsr	r16
    34b0:	80 0e       	add	r8, r16
    34b2:	91 1e       	adc	r9, r17
    34b4:	a1 1c       	adc	r10, r1
    34b6:	b1 1c       	adc	r11, r1
    34b8:	8e 86       	std	Y+14, r8	; 0x0e
    34ba:	9f 86       	std	Y+15, r9	; 0x0f
    34bc:	a8 8a       	std	Y+16, r10	; 0x10
    34be:	b9 8a       	std	Y+17, r11	; 0x11

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
                           bpb->totalSectors16 : bpb->totalSectors32;
    34c0:	20 91 9b 03 	lds	r18, 0x039B
    34c4:	30 91 9c 03 	lds	r19, 0x039C
    34c8:	21 15       	cp	r18, r1
    34ca:	31 05       	cpc	r19, r1
    34cc:	21 f0       	breq	.+8      	; 0x34d6 <_ZN8SdVolume4initEP7Sd2Cardh+0x19e>
    34ce:	a9 01       	movw	r20, r18
    34d0:	60 e0       	ldi	r22, 0x00	; 0
    34d2:	70 e0       	ldi	r23, 0x00	; 0
    34d4:	08 c0       	rjmp	.+16     	; 0x34e6 <_ZN8SdVolume4initEP7Sd2Cardh+0x1ae>
    34d6:	40 91 a8 03 	lds	r20, 0x03A8
    34da:	50 91 a9 03 	lds	r21, 0x03A9
    34de:	60 91 aa 03 	lds	r22, 0x03AA
    34e2:	70 91 ab 03 	lds	r23, 0x03AB
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);
    34e6:	d7 01       	movw	r26, r14
    34e8:	c6 01       	movw	r24, r12
    34ea:	88 19       	sub	r24, r8
    34ec:	99 09       	sbc	r25, r9
    34ee:	aa 09       	sbc	r26, r10
    34f0:	bb 09       	sbc	r27, r11
    34f2:	84 0f       	add	r24, r20
    34f4:	95 1f       	adc	r25, r21
    34f6:	a6 1f       	adc	r26, r22
    34f8:	b7 1f       	adc	r27, r23

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    34fa:	04 c0       	rjmp	.+8      	; 0x3504 <_ZN8SdVolume4initEP7Sd2Cardh+0x1cc>
    34fc:	b6 95       	lsr	r27
    34fe:	a7 95       	ror	r26
    3500:	97 95       	ror	r25
    3502:	87 95       	ror	r24
    3504:	ea 95       	dec	r30
    3506:	d2 f7       	brpl	.-12     	; 0x34fc <_ZN8SdVolume4initEP7Sd2Cardh+0x1c4>
    3508:	89 87       	std	Y+9, r24	; 0x09
    350a:	9a 87       	std	Y+10, r25	; 0x0a
    350c:	ab 87       	std	Y+11, r26	; 0x0b
    350e:	bc 87       	std	Y+12, r27	; 0x0c

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    3510:	85 3f       	cpi	r24, 0xF5	; 245
    3512:	2f e0       	ldi	r18, 0x0F	; 15
    3514:	92 07       	cpc	r25, r18
    3516:	a1 05       	cpc	r26, r1
    3518:	b1 05       	cpc	r27, r1
    351a:	10 f4       	brcc	.+4      	; 0x3520 <_ZN8SdVolume4initEP7Sd2Cardh+0x1e8>
    fatType_ = 12;
    351c:	8c e0       	ldi	r24, 0x0C	; 12
    351e:	14 c0       	rjmp	.+40     	; 0x3548 <_ZN8SdVolume4initEP7Sd2Cardh+0x210>
  } else if (clusterCount_ < 65525) {
    3520:	85 3f       	cpi	r24, 0xF5	; 245
    3522:	9f 4f       	sbci	r25, 0xFF	; 255
    3524:	a1 05       	cpc	r26, r1
    3526:	b1 05       	cpc	r27, r1
    3528:	10 f4       	brcc	.+4      	; 0x352e <_ZN8SdVolume4initEP7Sd2Cardh+0x1f6>
    fatType_ = 16;
    352a:	80 e1       	ldi	r24, 0x10	; 16
    352c:	0d c0       	rjmp	.+26     	; 0x3548 <_ZN8SdVolume4initEP7Sd2Cardh+0x210>
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    352e:	80 91 b4 03 	lds	r24, 0x03B4
    3532:	90 91 b5 03 	lds	r25, 0x03B5
    3536:	a0 91 b6 03 	lds	r26, 0x03B6
    353a:	b0 91 b7 03 	lds	r27, 0x03B7
    353e:	8a 8f       	std	Y+26, r24	; 0x1a
    3540:	9b 8f       	std	Y+27, r25	; 0x1b
    3542:	ac 8f       	std	Y+28, r26	; 0x1c
    3544:	bd 8f       	std	Y+29, r27	; 0x1d
    fatType_ = 32;
    3546:	80 e2       	ldi	r24, 0x20	; 32
    3548:	8f 8b       	std	Y+23, r24	; 0x17
  }
  return true;
    354a:	81 e0       	ldi	r24, 0x01	; 1
}
    354c:	df 91       	pop	r29
    354e:	cf 91       	pop	r28
    3550:	1f 91       	pop	r17
    3552:	0f 91       	pop	r16
    3554:	ff 90       	pop	r15
    3556:	ef 90       	pop	r14
    3558:	df 90       	pop	r13
    355a:	cf 90       	pop	r12
    355c:	bf 90       	pop	r11
    355e:	af 90       	pop	r10
    3560:	9f 90       	pop	r9
    3562:	8f 90       	pop	r8
    3564:	08 95       	ret

00003566 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    3566:	cf 93       	push	r28
  uint8_t sreg = SREG;
    3568:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    356a:	f8 94       	cli
  if (!initialized) {
    356c:	80 91 8b 05 	lds	r24, 0x058B
    3570:	81 11       	cpse	r24, r1
    3572:	27 c0       	rjmp	.+78     	; 0x35c2 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    3574:	ea ea       	ldi	r30, 0xAA	; 170
    3576:	f0 e0       	ldi	r31, 0x00	; 0
    3578:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    357a:	e6 e9       	ldi	r30, 0x96	; 150
    357c:	f0 e0       	ldi	r31, 0x00	; 0
    357e:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    3580:	e8 2f       	mov	r30, r24
    3582:	f0 e0       	ldi	r31, 0x00	; 0
    3584:	ee 0f       	add	r30, r30
    3586:	ff 1f       	adc	r31, r31
    3588:	e8 53       	subi	r30, 0x38	; 56
    358a:	ff 4f       	sbci	r31, 0xFF	; 255
    358c:	a5 91       	lpm	r26, Z+
    358e:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    3590:	ec 91       	ld	r30, X
    3592:	e9 23       	and	r30, r25
    3594:	21 f4       	brne	.+8      	; 0x359e <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    3596:	61 e0       	ldi	r22, 0x01	; 1
    3598:	8a e0       	ldi	r24, 0x0A	; 10
    359a:	0e 94 b2 23 	call	0x4764	; 0x4764 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    359e:	61 e0       	ldi	r22, 0x01	; 1
    35a0:	8a e0       	ldi	r24, 0x0A	; 10
    35a2:	0e 94 76 23 	call	0x46ec	; 0x46ec <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    35a6:	8c b5       	in	r24, 0x2c	; 44
    35a8:	80 61       	ori	r24, 0x10	; 16
    35aa:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    35ac:	8c b5       	in	r24, 0x2c	; 44
    35ae:	80 64       	ori	r24, 0x40	; 64
    35b0:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    35b2:	61 e0       	ldi	r22, 0x01	; 1
    35b4:	8d e0       	ldi	r24, 0x0D	; 13
    35b6:	0e 94 76 23 	call	0x46ec	; 0x46ec <pinMode>
    pinMode(MOSI, OUTPUT);
    35ba:	61 e0       	ldi	r22, 0x01	; 1
    35bc:	8b e0       	ldi	r24, 0x0B	; 11
    35be:	0e 94 76 23 	call	0x46ec	; 0x46ec <pinMode>
  }
  initialized++; // reference count
    35c2:	80 91 8b 05 	lds	r24, 0x058B
    35c6:	8f 5f       	subi	r24, 0xFF	; 255
    35c8:	80 93 8b 05 	sts	0x058B, r24
  SREG = sreg;
    35cc:	cf bf       	out	0x3f, r28	; 63
}
    35ce:	cf 91       	pop	r28
    35d0:	08 95       	ret

000035d2 <__vector_13>:
void (*TimerOne::isrCallback)() = NULL;

// interrupt service routine that wraps a user defined function supplied by attachInterrupt
#if defined(__AVR__)
ISR(TIMER1_OVF_vect)
{
    35d2:	1f 92       	push	r1
    35d4:	0f 92       	push	r0
    35d6:	0f b6       	in	r0, 0x3f	; 63
    35d8:	0f 92       	push	r0
    35da:	11 24       	eor	r1, r1
    35dc:	2f 93       	push	r18
    35de:	3f 93       	push	r19
    35e0:	4f 93       	push	r20
    35e2:	5f 93       	push	r21
    35e4:	6f 93       	push	r22
    35e6:	7f 93       	push	r23
    35e8:	8f 93       	push	r24
    35ea:	9f 93       	push	r25
    35ec:	af 93       	push	r26
    35ee:	bf 93       	push	r27
    35f0:	ef 93       	push	r30
    35f2:	ff 93       	push	r31
  Timer1.isrCallback();
    35f4:	e0 91 8c 05 	lds	r30, 0x058C
    35f8:	f0 91 8d 05 	lds	r31, 0x058D
    35fc:	09 95       	icall
}
    35fe:	ff 91       	pop	r31
    3600:	ef 91       	pop	r30
    3602:	bf 91       	pop	r27
    3604:	af 91       	pop	r26
    3606:	9f 91       	pop	r25
    3608:	8f 91       	pop	r24
    360a:	7f 91       	pop	r23
    360c:	6f 91       	pop	r22
    360e:	5f 91       	pop	r21
    3610:	4f 91       	pop	r20
    3612:	3f 91       	pop	r19
    3614:	2f 91       	pop	r18
    3616:	0f 90       	pop	r0
    3618:	0f be       	out	0x3f, r0	; 63
    361a:	0f 90       	pop	r0
    361c:	1f 90       	pop	r1
    361e:	18 95       	reti

00003620 <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    3620:	10 92 fe 05 	sts	0x05FE, r1
  twi_sendStop = true;		// default value
    3624:	81 e0       	ldi	r24, 0x01	; 1
    3626:	80 93 fc 05 	sts	0x05FC, r24
  twi_inRepStart = false;
    362a:	10 92 fb 05 	sts	0x05FB, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    362e:	61 e0       	ldi	r22, 0x01	; 1
    3630:	82 e1       	ldi	r24, 0x12	; 18
    3632:	0e 94 b2 23 	call	0x4764	; 0x4764 <digitalWrite>
  digitalWrite(SCL, 1);
    3636:	61 e0       	ldi	r22, 0x01	; 1
    3638:	83 e1       	ldi	r24, 0x13	; 19
    363a:	0e 94 b2 23 	call	0x4764	; 0x4764 <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    363e:	e9 eb       	ldi	r30, 0xB9	; 185
    3640:	f0 e0       	ldi	r31, 0x00	; 0
    3642:	80 81       	ld	r24, Z
    3644:	8e 7f       	andi	r24, 0xFE	; 254
    3646:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    3648:	80 81       	ld	r24, Z
    364a:	8d 7f       	andi	r24, 0xFD	; 253
    364c:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    364e:	88 e4       	ldi	r24, 0x48	; 72
    3650:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    3654:	85 e4       	ldi	r24, 0x45	; 69
    3656:	80 93 bc 00 	sts	0x00BC, r24
    365a:	08 95       	ret

0000365c <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    365c:	0f 93       	push	r16
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    365e:	41 32       	cpi	r20, 0x21	; 33
    3660:	08 f0       	brcs	.+2      	; 0x3664 <twi_writeTo+0x8>
    3662:	4a c0       	rjmp	.+148    	; 0x36f8 <twi_writeTo+0x9c>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    3664:	90 91 fe 05 	lds	r25, 0x05FE
    3668:	91 11       	cpse	r25, r1
    366a:	fc cf       	rjmp	.-8      	; 0x3664 <twi_writeTo+0x8>
    continue;
  }
  twi_state = TWI_MTX;
    366c:	32 e0       	ldi	r19, 0x02	; 2
    366e:	30 93 fe 05 	sts	0x05FE, r19
  twi_sendStop = sendStop;
    3672:	00 93 fc 05 	sts	0x05FC, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    3676:	3f ef       	ldi	r19, 0xFF	; 255
    3678:	30 93 91 05 	sts	0x0591, r19

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    367c:	10 92 d6 05 	sts	0x05D6, r1
  twi_masterBufferLength = length;
    3680:	40 93 d5 05 	sts	0x05D5, r20
    3684:	fb 01       	movw	r30, r22
    3686:	67 ed       	ldi	r22, 0xD7	; 215
    3688:	75 e0       	ldi	r23, 0x05	; 5
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    368a:	db 01       	movw	r26, r22
    368c:	3a 2f       	mov	r19, r26
    368e:	36 1b       	sub	r19, r22
    3690:	34 17       	cp	r19, r20
    3692:	18 f4       	brcc	.+6      	; 0x369a <twi_writeTo+0x3e>
    twi_masterBuffer[i] = data[i];
    3694:	31 91       	ld	r19, Z+
    3696:	3d 93       	st	X+, r19
    3698:	f9 cf       	rjmp	.-14     	; 0x368c <twi_writeTo+0x30>
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    369a:	10 92 fd 05 	sts	0x05FD, r1
  twi_slarw |= address << 1;
    369e:	30 91 fd 05 	lds	r19, 0x05FD
    36a2:	88 0f       	add	r24, r24
    36a4:	83 2b       	or	r24, r19
    36a6:	80 93 fd 05 	sts	0x05FD, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    36aa:	80 91 fb 05 	lds	r24, 0x05FB
    36ae:	81 30       	cpi	r24, 0x01	; 1
    36b0:	61 f4       	brne	.+24     	; 0x36ca <twi_writeTo+0x6e>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
    36b2:	10 92 fb 05 	sts	0x05FB, r1
    do {
      TWDR = twi_slarw;				
    36b6:	80 91 fd 05 	lds	r24, 0x05FD
    36ba:	80 93 bb 00 	sts	0x00BB, r24
    } while(TWCR & _BV(TWWC));
    36be:	80 91 bc 00 	lds	r24, 0x00BC
    36c2:	83 fd       	sbrc	r24, 3
    36c4:	f8 cf       	rjmp	.-16     	; 0x36b6 <twi_writeTo+0x5a>
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
    36c6:	85 ec       	ldi	r24, 0xC5	; 197
    36c8:	01 c0       	rjmp	.+2      	; 0x36cc <twi_writeTo+0x70>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
    36ca:	85 ee       	ldi	r24, 0xE5	; 229
    36cc:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    36d0:	22 23       	and	r18, r18
    36d2:	21 f0       	breq	.+8      	; 0x36dc <twi_writeTo+0x80>
    36d4:	80 91 fe 05 	lds	r24, 0x05FE
    36d8:	82 30       	cpi	r24, 0x02	; 2
    36da:	d1 f3       	breq	.-12     	; 0x36d0 <twi_writeTo+0x74>
    continue;
  }
  
  if (twi_error == 0xFF)
    36dc:	80 91 91 05 	lds	r24, 0x0591
    36e0:	8f 3f       	cpi	r24, 0xFF	; 255
    36e2:	79 f0       	breq	.+30     	; 0x3702 <twi_writeTo+0xa6>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    36e4:	80 91 91 05 	lds	r24, 0x0591
    36e8:	80 32       	cpi	r24, 0x20	; 32
    36ea:	41 f0       	breq	.+16     	; 0x36fc <twi_writeTo+0xa0>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    36ec:	80 91 91 05 	lds	r24, 0x0591
    36f0:	80 33       	cpi	r24, 0x30	; 48
    36f2:	31 f0       	breq	.+12     	; 0x3700 <twi_writeTo+0xa4>
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
    36f4:	94 e0       	ldi	r25, 0x04	; 4
    36f6:	05 c0       	rjmp	.+10     	; 0x3702 <twi_writeTo+0xa6>
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
    36f8:	91 e0       	ldi	r25, 0x01	; 1
    36fa:	03 c0       	rjmp	.+6      	; 0x3702 <twi_writeTo+0xa6>
  }
  
  if (twi_error == 0xFF)
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    return 2;	// error: address send, nack received
    36fc:	92 e0       	ldi	r25, 0x02	; 2
    36fe:	01 c0       	rjmp	.+2      	; 0x3702 <twi_writeTo+0xa6>
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
    3700:	93 e0       	ldi	r25, 0x03	; 3
  else
    return 4;	// other twi error
}
    3702:	89 2f       	mov	r24, r25
    3704:	0f 91       	pop	r16
    3706:	08 95       	ret

00003708 <twi_transmit>:
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    3708:	61 32       	cpi	r22, 0x21	; 33
    370a:	98 f4       	brcc	.+38     	; 0x3732 <twi_transmit+0x2a>
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    370c:	20 91 fe 05 	lds	r18, 0x05FE
    3710:	24 30       	cpi	r18, 0x04	; 4
    3712:	89 f4       	brne	.+34     	; 0x3736 <twi_transmit+0x2e>
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    3714:	60 93 b3 05 	sts	0x05B3, r22
    3718:	fc 01       	movw	r30, r24
    371a:	25 eb       	ldi	r18, 0xB5	; 181
    371c:	35 e0       	ldi	r19, 0x05	; 5
  for(i = 0; i < length; ++i){
    371e:	d9 01       	movw	r26, r18
    3720:	8a 2f       	mov	r24, r26
    3722:	82 1b       	sub	r24, r18
    3724:	86 17       	cp	r24, r22
    3726:	18 f4       	brcc	.+6      	; 0x372e <twi_transmit+0x26>
    twi_txBuffer[i] = data[i];
    3728:	81 91       	ld	r24, Z+
    372a:	8d 93       	st	X+, r24
    372c:	f9 cf       	rjmp	.-14     	; 0x3720 <twi_transmit+0x18>
  }
  
  return 0;
    372e:	80 e0       	ldi	r24, 0x00	; 0
    3730:	08 95       	ret
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
    3732:	81 e0       	ldi	r24, 0x01	; 1
    3734:	08 95       	ret
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    return 2;
    3736:	82 e0       	ldi	r24, 0x02	; 2
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    3738:	08 95       	ret

0000373a <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    373a:	85 ed       	ldi	r24, 0xD5	; 213
    373c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3740:	80 91 bc 00 	lds	r24, 0x00BC
    3744:	84 fd       	sbrc	r24, 4
    3746:	fc cf       	rjmp	.-8      	; 0x3740 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3748:	10 92 fe 05 	sts	0x05FE, r1
    374c:	08 95       	ret

0000374e <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    374e:	85 ec       	ldi	r24, 0xC5	; 197
    3750:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    3754:	10 92 fe 05 	sts	0x05FE, r1
    3758:	08 95       	ret

0000375a <__vector_24>:
}

ISR(TWI_vect)
{
    375a:	1f 92       	push	r1
    375c:	0f 92       	push	r0
    375e:	0f b6       	in	r0, 0x3f	; 63
    3760:	0f 92       	push	r0
    3762:	11 24       	eor	r1, r1
    3764:	2f 93       	push	r18
    3766:	3f 93       	push	r19
    3768:	4f 93       	push	r20
    376a:	5f 93       	push	r21
    376c:	6f 93       	push	r22
    376e:	7f 93       	push	r23
    3770:	8f 93       	push	r24
    3772:	9f 93       	push	r25
    3774:	af 93       	push	r26
    3776:	bf 93       	push	r27
    3778:	ef 93       	push	r30
    377a:	ff 93       	push	r31
  switch(TW_STATUS){
    377c:	80 91 b9 00 	lds	r24, 0x00B9
    3780:	88 7f       	andi	r24, 0xF8	; 248
    3782:	80 36       	cpi	r24, 0x60	; 96
    3784:	09 f4       	brne	.+2      	; 0x3788 <__vector_24+0x2e>
    3786:	9e c0       	rjmp	.+316    	; 0x38c4 <__vector_24+0x16a>
    3788:	78 f5       	brcc	.+94     	; 0x37e8 <__vector_24+0x8e>
    378a:	88 32       	cpi	r24, 0x28	; 40
    378c:	09 f4       	brne	.+2      	; 0x3790 <__vector_24+0x36>
    378e:	5d c0       	rjmp	.+186    	; 0x384a <__vector_24+0xf0>
    3790:	90 f4       	brcc	.+36     	; 0x37b6 <__vector_24+0x5c>
    3792:	80 31       	cpi	r24, 0x10	; 16
    3794:	09 f4       	brne	.+2      	; 0x3798 <__vector_24+0x3e>
    3796:	56 c0       	rjmp	.+172    	; 0x3844 <__vector_24+0xea>
    3798:	38 f4       	brcc	.+14     	; 0x37a8 <__vector_24+0x4e>
    379a:	88 23       	and	r24, r24
    379c:	09 f4       	brne	.+2      	; 0x37a0 <__vector_24+0x46>
    379e:	f5 c0       	rjmp	.+490    	; 0x398a <__vector_24+0x230>
    37a0:	88 30       	cpi	r24, 0x08	; 8
    37a2:	09 f4       	brne	.+2      	; 0x37a6 <__vector_24+0x4c>
    37a4:	4f c0       	rjmp	.+158    	; 0x3844 <__vector_24+0xea>
    37a6:	f5 c0       	rjmp	.+490    	; 0x3992 <__vector_24+0x238>
    37a8:	88 31       	cpi	r24, 0x18	; 24
    37aa:	09 f4       	brne	.+2      	; 0x37ae <__vector_24+0x54>
    37ac:	4e c0       	rjmp	.+156    	; 0x384a <__vector_24+0xf0>
    37ae:	80 32       	cpi	r24, 0x20	; 32
    37b0:	09 f4       	brne	.+2      	; 0x37b4 <__vector_24+0x5a>
    37b2:	5f c0       	rjmp	.+190    	; 0x3872 <__vector_24+0x118>
    37b4:	ee c0       	rjmp	.+476    	; 0x3992 <__vector_24+0x238>
    37b6:	80 34       	cpi	r24, 0x40	; 64
    37b8:	09 f4       	brne	.+2      	; 0x37bc <__vector_24+0x62>
    37ba:	6a c0       	rjmp	.+212    	; 0x3890 <__vector_24+0x136>
    37bc:	58 f4       	brcc	.+22     	; 0x37d4 <__vector_24+0x7a>
    37be:	80 33       	cpi	r24, 0x30	; 48
    37c0:	09 f4       	brne	.+2      	; 0x37c4 <__vector_24+0x6a>
    37c2:	57 c0       	rjmp	.+174    	; 0x3872 <__vector_24+0x118>
    37c4:	88 33       	cpi	r24, 0x38	; 56
    37c6:	09 f0       	breq	.+2      	; 0x37ca <__vector_24+0x70>
    37c8:	e4 c0       	rjmp	.+456    	; 0x3992 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    37ca:	80 93 91 05 	sts	0x0591, r24
      twi_releaseBus();
    37ce:	0e 94 a7 1b 	call	0x374e	; 0x374e <twi_releaseBus>
      break;
    37d2:	df c0       	rjmp	.+446    	; 0x3992 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    37d4:	80 35       	cpi	r24, 0x50	; 80
    37d6:	09 f4       	brne	.+2      	; 0x37da <__vector_24+0x80>
    37d8:	4f c0       	rjmp	.+158    	; 0x3878 <__vector_24+0x11e>
    37da:	88 35       	cpi	r24, 0x58	; 88
    37dc:	09 f4       	brne	.+2      	; 0x37e0 <__vector_24+0x86>
    37de:	5d c0       	rjmp	.+186    	; 0x389a <__vector_24+0x140>
    37e0:	88 34       	cpi	r24, 0x48	; 72
    37e2:	09 f0       	breq	.+2      	; 0x37e6 <__vector_24+0x8c>
    37e4:	d6 c0       	rjmp	.+428    	; 0x3992 <__vector_24+0x238>
    37e6:	d3 c0       	rjmp	.+422    	; 0x398e <__vector_24+0x234>
    37e8:	88 39       	cpi	r24, 0x98	; 152
    37ea:	09 f4       	brne	.+2      	; 0x37ee <__vector_24+0x94>
    37ec:	c4 c0       	rjmp	.+392    	; 0x3976 <__vector_24+0x21c>
    37ee:	a8 f4       	brcc	.+42     	; 0x381a <__vector_24+0xc0>
    37f0:	88 37       	cpi	r24, 0x78	; 120
    37f2:	09 f4       	brne	.+2      	; 0x37f6 <__vector_24+0x9c>
    37f4:	67 c0       	rjmp	.+206    	; 0x38c4 <__vector_24+0x16a>
    37f6:	38 f4       	brcc	.+14     	; 0x3806 <__vector_24+0xac>
    37f8:	88 36       	cpi	r24, 0x68	; 104
    37fa:	09 f4       	brne	.+2      	; 0x37fe <__vector_24+0xa4>
    37fc:	63 c0       	rjmp	.+198    	; 0x38c4 <__vector_24+0x16a>
    37fe:	80 37       	cpi	r24, 0x70	; 112
    3800:	09 f4       	brne	.+2      	; 0x3804 <__vector_24+0xaa>
    3802:	60 c0       	rjmp	.+192    	; 0x38c4 <__vector_24+0x16a>
    3804:	c6 c0       	rjmp	.+396    	; 0x3992 <__vector_24+0x238>
    3806:	88 38       	cpi	r24, 0x88	; 136
    3808:	09 f4       	brne	.+2      	; 0x380c <__vector_24+0xb2>
    380a:	b5 c0       	rjmp	.+362    	; 0x3976 <__vector_24+0x21c>
    380c:	80 39       	cpi	r24, 0x90	; 144
    380e:	09 f4       	brne	.+2      	; 0x3812 <__vector_24+0xb8>
    3810:	5f c0       	rjmp	.+190    	; 0x38d0 <__vector_24+0x176>
    3812:	80 38       	cpi	r24, 0x80	; 128
    3814:	09 f0       	breq	.+2      	; 0x3818 <__vector_24+0xbe>
    3816:	bd c0       	rjmp	.+378    	; 0x3992 <__vector_24+0x238>
    3818:	5b c0       	rjmp	.+182    	; 0x38d0 <__vector_24+0x176>
    381a:	80 3b       	cpi	r24, 0xB0	; 176
    381c:	09 f4       	brne	.+2      	; 0x3820 <__vector_24+0xc6>
    381e:	83 c0       	rjmp	.+262    	; 0x3926 <__vector_24+0x1cc>
    3820:	38 f4       	brcc	.+14     	; 0x3830 <__vector_24+0xd6>
    3822:	80 3a       	cpi	r24, 0xA0	; 160
    3824:	09 f4       	brne	.+2      	; 0x3828 <__vector_24+0xce>
    3826:	66 c0       	rjmp	.+204    	; 0x38f4 <__vector_24+0x19a>
    3828:	88 3a       	cpi	r24, 0xA8	; 168
    382a:	09 f4       	brne	.+2      	; 0x382e <__vector_24+0xd4>
    382c:	7c c0       	rjmp	.+248    	; 0x3926 <__vector_24+0x1cc>
    382e:	b1 c0       	rjmp	.+354    	; 0x3992 <__vector_24+0x238>
    3830:	80 3c       	cpi	r24, 0xC0	; 192
    3832:	09 f4       	brne	.+2      	; 0x3836 <__vector_24+0xdc>
    3834:	a4 c0       	rjmp	.+328    	; 0x397e <__vector_24+0x224>
    3836:	88 3c       	cpi	r24, 0xC8	; 200
    3838:	09 f4       	brne	.+2      	; 0x383c <__vector_24+0xe2>
    383a:	a1 c0       	rjmp	.+322    	; 0x397e <__vector_24+0x224>
    383c:	88 3b       	cpi	r24, 0xB8	; 184
    383e:	09 f4       	brne	.+2      	; 0x3842 <__vector_24+0xe8>
    3840:	87 c0       	rjmp	.+270    	; 0x3950 <__vector_24+0x1f6>
    3842:	a7 c0       	rjmp	.+334    	; 0x3992 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3844:	80 91 fd 05 	lds	r24, 0x05FD
    3848:	10 c0       	rjmp	.+32     	; 0x386a <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    384a:	90 91 d6 05 	lds	r25, 0x05D6
    384e:	80 91 d5 05 	lds	r24, 0x05D5
    3852:	98 17       	cp	r25, r24
    3854:	70 f5       	brcc	.+92     	; 0x38b2 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3856:	e0 91 d6 05 	lds	r30, 0x05D6
    385a:	81 e0       	ldi	r24, 0x01	; 1
    385c:	8e 0f       	add	r24, r30
    385e:	80 93 d6 05 	sts	0x05D6, r24
    3862:	f0 e0       	ldi	r31, 0x00	; 0
    3864:	e9 52       	subi	r30, 0x29	; 41
    3866:	fa 4f       	sbci	r31, 0xFA	; 250
    3868:	80 81       	ld	r24, Z
    386a:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    386e:	85 ec       	ldi	r24, 0xC5	; 197
    3870:	83 c0       	rjmp	.+262    	; 0x3978 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3872:	80 93 91 05 	sts	0x0591, r24
    3876:	8b c0       	rjmp	.+278    	; 0x398e <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3878:	e0 91 d6 05 	lds	r30, 0x05D6
    387c:	81 e0       	ldi	r24, 0x01	; 1
    387e:	8e 0f       	add	r24, r30
    3880:	80 93 d6 05 	sts	0x05D6, r24
    3884:	80 91 bb 00 	lds	r24, 0x00BB
    3888:	f0 e0       	ldi	r31, 0x00	; 0
    388a:	e9 52       	subi	r30, 0x29	; 41
    388c:	fa 4f       	sbci	r31, 0xFA	; 250
    388e:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3890:	90 91 d6 05 	lds	r25, 0x05D6
    3894:	80 91 d5 05 	lds	r24, 0x05D5
    3898:	6b c0       	rjmp	.+214    	; 0x3970 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    389a:	e0 91 d6 05 	lds	r30, 0x05D6
    389e:	81 e0       	ldi	r24, 0x01	; 1
    38a0:	8e 0f       	add	r24, r30
    38a2:	80 93 d6 05 	sts	0x05D6, r24
    38a6:	80 91 bb 00 	lds	r24, 0x00BB
    38aa:	f0 e0       	ldi	r31, 0x00	; 0
    38ac:	e9 52       	subi	r30, 0x29	; 41
    38ae:	fa 4f       	sbci	r31, 0xFA	; 250
    38b0:	80 83       	st	Z, r24
	if (twi_sendStop)
    38b2:	80 91 fc 05 	lds	r24, 0x05FC
    38b6:	81 11       	cpse	r24, r1
    38b8:	6a c0       	rjmp	.+212    	; 0x398e <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    38ba:	81 e0       	ldi	r24, 0x01	; 1
    38bc:	80 93 fb 05 	sts	0x05FB, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    38c0:	84 ea       	ldi	r24, 0xA4	; 164
    38c2:	5e c0       	rjmp	.+188    	; 0x3980 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    38c4:	83 e0       	ldi	r24, 0x03	; 3
    38c6:	80 93 fe 05 	sts	0x05FE, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    38ca:	10 92 92 05 	sts	0x0592, r1
    38ce:	cf cf       	rjmp	.-98     	; 0x386e <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    38d0:	80 91 92 05 	lds	r24, 0x0592
    38d4:	80 32       	cpi	r24, 0x20	; 32
    38d6:	08 f0       	brcs	.+2      	; 0x38da <__vector_24+0x180>
    38d8:	4e c0       	rjmp	.+156    	; 0x3976 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    38da:	e0 91 92 05 	lds	r30, 0x0592
    38de:	81 e0       	ldi	r24, 0x01	; 1
    38e0:	8e 0f       	add	r24, r30
    38e2:	80 93 92 05 	sts	0x0592, r24
    38e6:	80 91 bb 00 	lds	r24, 0x00BB
    38ea:	f0 e0       	ldi	r31, 0x00	; 0
    38ec:	ed 56       	subi	r30, 0x6D	; 109
    38ee:	fa 4f       	sbci	r31, 0xFA	; 250
    38f0:	80 83       	st	Z, r24
    38f2:	bd cf       	rjmp	.-134    	; 0x386e <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    38f4:	0e 94 a7 1b 	call	0x374e	; 0x374e <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    38f8:	80 91 92 05 	lds	r24, 0x0592
    38fc:	80 32       	cpi	r24, 0x20	; 32
    38fe:	30 f4       	brcc	.+12     	; 0x390c <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3900:	e0 91 92 05 	lds	r30, 0x0592
    3904:	f0 e0       	ldi	r31, 0x00	; 0
    3906:	ed 56       	subi	r30, 0x6D	; 109
    3908:	fa 4f       	sbci	r31, 0xFA	; 250
    390a:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    390c:	60 91 92 05 	lds	r22, 0x0592
    3910:	70 e0       	ldi	r23, 0x00	; 0
    3912:	e0 91 f7 05 	lds	r30, 0x05F7
    3916:	f0 91 f8 05 	lds	r31, 0x05F8
    391a:	83 e9       	ldi	r24, 0x93	; 147
    391c:	95 e0       	ldi	r25, 0x05	; 5
    391e:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3920:	10 92 92 05 	sts	0x0592, r1
      break;
    3924:	36 c0       	rjmp	.+108    	; 0x3992 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3926:	84 e0       	ldi	r24, 0x04	; 4
    3928:	80 93 fe 05 	sts	0x05FE, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    392c:	10 92 b4 05 	sts	0x05B4, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3930:	10 92 b3 05 	sts	0x05B3, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3934:	e0 91 f9 05 	lds	r30, 0x05F9
    3938:	f0 91 fa 05 	lds	r31, 0x05FA
    393c:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    393e:	80 91 b3 05 	lds	r24, 0x05B3
    3942:	81 11       	cpse	r24, r1
    3944:	05 c0       	rjmp	.+10     	; 0x3950 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    3946:	81 e0       	ldi	r24, 0x01	; 1
    3948:	80 93 b3 05 	sts	0x05B3, r24
        twi_txBuffer[0] = 0x00;
    394c:	10 92 b5 05 	sts	0x05B5, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3950:	e0 91 b4 05 	lds	r30, 0x05B4
    3954:	81 e0       	ldi	r24, 0x01	; 1
    3956:	8e 0f       	add	r24, r30
    3958:	80 93 b4 05 	sts	0x05B4, r24
    395c:	f0 e0       	ldi	r31, 0x00	; 0
    395e:	eb 54       	subi	r30, 0x4B	; 75
    3960:	fa 4f       	sbci	r31, 0xFA	; 250
    3962:	80 81       	ld	r24, Z
    3964:	80 93 bb 00 	sts	0x00BB, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3968:	90 91 b4 05 	lds	r25, 0x05B4
    396c:	80 91 b3 05 	lds	r24, 0x05B3
    3970:	98 17       	cp	r25, r24
    3972:	08 f4       	brcc	.+2      	; 0x3976 <__vector_24+0x21c>
    3974:	7c cf       	rjmp	.-264    	; 0x386e <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3976:	85 e8       	ldi	r24, 0x85	; 133
    3978:	80 93 bc 00 	sts	0x00BC, r24
    397c:	0a c0       	rjmp	.+20     	; 0x3992 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    397e:	85 ec       	ldi	r24, 0xC5	; 197
    3980:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3984:	10 92 fe 05 	sts	0x05FE, r1
      break;
    3988:	04 c0       	rjmp	.+8      	; 0x3992 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    398a:	10 92 91 05 	sts	0x0591, r1
      twi_stop();
    398e:	0e 94 9d 1b 	call	0x373a	; 0x373a <twi_stop>
      break;
  }
}
    3992:	ff 91       	pop	r31
    3994:	ef 91       	pop	r30
    3996:	bf 91       	pop	r27
    3998:	af 91       	pop	r26
    399a:	9f 91       	pop	r25
    399c:	8f 91       	pop	r24
    399e:	7f 91       	pop	r23
    39a0:	6f 91       	pop	r22
    39a2:	5f 91       	pop	r21
    39a4:	4f 91       	pop	r20
    39a6:	3f 91       	pop	r19
    39a8:	2f 91       	pop	r18
    39aa:	0f 90       	pop	r0
    39ac:	0f be       	out	0x3f, r0	; 63
    39ae:	0f 90       	pop	r0
    39b0:	1f 90       	pop	r1
    39b2:	18 95       	reti

000039b4 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    39b4:	80 91 2f 06 	lds	r24, 0x062F
    39b8:	90 e0       	ldi	r25, 0x00	; 0
    39ba:	20 91 30 06 	lds	r18, 0x0630
}
    39be:	82 1b       	sub	r24, r18
    39c0:	91 09       	sbc	r25, r1
    39c2:	08 95       	ret

000039c4 <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    39c4:	90 91 30 06 	lds	r25, 0x0630
    39c8:	80 91 2f 06 	lds	r24, 0x062F
    39cc:	98 17       	cp	r25, r24
    39ce:	50 f4       	brcc	.+20     	; 0x39e4 <_ZN7TwoWire4readEv+0x20>
    value = rxBuffer[rxBufferIndex];
    39d0:	e9 2f       	mov	r30, r25
    39d2:	f0 e0       	ldi	r31, 0x00	; 0
    39d4:	ef 5c       	subi	r30, 0xCF	; 207
    39d6:	f9 4f       	sbci	r31, 0xF9	; 249
    39d8:	20 81       	ld	r18, Z
    39da:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    39dc:	9f 5f       	subi	r25, 0xFF	; 255
    39de:	90 93 30 06 	sts	0x0630, r25
    39e2:	02 c0       	rjmp	.+4      	; 0x39e8 <_ZN7TwoWire4readEv+0x24>
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    39e4:	2f ef       	ldi	r18, 0xFF	; 255
    39e6:	3f ef       	ldi	r19, 0xFF	; 255
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
    39e8:	c9 01       	movw	r24, r18
    39ea:	08 95       	ret

000039ec <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
    39ec:	e0 91 30 06 	lds	r30, 0x0630
    39f0:	80 91 2f 06 	lds	r24, 0x062F
    39f4:	e8 17       	cp	r30, r24
    39f6:	30 f4       	brcc	.+12     	; 0x3a04 <_ZN7TwoWire4peekEv+0x18>
    value = rxBuffer[rxBufferIndex];
    39f8:	f0 e0       	ldi	r31, 0x00	; 0
    39fa:	ef 5c       	subi	r30, 0xCF	; 207
    39fc:	f9 4f       	sbci	r31, 0xF9	; 249
    39fe:	80 81       	ld	r24, Z
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	08 95       	ret
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    3a04:	8f ef       	ldi	r24, 0xFF	; 255
    3a06:	9f ef       	ldi	r25, 0xFF	; 255
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    3a08:	08 95       	ret

00003a0a <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
    3a0a:	08 95       	ret

00003a0c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    3a0c:	cf 92       	push	r12
    3a0e:	df 92       	push	r13
    3a10:	ef 92       	push	r14
    3a12:	ff 92       	push	r15
    3a14:	0f 93       	push	r16
    3a16:	1f 93       	push	r17
    3a18:	cf 93       	push	r28
    3a1a:	df 93       	push	r29
    3a1c:	7c 01       	movw	r14, r24
    3a1e:	26 2f       	mov	r18, r22
    3a20:	97 2f       	mov	r25, r23
    3a22:	8a 01       	movw	r16, r20
  if(transmitting){
    3a24:	80 91 0b 06 	lds	r24, 0x060B
    3a28:	88 23       	and	r24, r24
    3a2a:	91 f0       	breq	.+36     	; 0x3a50 <_ZN7TwoWire5writeEPKhj+0x44>
    3a2c:	c6 2f       	mov	r28, r22
    3a2e:	d7 2f       	mov	r29, r23
    3a30:	6e 01       	movw	r12, r28
    3a32:	c4 0e       	add	r12, r20
    3a34:	d5 1e       	adc	r13, r21
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    3a36:	cc 15       	cp	r28, r12
    3a38:	dd 05       	cpc	r29, r13
    3a3a:	71 f0       	breq	.+28     	; 0x3a58 <_ZN7TwoWire5writeEPKhj+0x4c>
      write(data[i]);
    3a3c:	69 91       	ld	r22, Y+
    3a3e:	d7 01       	movw	r26, r14
    3a40:	ed 91       	ld	r30, X+
    3a42:	fc 91       	ld	r31, X
    3a44:	01 90       	ld	r0, Z+
    3a46:	f0 81       	ld	r31, Z
    3a48:	e0 2d       	mov	r30, r0
    3a4a:	c7 01       	movw	r24, r14
    3a4c:	09 95       	icall
    3a4e:	f3 cf       	rjmp	.-26     	; 0x3a36 <_ZN7TwoWire5writeEPKhj+0x2a>
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    3a50:	64 2f       	mov	r22, r20
    3a52:	82 2f       	mov	r24, r18
    3a54:	0e 94 84 1b 	call	0x3708	; 0x3708 <twi_transmit>
  }
  return quantity;
}
    3a58:	c8 01       	movw	r24, r16
    3a5a:	df 91       	pop	r29
    3a5c:	cf 91       	pop	r28
    3a5e:	1f 91       	pop	r17
    3a60:	0f 91       	pop	r16
    3a62:	ff 90       	pop	r15
    3a64:	ef 90       	pop	r14
    3a66:	df 90       	pop	r13
    3a68:	cf 90       	pop	r12
    3a6a:	08 95       	ret

00003a6c <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    3a6c:	cf 93       	push	r28
    3a6e:	df 93       	push	r29
    3a70:	1f 92       	push	r1
    3a72:	cd b7       	in	r28, 0x3d	; 61
    3a74:	de b7       	in	r29, 0x3e	; 62
    3a76:	69 83       	std	Y+1, r22	; 0x01
  if(transmitting){
    3a78:	20 91 0b 06 	lds	r18, 0x060B
    3a7c:	22 23       	and	r18, r18
    3a7e:	d1 f0       	breq	.+52     	; 0x3ab4 <_ZN7TwoWire5writeEh+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    3a80:	20 91 0c 06 	lds	r18, 0x060C
    3a84:	20 32       	cpi	r18, 0x20	; 32
    3a86:	40 f0       	brcs	.+16     	; 0x3a98 <_ZN7TwoWire5writeEh+0x2c>
    3a88:	21 e0       	ldi	r18, 0x01	; 1
    3a8a:	30 e0       	ldi	r19, 0x00	; 0
    3a8c:	fc 01       	movw	r30, r24
    3a8e:	33 83       	std	Z+3, r19	; 0x03
    3a90:	22 83       	std	Z+2, r18	; 0x02
      setWriteError();
      return 0;
    3a92:	80 e0       	ldi	r24, 0x00	; 0
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	15 c0       	rjmp	.+42     	; 0x3ac2 <_ZN7TwoWire5writeEh+0x56>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    3a98:	80 91 0d 06 	lds	r24, 0x060D
    3a9c:	e8 2f       	mov	r30, r24
    3a9e:	f0 e0       	ldi	r31, 0x00	; 0
    3aa0:	e2 5f       	subi	r30, 0xF2	; 242
    3aa2:	f9 4f       	sbci	r31, 0xF9	; 249
    3aa4:	99 81       	ldd	r25, Y+1	; 0x01
    3aa6:	90 83       	st	Z, r25
    ++txBufferIndex;
    3aa8:	8f 5f       	subi	r24, 0xFF	; 255
    3aaa:	80 93 0d 06 	sts	0x060D, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    3aae:	80 93 0c 06 	sts	0x060C, r24
    3ab2:	05 c0       	rjmp	.+10     	; 0x3abe <_ZN7TwoWire5writeEh+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    3ab4:	61 e0       	ldi	r22, 0x01	; 1
    3ab6:	ce 01       	movw	r24, r28
    3ab8:	01 96       	adiw	r24, 0x01	; 1
    3aba:	0e 94 84 1b 	call	0x3708	; 0x3708 <twi_transmit>
  }
  return 1;
    3abe:	81 e0       	ldi	r24, 0x01	; 1
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
}
    3ac2:	0f 90       	pop	r0
    3ac4:	df 91       	pop	r29
    3ac6:	cf 91       	pop	r28
    3ac8:	08 95       	ret

00003aca <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    3aca:	fc 01       	movw	r30, r24
  public:
    Print() : write_error(0) {}
    3acc:	13 82       	std	Z+3, r1	; 0x03
    3ace:	12 82       	std	Z+2, r1	; 0x02
    3ad0:	88 ee       	ldi	r24, 0xE8	; 232
    3ad2:	93 e0       	ldi	r25, 0x03	; 3
    3ad4:	a0 e0       	ldi	r26, 0x00	; 0
    3ad6:	b0 e0       	ldi	r27, 0x00	; 0
    3ad8:	84 83       	std	Z+4, r24	; 0x04
    3ada:	95 83       	std	Z+5, r25	; 0x05
    3adc:	a6 83       	std	Z+6, r26	; 0x06
    3ade:	b7 83       	std	Z+7, r27	; 0x07
    3ae0:	85 ed       	ldi	r24, 0xD5	; 213
    3ae2:	91 e0       	ldi	r25, 0x01	; 1
    3ae4:	91 83       	std	Z+1, r25	; 0x01
    3ae6:	80 83       	st	Z, r24
    3ae8:	08 95       	ret

00003aea <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    3aea:	10 92 30 06 	sts	0x0630, r1
  rxBufferLength = 0;
    3aee:	10 92 2f 06 	sts	0x062F, r1

  txBufferIndex = 0;
    3af2:	10 92 0d 06 	sts	0x060D, r1
  txBufferLength = 0;
    3af6:	10 92 0c 06 	sts	0x060C, r1

  twi_init();
    3afa:	0c 94 10 1b 	jmp	0x3620	; 0x3620 <twi_init>

00003afe <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    3afe:	81 e0       	ldi	r24, 0x01	; 1
    3b00:	80 93 0b 06 	sts	0x060B, r24
  // set address of targeted slave
  txAddress = address;
    3b04:	60 93 2e 06 	sts	0x062E, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    3b08:	10 92 0d 06 	sts	0x060D, r1
  txBufferLength = 0;
    3b0c:	10 92 0c 06 	sts	0x060C, r1
    3b10:	08 95       	ret

00003b12 <_ZN7TwoWire15endTransmissionEh>:
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    3b12:	0f 93       	push	r16
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    3b14:	06 2f       	mov	r16, r22
    3b16:	21 e0       	ldi	r18, 0x01	; 1
    3b18:	40 91 0c 06 	lds	r20, 0x060C
    3b1c:	6e e0       	ldi	r22, 0x0E	; 14
    3b1e:	76 e0       	ldi	r23, 0x06	; 6
    3b20:	80 91 2e 06 	lds	r24, 0x062E
    3b24:	0e 94 2e 1b 	call	0x365c	; 0x365c <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    3b28:	10 92 0d 06 	sts	0x060D, r1
  txBufferLength = 0;
    3b2c:	10 92 0c 06 	sts	0x060C, r1
  // indicate that we are done transmitting
  transmitting = 0;
    3b30:	10 92 0b 06 	sts	0x060B, r1
  return ret;
}
    3b34:	0f 91       	pop	r16
    3b36:	08 95       	ret

00003b38 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    3b38:	61 e0       	ldi	r22, 0x01	; 1
    3b3a:	0c 94 89 1d 	jmp	0x3b12	; 0x3b12 <_ZN7TwoWire15endTransmissionEh>

00003b3e <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3b3e:	8f ef       	ldi	r24, 0xFF	; 255
    3b40:	95 e0       	ldi	r25, 0x05	; 5
    3b42:	0c 94 65 1d 	jmp	0x3aca	; 0x3aca <_ZN7TwoWireC1Ev>

00003b46 <__divsf3>:
    3b46:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <__divsf3x>
    3b4a:	0c 94 98 1e 	jmp	0x3d30	; 0x3d30 <__fp_round>
    3b4e:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <__fp_pscB>
    3b52:	58 f0       	brcs	.+22     	; 0x3b6a <__divsf3+0x24>
    3b54:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <__fp_pscA>
    3b58:	40 f0       	brcs	.+16     	; 0x3b6a <__divsf3+0x24>
    3b5a:	29 f4       	brne	.+10     	; 0x3b66 <__divsf3+0x20>
    3b5c:	5f 3f       	cpi	r21, 0xFF	; 255
    3b5e:	29 f0       	breq	.+10     	; 0x3b6a <__divsf3+0x24>
    3b60:	0c 94 81 1e 	jmp	0x3d02	; 0x3d02 <__fp_inf>
    3b64:	51 11       	cpse	r21, r1
    3b66:	0c 94 cc 1e 	jmp	0x3d98	; 0x3d98 <__fp_szero>
    3b6a:	0c 94 87 1e 	jmp	0x3d0e	; 0x3d0e <__fp_nan>

00003b6e <__divsf3x>:
    3b6e:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <__fp_split3>
    3b72:	68 f3       	brcs	.-38     	; 0x3b4e <__divsf3+0x8>

00003b74 <__divsf3_pse>:
    3b74:	99 23       	and	r25, r25
    3b76:	b1 f3       	breq	.-20     	; 0x3b64 <__divsf3+0x1e>
    3b78:	55 23       	and	r21, r21
    3b7a:	91 f3       	breq	.-28     	; 0x3b60 <__divsf3+0x1a>
    3b7c:	95 1b       	sub	r25, r21
    3b7e:	55 0b       	sbc	r21, r21
    3b80:	bb 27       	eor	r27, r27
    3b82:	aa 27       	eor	r26, r26
    3b84:	62 17       	cp	r22, r18
    3b86:	73 07       	cpc	r23, r19
    3b88:	84 07       	cpc	r24, r20
    3b8a:	38 f0       	brcs	.+14     	; 0x3b9a <__divsf3_pse+0x26>
    3b8c:	9f 5f       	subi	r25, 0xFF	; 255
    3b8e:	5f 4f       	sbci	r21, 0xFF	; 255
    3b90:	22 0f       	add	r18, r18
    3b92:	33 1f       	adc	r19, r19
    3b94:	44 1f       	adc	r20, r20
    3b96:	aa 1f       	adc	r26, r26
    3b98:	a9 f3       	breq	.-22     	; 0x3b84 <__divsf3_pse+0x10>
    3b9a:	35 d0       	rcall	.+106    	; 0x3c06 <__divsf3_pse+0x92>
    3b9c:	0e 2e       	mov	r0, r30
    3b9e:	3a f0       	brmi	.+14     	; 0x3bae <__divsf3_pse+0x3a>
    3ba0:	e0 e8       	ldi	r30, 0x80	; 128
    3ba2:	32 d0       	rcall	.+100    	; 0x3c08 <__divsf3_pse+0x94>
    3ba4:	91 50       	subi	r25, 0x01	; 1
    3ba6:	50 40       	sbci	r21, 0x00	; 0
    3ba8:	e6 95       	lsr	r30
    3baa:	00 1c       	adc	r0, r0
    3bac:	ca f7       	brpl	.-14     	; 0x3ba0 <__divsf3_pse+0x2c>
    3bae:	2b d0       	rcall	.+86     	; 0x3c06 <__divsf3_pse+0x92>
    3bb0:	fe 2f       	mov	r31, r30
    3bb2:	29 d0       	rcall	.+82     	; 0x3c06 <__divsf3_pse+0x92>
    3bb4:	66 0f       	add	r22, r22
    3bb6:	77 1f       	adc	r23, r23
    3bb8:	88 1f       	adc	r24, r24
    3bba:	bb 1f       	adc	r27, r27
    3bbc:	26 17       	cp	r18, r22
    3bbe:	37 07       	cpc	r19, r23
    3bc0:	48 07       	cpc	r20, r24
    3bc2:	ab 07       	cpc	r26, r27
    3bc4:	b0 e8       	ldi	r27, 0x80	; 128
    3bc6:	09 f0       	breq	.+2      	; 0x3bca <__divsf3_pse+0x56>
    3bc8:	bb 0b       	sbc	r27, r27
    3bca:	80 2d       	mov	r24, r0
    3bcc:	bf 01       	movw	r22, r30
    3bce:	ff 27       	eor	r31, r31
    3bd0:	93 58       	subi	r25, 0x83	; 131
    3bd2:	5f 4f       	sbci	r21, 0xFF	; 255
    3bd4:	3a f0       	brmi	.+14     	; 0x3be4 <__divsf3_pse+0x70>
    3bd6:	9e 3f       	cpi	r25, 0xFE	; 254
    3bd8:	51 05       	cpc	r21, r1
    3bda:	78 f0       	brcs	.+30     	; 0x3bfa <__divsf3_pse+0x86>
    3bdc:	0c 94 81 1e 	jmp	0x3d02	; 0x3d02 <__fp_inf>
    3be0:	0c 94 cc 1e 	jmp	0x3d98	; 0x3d98 <__fp_szero>
    3be4:	5f 3f       	cpi	r21, 0xFF	; 255
    3be6:	e4 f3       	brlt	.-8      	; 0x3be0 <__divsf3_pse+0x6c>
    3be8:	98 3e       	cpi	r25, 0xE8	; 232
    3bea:	d4 f3       	brlt	.-12     	; 0x3be0 <__divsf3_pse+0x6c>
    3bec:	86 95       	lsr	r24
    3bee:	77 95       	ror	r23
    3bf0:	67 95       	ror	r22
    3bf2:	b7 95       	ror	r27
    3bf4:	f7 95       	ror	r31
    3bf6:	9f 5f       	subi	r25, 0xFF	; 255
    3bf8:	c9 f7       	brne	.-14     	; 0x3bec <__divsf3_pse+0x78>
    3bfa:	88 0f       	add	r24, r24
    3bfc:	91 1d       	adc	r25, r1
    3bfe:	96 95       	lsr	r25
    3c00:	87 95       	ror	r24
    3c02:	97 f9       	bld	r25, 7
    3c04:	08 95       	ret
    3c06:	e1 e0       	ldi	r30, 0x01	; 1
    3c08:	66 0f       	add	r22, r22
    3c0a:	77 1f       	adc	r23, r23
    3c0c:	88 1f       	adc	r24, r24
    3c0e:	bb 1f       	adc	r27, r27
    3c10:	62 17       	cp	r22, r18
    3c12:	73 07       	cpc	r23, r19
    3c14:	84 07       	cpc	r24, r20
    3c16:	ba 07       	cpc	r27, r26
    3c18:	20 f0       	brcs	.+8      	; 0x3c22 <__divsf3_pse+0xae>
    3c1a:	62 1b       	sub	r22, r18
    3c1c:	73 0b       	sbc	r23, r19
    3c1e:	84 0b       	sbc	r24, r20
    3c20:	ba 0b       	sbc	r27, r26
    3c22:	ee 1f       	adc	r30, r30
    3c24:	88 f7       	brcc	.-30     	; 0x3c08 <__divsf3_pse+0x94>
    3c26:	e0 95       	com	r30
    3c28:	08 95       	ret

00003c2a <__fixunssfsi>:
    3c2a:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <__fp_splitA>
    3c2e:	88 f0       	brcs	.+34     	; 0x3c52 <__fixunssfsi+0x28>
    3c30:	9f 57       	subi	r25, 0x7F	; 127
    3c32:	98 f0       	brcs	.+38     	; 0x3c5a <__fixunssfsi+0x30>
    3c34:	b9 2f       	mov	r27, r25
    3c36:	99 27       	eor	r25, r25
    3c38:	b7 51       	subi	r27, 0x17	; 23
    3c3a:	b0 f0       	brcs	.+44     	; 0x3c68 <__fixunssfsi+0x3e>
    3c3c:	e1 f0       	breq	.+56     	; 0x3c76 <__fixunssfsi+0x4c>
    3c3e:	66 0f       	add	r22, r22
    3c40:	77 1f       	adc	r23, r23
    3c42:	88 1f       	adc	r24, r24
    3c44:	99 1f       	adc	r25, r25
    3c46:	1a f0       	brmi	.+6      	; 0x3c4e <__fixunssfsi+0x24>
    3c48:	ba 95       	dec	r27
    3c4a:	c9 f7       	brne	.-14     	; 0x3c3e <__fixunssfsi+0x14>
    3c4c:	14 c0       	rjmp	.+40     	; 0x3c76 <__fixunssfsi+0x4c>
    3c4e:	b1 30       	cpi	r27, 0x01	; 1
    3c50:	91 f0       	breq	.+36     	; 0x3c76 <__fixunssfsi+0x4c>
    3c52:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <__fp_zero>
    3c56:	b1 e0       	ldi	r27, 0x01	; 1
    3c58:	08 95       	ret
    3c5a:	0c 94 cb 1e 	jmp	0x3d96	; 0x3d96 <__fp_zero>
    3c5e:	67 2f       	mov	r22, r23
    3c60:	78 2f       	mov	r23, r24
    3c62:	88 27       	eor	r24, r24
    3c64:	b8 5f       	subi	r27, 0xF8	; 248
    3c66:	39 f0       	breq	.+14     	; 0x3c76 <__fixunssfsi+0x4c>
    3c68:	b9 3f       	cpi	r27, 0xF9	; 249
    3c6a:	cc f3       	brlt	.-14     	; 0x3c5e <__fixunssfsi+0x34>
    3c6c:	86 95       	lsr	r24
    3c6e:	77 95       	ror	r23
    3c70:	67 95       	ror	r22
    3c72:	b3 95       	inc	r27
    3c74:	d9 f7       	brne	.-10     	; 0x3c6c <__fixunssfsi+0x42>
    3c76:	3e f4       	brtc	.+14     	; 0x3c86 <__fixunssfsi+0x5c>
    3c78:	90 95       	com	r25
    3c7a:	80 95       	com	r24
    3c7c:	70 95       	com	r23
    3c7e:	61 95       	neg	r22
    3c80:	7f 4f       	sbci	r23, 0xFF	; 255
    3c82:	8f 4f       	sbci	r24, 0xFF	; 255
    3c84:	9f 4f       	sbci	r25, 0xFF	; 255
    3c86:	08 95       	ret

00003c88 <__floatunsisf>:
    3c88:	e8 94       	clt
    3c8a:	09 c0       	rjmp	.+18     	; 0x3c9e <__floatsisf+0x12>

00003c8c <__floatsisf>:
    3c8c:	97 fb       	bst	r25, 7
    3c8e:	3e f4       	brtc	.+14     	; 0x3c9e <__floatsisf+0x12>
    3c90:	90 95       	com	r25
    3c92:	80 95       	com	r24
    3c94:	70 95       	com	r23
    3c96:	61 95       	neg	r22
    3c98:	7f 4f       	sbci	r23, 0xFF	; 255
    3c9a:	8f 4f       	sbci	r24, 0xFF	; 255
    3c9c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c9e:	99 23       	and	r25, r25
    3ca0:	a9 f0       	breq	.+42     	; 0x3ccc <__floatsisf+0x40>
    3ca2:	f9 2f       	mov	r31, r25
    3ca4:	96 e9       	ldi	r25, 0x96	; 150
    3ca6:	bb 27       	eor	r27, r27
    3ca8:	93 95       	inc	r25
    3caa:	f6 95       	lsr	r31
    3cac:	87 95       	ror	r24
    3cae:	77 95       	ror	r23
    3cb0:	67 95       	ror	r22
    3cb2:	b7 95       	ror	r27
    3cb4:	f1 11       	cpse	r31, r1
    3cb6:	f8 cf       	rjmp	.-16     	; 0x3ca8 <__floatsisf+0x1c>
    3cb8:	fa f4       	brpl	.+62     	; 0x3cf8 <__floatsisf+0x6c>
    3cba:	bb 0f       	add	r27, r27
    3cbc:	11 f4       	brne	.+4      	; 0x3cc2 <__floatsisf+0x36>
    3cbe:	60 ff       	sbrs	r22, 0
    3cc0:	1b c0       	rjmp	.+54     	; 0x3cf8 <__floatsisf+0x6c>
    3cc2:	6f 5f       	subi	r22, 0xFF	; 255
    3cc4:	7f 4f       	sbci	r23, 0xFF	; 255
    3cc6:	8f 4f       	sbci	r24, 0xFF	; 255
    3cc8:	9f 4f       	sbci	r25, 0xFF	; 255
    3cca:	16 c0       	rjmp	.+44     	; 0x3cf8 <__floatsisf+0x6c>
    3ccc:	88 23       	and	r24, r24
    3cce:	11 f0       	breq	.+4      	; 0x3cd4 <__floatsisf+0x48>
    3cd0:	96 e9       	ldi	r25, 0x96	; 150
    3cd2:	11 c0       	rjmp	.+34     	; 0x3cf6 <__floatsisf+0x6a>
    3cd4:	77 23       	and	r23, r23
    3cd6:	21 f0       	breq	.+8      	; 0x3ce0 <__floatsisf+0x54>
    3cd8:	9e e8       	ldi	r25, 0x8E	; 142
    3cda:	87 2f       	mov	r24, r23
    3cdc:	76 2f       	mov	r23, r22
    3cde:	05 c0       	rjmp	.+10     	; 0x3cea <__floatsisf+0x5e>
    3ce0:	66 23       	and	r22, r22
    3ce2:	71 f0       	breq	.+28     	; 0x3d00 <__floatsisf+0x74>
    3ce4:	96 e8       	ldi	r25, 0x86	; 134
    3ce6:	86 2f       	mov	r24, r22
    3ce8:	70 e0       	ldi	r23, 0x00	; 0
    3cea:	60 e0       	ldi	r22, 0x00	; 0
    3cec:	2a f0       	brmi	.+10     	; 0x3cf8 <__floatsisf+0x6c>
    3cee:	9a 95       	dec	r25
    3cf0:	66 0f       	add	r22, r22
    3cf2:	77 1f       	adc	r23, r23
    3cf4:	88 1f       	adc	r24, r24
    3cf6:	da f7       	brpl	.-10     	; 0x3cee <__floatsisf+0x62>
    3cf8:	88 0f       	add	r24, r24
    3cfa:	96 95       	lsr	r25
    3cfc:	87 95       	ror	r24
    3cfe:	97 f9       	bld	r25, 7
    3d00:	08 95       	ret

00003d02 <__fp_inf>:
    3d02:	97 f9       	bld	r25, 7
    3d04:	9f 67       	ori	r25, 0x7F	; 127
    3d06:	80 e8       	ldi	r24, 0x80	; 128
    3d08:	70 e0       	ldi	r23, 0x00	; 0
    3d0a:	60 e0       	ldi	r22, 0x00	; 0
    3d0c:	08 95       	ret

00003d0e <__fp_nan>:
    3d0e:	9f ef       	ldi	r25, 0xFF	; 255
    3d10:	80 ec       	ldi	r24, 0xC0	; 192
    3d12:	08 95       	ret

00003d14 <__fp_pscA>:
    3d14:	00 24       	eor	r0, r0
    3d16:	0a 94       	dec	r0
    3d18:	16 16       	cp	r1, r22
    3d1a:	17 06       	cpc	r1, r23
    3d1c:	18 06       	cpc	r1, r24
    3d1e:	09 06       	cpc	r0, r25
    3d20:	08 95       	ret

00003d22 <__fp_pscB>:
    3d22:	00 24       	eor	r0, r0
    3d24:	0a 94       	dec	r0
    3d26:	12 16       	cp	r1, r18
    3d28:	13 06       	cpc	r1, r19
    3d2a:	14 06       	cpc	r1, r20
    3d2c:	05 06       	cpc	r0, r21
    3d2e:	08 95       	ret

00003d30 <__fp_round>:
    3d30:	09 2e       	mov	r0, r25
    3d32:	03 94       	inc	r0
    3d34:	00 0c       	add	r0, r0
    3d36:	11 f4       	brne	.+4      	; 0x3d3c <__fp_round+0xc>
    3d38:	88 23       	and	r24, r24
    3d3a:	52 f0       	brmi	.+20     	; 0x3d50 <__fp_round+0x20>
    3d3c:	bb 0f       	add	r27, r27
    3d3e:	40 f4       	brcc	.+16     	; 0x3d50 <__fp_round+0x20>
    3d40:	bf 2b       	or	r27, r31
    3d42:	11 f4       	brne	.+4      	; 0x3d48 <__fp_round+0x18>
    3d44:	60 ff       	sbrs	r22, 0
    3d46:	04 c0       	rjmp	.+8      	; 0x3d50 <__fp_round+0x20>
    3d48:	6f 5f       	subi	r22, 0xFF	; 255
    3d4a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d4c:	8f 4f       	sbci	r24, 0xFF	; 255
    3d4e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d50:	08 95       	ret

00003d52 <__fp_split3>:
    3d52:	57 fd       	sbrc	r21, 7
    3d54:	90 58       	subi	r25, 0x80	; 128
    3d56:	44 0f       	add	r20, r20
    3d58:	55 1f       	adc	r21, r21
    3d5a:	59 f0       	breq	.+22     	; 0x3d72 <__fp_splitA+0x10>
    3d5c:	5f 3f       	cpi	r21, 0xFF	; 255
    3d5e:	71 f0       	breq	.+28     	; 0x3d7c <__fp_splitA+0x1a>
    3d60:	47 95       	ror	r20

00003d62 <__fp_splitA>:
    3d62:	88 0f       	add	r24, r24
    3d64:	97 fb       	bst	r25, 7
    3d66:	99 1f       	adc	r25, r25
    3d68:	61 f0       	breq	.+24     	; 0x3d82 <__fp_splitA+0x20>
    3d6a:	9f 3f       	cpi	r25, 0xFF	; 255
    3d6c:	79 f0       	breq	.+30     	; 0x3d8c <__fp_splitA+0x2a>
    3d6e:	87 95       	ror	r24
    3d70:	08 95       	ret
    3d72:	12 16       	cp	r1, r18
    3d74:	13 06       	cpc	r1, r19
    3d76:	14 06       	cpc	r1, r20
    3d78:	55 1f       	adc	r21, r21
    3d7a:	f2 cf       	rjmp	.-28     	; 0x3d60 <__fp_split3+0xe>
    3d7c:	46 95       	lsr	r20
    3d7e:	f1 df       	rcall	.-30     	; 0x3d62 <__fp_splitA>
    3d80:	08 c0       	rjmp	.+16     	; 0x3d92 <__fp_splitA+0x30>
    3d82:	16 16       	cp	r1, r22
    3d84:	17 06       	cpc	r1, r23
    3d86:	18 06       	cpc	r1, r24
    3d88:	99 1f       	adc	r25, r25
    3d8a:	f1 cf       	rjmp	.-30     	; 0x3d6e <__fp_splitA+0xc>
    3d8c:	86 95       	lsr	r24
    3d8e:	71 05       	cpc	r23, r1
    3d90:	61 05       	cpc	r22, r1
    3d92:	08 94       	sec
    3d94:	08 95       	ret

00003d96 <__fp_zero>:
    3d96:	e8 94       	clt

00003d98 <__fp_szero>:
    3d98:	bb 27       	eor	r27, r27
    3d9a:	66 27       	eor	r22, r22
    3d9c:	77 27       	eor	r23, r23
    3d9e:	cb 01       	movw	r24, r22
    3da0:	97 f9       	bld	r25, 7
    3da2:	08 95       	ret

00003da4 <__mulsf3>:
    3da4:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <__mulsf3x>
    3da8:	0c 94 98 1e 	jmp	0x3d30	; 0x3d30 <__fp_round>
    3dac:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <__fp_pscA>
    3db0:	38 f0       	brcs	.+14     	; 0x3dc0 <__mulsf3+0x1c>
    3db2:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <__fp_pscB>
    3db6:	20 f0       	brcs	.+8      	; 0x3dc0 <__mulsf3+0x1c>
    3db8:	95 23       	and	r25, r21
    3dba:	11 f0       	breq	.+4      	; 0x3dc0 <__mulsf3+0x1c>
    3dbc:	0c 94 81 1e 	jmp	0x3d02	; 0x3d02 <__fp_inf>
    3dc0:	0c 94 87 1e 	jmp	0x3d0e	; 0x3d0e <__fp_nan>
    3dc4:	11 24       	eor	r1, r1
    3dc6:	0c 94 cc 1e 	jmp	0x3d98	; 0x3d98 <__fp_szero>

00003dca <__mulsf3x>:
    3dca:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <__fp_split3>
    3dce:	70 f3       	brcs	.-36     	; 0x3dac <__mulsf3+0x8>

00003dd0 <__mulsf3_pse>:
    3dd0:	95 9f       	mul	r25, r21
    3dd2:	c1 f3       	breq	.-16     	; 0x3dc4 <__mulsf3+0x20>
    3dd4:	95 0f       	add	r25, r21
    3dd6:	50 e0       	ldi	r21, 0x00	; 0
    3dd8:	55 1f       	adc	r21, r21
    3dda:	62 9f       	mul	r22, r18
    3ddc:	f0 01       	movw	r30, r0
    3dde:	72 9f       	mul	r23, r18
    3de0:	bb 27       	eor	r27, r27
    3de2:	f0 0d       	add	r31, r0
    3de4:	b1 1d       	adc	r27, r1
    3de6:	63 9f       	mul	r22, r19
    3de8:	aa 27       	eor	r26, r26
    3dea:	f0 0d       	add	r31, r0
    3dec:	b1 1d       	adc	r27, r1
    3dee:	aa 1f       	adc	r26, r26
    3df0:	64 9f       	mul	r22, r20
    3df2:	66 27       	eor	r22, r22
    3df4:	b0 0d       	add	r27, r0
    3df6:	a1 1d       	adc	r26, r1
    3df8:	66 1f       	adc	r22, r22
    3dfa:	82 9f       	mul	r24, r18
    3dfc:	22 27       	eor	r18, r18
    3dfe:	b0 0d       	add	r27, r0
    3e00:	a1 1d       	adc	r26, r1
    3e02:	62 1f       	adc	r22, r18
    3e04:	73 9f       	mul	r23, r19
    3e06:	b0 0d       	add	r27, r0
    3e08:	a1 1d       	adc	r26, r1
    3e0a:	62 1f       	adc	r22, r18
    3e0c:	83 9f       	mul	r24, r19
    3e0e:	a0 0d       	add	r26, r0
    3e10:	61 1d       	adc	r22, r1
    3e12:	22 1f       	adc	r18, r18
    3e14:	74 9f       	mul	r23, r20
    3e16:	33 27       	eor	r19, r19
    3e18:	a0 0d       	add	r26, r0
    3e1a:	61 1d       	adc	r22, r1
    3e1c:	23 1f       	adc	r18, r19
    3e1e:	84 9f       	mul	r24, r20
    3e20:	60 0d       	add	r22, r0
    3e22:	21 1d       	adc	r18, r1
    3e24:	82 2f       	mov	r24, r18
    3e26:	76 2f       	mov	r23, r22
    3e28:	6a 2f       	mov	r22, r26
    3e2a:	11 24       	eor	r1, r1
    3e2c:	9f 57       	subi	r25, 0x7F	; 127
    3e2e:	50 40       	sbci	r21, 0x00	; 0
    3e30:	9a f0       	brmi	.+38     	; 0x3e58 <__mulsf3_pse+0x88>
    3e32:	f1 f0       	breq	.+60     	; 0x3e70 <__mulsf3_pse+0xa0>
    3e34:	88 23       	and	r24, r24
    3e36:	4a f0       	brmi	.+18     	; 0x3e4a <__mulsf3_pse+0x7a>
    3e38:	ee 0f       	add	r30, r30
    3e3a:	ff 1f       	adc	r31, r31
    3e3c:	bb 1f       	adc	r27, r27
    3e3e:	66 1f       	adc	r22, r22
    3e40:	77 1f       	adc	r23, r23
    3e42:	88 1f       	adc	r24, r24
    3e44:	91 50       	subi	r25, 0x01	; 1
    3e46:	50 40       	sbci	r21, 0x00	; 0
    3e48:	a9 f7       	brne	.-22     	; 0x3e34 <__mulsf3_pse+0x64>
    3e4a:	9e 3f       	cpi	r25, 0xFE	; 254
    3e4c:	51 05       	cpc	r21, r1
    3e4e:	80 f0       	brcs	.+32     	; 0x3e70 <__mulsf3_pse+0xa0>
    3e50:	0c 94 81 1e 	jmp	0x3d02	; 0x3d02 <__fp_inf>
    3e54:	0c 94 cc 1e 	jmp	0x3d98	; 0x3d98 <__fp_szero>
    3e58:	5f 3f       	cpi	r21, 0xFF	; 255
    3e5a:	e4 f3       	brlt	.-8      	; 0x3e54 <__mulsf3_pse+0x84>
    3e5c:	98 3e       	cpi	r25, 0xE8	; 232
    3e5e:	d4 f3       	brlt	.-12     	; 0x3e54 <__mulsf3_pse+0x84>
    3e60:	86 95       	lsr	r24
    3e62:	77 95       	ror	r23
    3e64:	67 95       	ror	r22
    3e66:	b7 95       	ror	r27
    3e68:	f7 95       	ror	r31
    3e6a:	e7 95       	ror	r30
    3e6c:	9f 5f       	subi	r25, 0xFF	; 255
    3e6e:	c1 f7       	brne	.-16     	; 0x3e60 <__mulsf3_pse+0x90>
    3e70:	fe 2b       	or	r31, r30
    3e72:	88 0f       	add	r24, r24
    3e74:	91 1d       	adc	r25, r1
    3e76:	96 95       	lsr	r25
    3e78:	87 95       	ror	r24
    3e7a:	97 f9       	bld	r25, 7
    3e7c:	08 95       	ret

00003e7e <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    3e7e:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <abort>

00003e82 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    3e82:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    3e84:	91 8d       	ldd	r25, Z+25	; 0x19
    3e86:	22 8d       	ldd	r18, Z+26	; 0x1a
    3e88:	89 2f       	mov	r24, r25
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	80 5c       	subi	r24, 0xC0	; 192
    3e8e:	9f 4f       	sbci	r25, 0xFF	; 255
    3e90:	82 1b       	sub	r24, r18
    3e92:	91 09       	sbc	r25, r1
}
    3e94:	8f 73       	andi	r24, 0x3F	; 63
    3e96:	99 27       	eor	r25, r25
    3e98:	08 95       	ret

00003e9a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    3e9a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    3e9c:	91 8d       	ldd	r25, Z+25	; 0x19
    3e9e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3ea0:	98 17       	cp	r25, r24
    3ea2:	31 f0       	breq	.+12     	; 0x3eb0 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    3ea4:	82 8d       	ldd	r24, Z+26	; 0x1a
    3ea6:	e8 0f       	add	r30, r24
    3ea8:	f1 1d       	adc	r31, r1
    3eaa:	85 8d       	ldd	r24, Z+29	; 0x1d
    3eac:	90 e0       	ldi	r25, 0x00	; 0
    3eae:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3eb0:	8f ef       	ldi	r24, 0xFF	; 255
    3eb2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    3eb4:	08 95       	ret

00003eb6 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    3eb6:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    3eb8:	91 8d       	ldd	r25, Z+25	; 0x19
    3eba:	82 8d       	ldd	r24, Z+26	; 0x1a
    3ebc:	98 17       	cp	r25, r24
    3ebe:	61 f0       	breq	.+24     	; 0x3ed8 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3ec0:	82 8d       	ldd	r24, Z+26	; 0x1a
    3ec2:	df 01       	movw	r26, r30
    3ec4:	a8 0f       	add	r26, r24
    3ec6:	b1 1d       	adc	r27, r1
    3ec8:	5d 96       	adiw	r26, 0x1d	; 29
    3eca:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3ecc:	92 8d       	ldd	r25, Z+26	; 0x1a
    3ece:	9f 5f       	subi	r25, 0xFF	; 255
    3ed0:	9f 73       	andi	r25, 0x3F	; 63
    3ed2:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    3ed4:	90 e0       	ldi	r25, 0x00	; 0
    3ed6:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3ed8:	8f ef       	ldi	r24, 0xFF	; 255
    3eda:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3edc:	08 95       	ret

00003ede <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3ede:	84 ec       	ldi	r24, 0xC4	; 196
    3ee0:	90 e2       	ldi	r25, 0x20	; 32
    3ee2:	89 2b       	or	r24, r25
    3ee4:	49 f0       	breq	.+18     	; 0x3ef8 <_Z14serialEventRunv+0x1a>
    3ee6:	80 e0       	ldi	r24, 0x00	; 0
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
    3eea:	89 2b       	or	r24, r25
    3eec:	29 f0       	breq	.+10     	; 0x3ef8 <_Z14serialEventRunv+0x1a>
    3eee:	0e 94 c4 20 	call	0x4188	; 0x4188 <_Z17Serial0_availablev>
    3ef2:	81 11       	cpse	r24, r1
    3ef4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    3ef8:	08 95       	ret

00003efa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3efa:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3efc:	84 8d       	ldd	r24, Z+28	; 0x1c
    3efe:	df 01       	movw	r26, r30
    3f00:	a8 0f       	add	r26, r24
    3f02:	b1 1d       	adc	r27, r1
    3f04:	a3 5a       	subi	r26, 0xA3	; 163
    3f06:	bf 4f       	sbci	r27, 0xFF	; 255
    3f08:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3f0a:	84 8d       	ldd	r24, Z+28	; 0x1c
    3f0c:	90 e0       	ldi	r25, 0x00	; 0
    3f0e:	01 96       	adiw	r24, 0x01	; 1
    3f10:	8f 73       	andi	r24, 0x3F	; 63
    3f12:	99 27       	eor	r25, r25
    3f14:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    3f16:	a6 89       	ldd	r26, Z+22	; 0x16
    3f18:	b7 89       	ldd	r27, Z+23	; 0x17
    3f1a:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    3f1c:	a0 89       	ldd	r26, Z+16	; 0x10
    3f1e:	b1 89       	ldd	r27, Z+17	; 0x11
    3f20:	8c 91       	ld	r24, X
    3f22:	80 64       	ori	r24, 0x40	; 64
    3f24:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    3f26:	93 8d       	ldd	r25, Z+27	; 0x1b
    3f28:	84 8d       	ldd	r24, Z+28	; 0x1c
    3f2a:	98 13       	cpse	r25, r24
    3f2c:	06 c0       	rjmp	.+12     	; 0x3f3a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    3f2e:	02 88       	ldd	r0, Z+18	; 0x12
    3f30:	f3 89       	ldd	r31, Z+19	; 0x13
    3f32:	e0 2d       	mov	r30, r0
    3f34:	80 81       	ld	r24, Z
    3f36:	8f 7d       	andi	r24, 0xDF	; 223
    3f38:	80 83       	st	Z, r24
    3f3a:	08 95       	ret

00003f3c <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3f3c:	cf 93       	push	r28
    3f3e:	df 93       	push	r29
    3f40:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3f42:	88 8d       	ldd	r24, Y+24	; 0x18
    3f44:	88 23       	and	r24, r24
    3f46:	c9 f0       	breq	.+50     	; 0x3f7a <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3f48:	ea 89       	ldd	r30, Y+18	; 0x12
    3f4a:	fb 89       	ldd	r31, Y+19	; 0x13
    3f4c:	80 81       	ld	r24, Z
    3f4e:	85 fd       	sbrc	r24, 5
    3f50:	05 c0       	rjmp	.+10     	; 0x3f5c <_ZN14HardwareSerial5flushEv+0x20>
    3f52:	a8 89       	ldd	r26, Y+16	; 0x10
    3f54:	b9 89       	ldd	r27, Y+17	; 0x11
    3f56:	8c 91       	ld	r24, X
    3f58:	86 fd       	sbrc	r24, 6
    3f5a:	0f c0       	rjmp	.+30     	; 0x3f7a <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3f5c:	0f b6       	in	r0, 0x3f	; 63
    3f5e:	07 fc       	sbrc	r0, 7
    3f60:	f5 cf       	rjmp	.-22     	; 0x3f4c <_ZN14HardwareSerial5flushEv+0x10>
    3f62:	80 81       	ld	r24, Z
    3f64:	85 ff       	sbrs	r24, 5
    3f66:	f2 cf       	rjmp	.-28     	; 0x3f4c <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3f68:	a8 89       	ldd	r26, Y+16	; 0x10
    3f6a:	b9 89       	ldd	r27, Y+17	; 0x11
    3f6c:	8c 91       	ld	r24, X
    3f6e:	85 ff       	sbrs	r24, 5
    3f70:	ed cf       	rjmp	.-38     	; 0x3f4c <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3f72:	ce 01       	movw	r24, r28
    3f74:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3f78:	e7 cf       	rjmp	.-50     	; 0x3f48 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    3f7a:	df 91       	pop	r29
    3f7c:	cf 91       	pop	r28
    3f7e:	08 95       	ret

00003f80 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    3f80:	ef 92       	push	r14
    3f82:	ff 92       	push	r15
    3f84:	0f 93       	push	r16
    3f86:	1f 93       	push	r17
    3f88:	cf 93       	push	r28
    3f8a:	df 93       	push	r29
    3f8c:	ec 01       	movw	r28, r24
  _written = true;
    3f8e:	81 e0       	ldi	r24, 0x01	; 1
    3f90:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3f92:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3f94:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3f96:	98 13       	cpse	r25, r24
    3f98:	05 c0       	rjmp	.+10     	; 0x3fa4 <_ZN14HardwareSerial5writeEh+0x24>
    3f9a:	e8 89       	ldd	r30, Y+16	; 0x10
    3f9c:	f9 89       	ldd	r31, Y+17	; 0x11
    3f9e:	80 81       	ld	r24, Z
    3fa0:	85 fd       	sbrc	r24, 5
    3fa2:	24 c0       	rjmp	.+72     	; 0x3fec <_ZN14HardwareSerial5writeEh+0x6c>
    3fa4:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3fa6:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3fa8:	10 e0       	ldi	r17, 0x00	; 0
    3faa:	0f 5f       	subi	r16, 0xFF	; 255
    3fac:	1f 4f       	sbci	r17, 0xFF	; 255
    3fae:	0f 73       	andi	r16, 0x3F	; 63
    3fb0:	11 27       	eor	r17, r17
    3fb2:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3fb4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3fb6:	e8 12       	cpse	r14, r24
    3fb8:	0c c0       	rjmp	.+24     	; 0x3fd2 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    3fba:	0f b6       	in	r0, 0x3f	; 63
    3fbc:	07 fc       	sbrc	r0, 7
    3fbe:	fa cf       	rjmp	.-12     	; 0x3fb4 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3fc0:	e8 89       	ldd	r30, Y+16	; 0x10
    3fc2:	f9 89       	ldd	r31, Y+17	; 0x11
    3fc4:	80 81       	ld	r24, Z
    3fc6:	85 ff       	sbrs	r24, 5
    3fc8:	f5 cf       	rjmp	.-22     	; 0x3fb4 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    3fca:	ce 01       	movw	r24, r28
    3fcc:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3fd0:	f1 cf       	rjmp	.-30     	; 0x3fb4 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3fd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3fd4:	fe 01       	movw	r30, r28
    3fd6:	e8 0f       	add	r30, r24
    3fd8:	f1 1d       	adc	r31, r1
    3fda:	e3 5a       	subi	r30, 0xA3	; 163
    3fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fde:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    3fe0:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    3fe2:	ea 89       	ldd	r30, Y+18	; 0x12
    3fe4:	fb 89       	ldd	r31, Y+19	; 0x13
    3fe6:	80 81       	ld	r24, Z
    3fe8:	80 62       	ori	r24, 0x20	; 32
    3fea:	07 c0       	rjmp	.+14     	; 0x3ffa <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    3fec:	ee 89       	ldd	r30, Y+22	; 0x16
    3fee:	ff 89       	ldd	r31, Y+23	; 0x17
    3ff0:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    3ff2:	e8 89       	ldd	r30, Y+16	; 0x10
    3ff4:	f9 89       	ldd	r31, Y+17	; 0x11
    3ff6:	80 81       	ld	r24, Z
    3ff8:	80 64       	ori	r24, 0x40	; 64
    3ffa:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    3ffc:	81 e0       	ldi	r24, 0x01	; 1
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	df 91       	pop	r29
    4002:	cf 91       	pop	r28
    4004:	1f 91       	pop	r17
    4006:	0f 91       	pop	r16
    4008:	ff 90       	pop	r15
    400a:	ef 90       	pop	r14
    400c:	08 95       	ret

0000400e <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    400e:	cf 92       	push	r12
    4010:	df 92       	push	r13
    4012:	ef 92       	push	r14
    4014:	ff 92       	push	r15
    4016:	1f 93       	push	r17
    4018:	cf 93       	push	r28
    401a:	df 93       	push	r29
    401c:	ec 01       	movw	r28, r24
    401e:	6a 01       	movw	r12, r20
    4020:	7b 01       	movw	r14, r22
    4022:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    4024:	e8 89       	ldd	r30, Y+16	; 0x10
    4026:	f9 89       	ldd	r31, Y+17	; 0x11
    4028:	82 e0       	ldi	r24, 0x02	; 2
    402a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    402c:	41 15       	cp	r20, r1
    402e:	51 4e       	sbci	r21, 0xE1	; 225
    4030:	61 05       	cpc	r22, r1
    4032:	71 05       	cpc	r23, r1
    4034:	b1 f0       	breq	.+44     	; 0x4062 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    4036:	60 e0       	ldi	r22, 0x00	; 0
    4038:	79 e0       	ldi	r23, 0x09	; 9
    403a:	8d e3       	ldi	r24, 0x3D	; 61
    403c:	90 e0       	ldi	r25, 0x00	; 0
    403e:	a7 01       	movw	r20, r14
    4040:	96 01       	movw	r18, r12
    4042:	0e 94 0c 24 	call	0x4818	; 0x4818 <__udivmodsi4>
    4046:	da 01       	movw	r26, r20
    4048:	c9 01       	movw	r24, r18
    404a:	01 97       	sbiw	r24, 0x01	; 1
    404c:	a1 09       	sbc	r26, r1
    404e:	b1 09       	sbc	r27, r1
    4050:	b6 95       	lsr	r27
    4052:	a7 95       	ror	r26
    4054:	97 95       	ror	r25
    4056:	87 95       	ror	r24
    4058:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    405a:	41 15       	cp	r20, r1
    405c:	80 e1       	ldi	r24, 0x10	; 16
    405e:	58 07       	cpc	r21, r24
    4060:	a8 f0       	brcs	.+42     	; 0x408c <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    4062:	e8 89       	ldd	r30, Y+16	; 0x10
    4064:	f9 89       	ldd	r31, Y+17	; 0x11
    4066:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    4068:	60 e8       	ldi	r22, 0x80	; 128
    406a:	74 e8       	ldi	r23, 0x84	; 132
    406c:	8e e1       	ldi	r24, 0x1E	; 30
    406e:	90 e0       	ldi	r25, 0x00	; 0
    4070:	a7 01       	movw	r20, r14
    4072:	96 01       	movw	r18, r12
    4074:	0e 94 0c 24 	call	0x4818	; 0x4818 <__udivmodsi4>
    4078:	ba 01       	movw	r22, r20
    407a:	a9 01       	movw	r20, r18
    407c:	41 50       	subi	r20, 0x01	; 1
    407e:	51 09       	sbc	r21, r1
    4080:	61 09       	sbc	r22, r1
    4082:	71 09       	sbc	r23, r1
    4084:	76 95       	lsr	r23
    4086:	67 95       	ror	r22
    4088:	57 95       	ror	r21
    408a:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    408c:	ec 85       	ldd	r30, Y+12	; 0x0c
    408e:	fd 85       	ldd	r31, Y+13	; 0x0d
    4090:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    4092:	ee 85       	ldd	r30, Y+14	; 0x0e
    4094:	ff 85       	ldd	r31, Y+15	; 0x0f
    4096:	40 83       	st	Z, r20

  _written = false;
    4098:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    409a:	ec 89       	ldd	r30, Y+20	; 0x14
    409c:	fd 89       	ldd	r31, Y+21	; 0x15
    409e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    40a0:	ea 89       	ldd	r30, Y+18	; 0x12
    40a2:	fb 89       	ldd	r31, Y+19	; 0x13
    40a4:	80 81       	ld	r24, Z
    40a6:	80 61       	ori	r24, 0x10	; 16
    40a8:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    40aa:	ea 89       	ldd	r30, Y+18	; 0x12
    40ac:	fb 89       	ldd	r31, Y+19	; 0x13
    40ae:	80 81       	ld	r24, Z
    40b0:	88 60       	ori	r24, 0x08	; 8
    40b2:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    40b4:	ea 89       	ldd	r30, Y+18	; 0x12
    40b6:	fb 89       	ldd	r31, Y+19	; 0x13
    40b8:	80 81       	ld	r24, Z
    40ba:	80 68       	ori	r24, 0x80	; 128
    40bc:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    40be:	ea 89       	ldd	r30, Y+18	; 0x12
    40c0:	fb 89       	ldd	r31, Y+19	; 0x13
    40c2:	80 81       	ld	r24, Z
    40c4:	8f 7d       	andi	r24, 0xDF	; 223
    40c6:	80 83       	st	Z, r24
}
    40c8:	df 91       	pop	r29
    40ca:	cf 91       	pop	r28
    40cc:	1f 91       	pop	r17
    40ce:	ff 90       	pop	r15
    40d0:	ef 90       	pop	r14
    40d2:	df 90       	pop	r13
    40d4:	cf 90       	pop	r12
    40d6:	08 95       	ret

000040d8 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    40d8:	1f 92       	push	r1
    40da:	0f 92       	push	r0
    40dc:	0f b6       	in	r0, 0x3f	; 63
    40de:	0f 92       	push	r0
    40e0:	11 24       	eor	r1, r1
    40e2:	2f 93       	push	r18
    40e4:	8f 93       	push	r24
    40e6:	9f 93       	push	r25
    40e8:	ef 93       	push	r30
    40ea:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    40ec:	e0 91 61 06 	lds	r30, 0x0661
    40f0:	f0 91 62 06 	lds	r31, 0x0662
    40f4:	80 81       	ld	r24, Z
    40f6:	e0 91 67 06 	lds	r30, 0x0667
    40fa:	f0 91 68 06 	lds	r31, 0x0668
    40fe:	82 fd       	sbrc	r24, 2
    4100:	12 c0       	rjmp	.+36     	; 0x4126 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    4102:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    4104:	80 91 6a 06 	lds	r24, 0x066A
    4108:	8f 5f       	subi	r24, 0xFF	; 255
    410a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    410c:	20 91 6b 06 	lds	r18, 0x066B
    4110:	82 17       	cp	r24, r18
    4112:	51 f0       	breq	.+20     	; 0x4128 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    4114:	e0 91 6a 06 	lds	r30, 0x066A
    4118:	f0 e0       	ldi	r31, 0x00	; 0
    411a:	ef 5a       	subi	r30, 0xAF	; 175
    411c:	f9 4f       	sbci	r31, 0xF9	; 249
    411e:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    4120:	80 93 6a 06 	sts	0x066A, r24
    4124:	01 c0       	rjmp	.+2      	; 0x4128 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    4126:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    4128:	ff 91       	pop	r31
    412a:	ef 91       	pop	r30
    412c:	9f 91       	pop	r25
    412e:	8f 91       	pop	r24
    4130:	2f 91       	pop	r18
    4132:	0f 90       	pop	r0
    4134:	0f be       	out	0x3f, r0	; 63
    4136:	0f 90       	pop	r0
    4138:	1f 90       	pop	r1
    413a:	18 95       	reti

0000413c <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    413c:	1f 92       	push	r1
    413e:	0f 92       	push	r0
    4140:	0f b6       	in	r0, 0x3f	; 63
    4142:	0f 92       	push	r0
    4144:	11 24       	eor	r1, r1
    4146:	2f 93       	push	r18
    4148:	3f 93       	push	r19
    414a:	4f 93       	push	r20
    414c:	5f 93       	push	r21
    414e:	6f 93       	push	r22
    4150:	7f 93       	push	r23
    4152:	8f 93       	push	r24
    4154:	9f 93       	push	r25
    4156:	af 93       	push	r26
    4158:	bf 93       	push	r27
    415a:	ef 93       	push	r30
    415c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    415e:	81 e5       	ldi	r24, 0x51	; 81
    4160:	96 e0       	ldi	r25, 0x06	; 6
    4162:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    4166:	ff 91       	pop	r31
    4168:	ef 91       	pop	r30
    416a:	bf 91       	pop	r27
    416c:	af 91       	pop	r26
    416e:	9f 91       	pop	r25
    4170:	8f 91       	pop	r24
    4172:	7f 91       	pop	r23
    4174:	6f 91       	pop	r22
    4176:	5f 91       	pop	r21
    4178:	4f 91       	pop	r20
    417a:	3f 91       	pop	r19
    417c:	2f 91       	pop	r18
    417e:	0f 90       	pop	r0
    4180:	0f be       	out	0x3f, r0	; 63
    4182:	0f 90       	pop	r0
    4184:	1f 90       	pop	r1
    4186:	18 95       	reti

00004188 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    4188:	81 e5       	ldi	r24, 0x51	; 81
    418a:	96 e0       	ldi	r25, 0x06	; 6
    418c:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_ZN14HardwareSerial9availableEv>
    4190:	21 e0       	ldi	r18, 0x01	; 1
    4192:	89 2b       	or	r24, r25
    4194:	09 f4       	brne	.+2      	; 0x4198 <_Z17Serial0_availablev+0x10>
    4196:	20 e0       	ldi	r18, 0x00	; 0
}
    4198:	82 2f       	mov	r24, r18
    419a:	08 95       	ret

0000419c <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    419c:	e1 e5       	ldi	r30, 0x51	; 81
    419e:	f6 e0       	ldi	r31, 0x06	; 6
    41a0:	13 82       	std	Z+3, r1	; 0x03
    41a2:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    41a4:	88 ee       	ldi	r24, 0xE8	; 232
    41a6:	93 e0       	ldi	r25, 0x03	; 3
    41a8:	a0 e0       	ldi	r26, 0x00	; 0
    41aa:	b0 e0       	ldi	r27, 0x00	; 0
    41ac:	84 83       	std	Z+4, r24	; 0x04
    41ae:	95 83       	std	Z+5, r25	; 0x05
    41b0:	a6 83       	std	Z+6, r26	; 0x06
    41b2:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    41b4:	85 ee       	ldi	r24, 0xE5	; 229
    41b6:	91 e0       	ldi	r25, 0x01	; 1
    41b8:	91 83       	std	Z+1, r25	; 0x01
    41ba:	80 83       	st	Z, r24
    41bc:	85 ec       	ldi	r24, 0xC5	; 197
    41be:	90 e0       	ldi	r25, 0x00	; 0
    41c0:	95 87       	std	Z+13, r25	; 0x0d
    41c2:	84 87       	std	Z+12, r24	; 0x0c
    41c4:	84 ec       	ldi	r24, 0xC4	; 196
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	97 87       	std	Z+15, r25	; 0x0f
    41ca:	86 87       	std	Z+14, r24	; 0x0e
    41cc:	80 ec       	ldi	r24, 0xC0	; 192
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	91 8b       	std	Z+17, r25	; 0x11
    41d2:	80 8b       	std	Z+16, r24	; 0x10
    41d4:	81 ec       	ldi	r24, 0xC1	; 193
    41d6:	90 e0       	ldi	r25, 0x00	; 0
    41d8:	93 8b       	std	Z+19, r25	; 0x13
    41da:	82 8b       	std	Z+18, r24	; 0x12
    41dc:	82 ec       	ldi	r24, 0xC2	; 194
    41de:	90 e0       	ldi	r25, 0x00	; 0
    41e0:	95 8b       	std	Z+21, r25	; 0x15
    41e2:	84 8b       	std	Z+20, r24	; 0x14
    41e4:	86 ec       	ldi	r24, 0xC6	; 198
    41e6:	90 e0       	ldi	r25, 0x00	; 0
    41e8:	97 8b       	std	Z+23, r25	; 0x17
    41ea:	86 8b       	std	Z+22, r24	; 0x16
    41ec:	11 8e       	std	Z+25, r1	; 0x19
    41ee:	12 8e       	std	Z+26, r1	; 0x1a
    41f0:	13 8e       	std	Z+27, r1	; 0x1b
    41f2:	14 8e       	std	Z+28, r1	; 0x1c
    41f4:	08 95       	ret

000041f6 <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    41f6:	08 95       	ret

000041f8 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    41f8:	0e 94 12 23 	call	0x4624	; 0x4624 <init>

	initVariant();
    41fc:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    4200:	0e 94 4f 05 	call	0xa9e	; 0xa9e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    4204:	cf e6       	ldi	r28, 0x6F	; 111
    4206:	df e1       	ldi	r29, 0x1F	; 31
#endif
	
	setup();
    
	for (;;) {
		loop();
    4208:	0e 94 a0 00 	call	0x140	; 0x140 <loop>
		if (serialEventRun) serialEventRun();
    420c:	20 97       	sbiw	r28, 0x00	; 0
    420e:	e1 f3       	breq	.-8      	; 0x4208 <main+0x10>
    4210:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <_Z14serialEventRunv>
    4214:	f9 cf       	rjmp	.-14     	; 0x4208 <main+0x10>

00004216 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    4216:	cf 92       	push	r12
    4218:	df 92       	push	r13
    421a:	ef 92       	push	r14
    421c:	ff 92       	push	r15
    421e:	0f 93       	push	r16
    4220:	1f 93       	push	r17
    4222:	cf 93       	push	r28
    4224:	df 93       	push	r29
    4226:	6c 01       	movw	r12, r24
    4228:	7a 01       	movw	r14, r20
    422a:	8b 01       	movw	r16, r22
  size_t n = 0;
    422c:	c0 e0       	ldi	r28, 0x00	; 0
    422e:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    4230:	ce 15       	cp	r28, r14
    4232:	df 05       	cpc	r29, r15
    4234:	89 f0       	breq	.+34     	; 0x4258 <_ZN5Print5writeEPKhj+0x42>
    if (write(*buffer++)) n++;
    4236:	d8 01       	movw	r26, r16
    4238:	6d 91       	ld	r22, X+
    423a:	8d 01       	movw	r16, r26
    423c:	d6 01       	movw	r26, r12
    423e:	ed 91       	ld	r30, X+
    4240:	fc 91       	ld	r31, X
    4242:	01 90       	ld	r0, Z+
    4244:	f0 81       	ld	r31, Z
    4246:	e0 2d       	mov	r30, r0
    4248:	c6 01       	movw	r24, r12
    424a:	09 95       	icall
    424c:	89 2b       	or	r24, r25
    424e:	11 f4       	brne	.+4      	; 0x4254 <_ZN5Print5writeEPKhj+0x3e>
    4250:	7e 01       	movw	r14, r28
    4252:	02 c0       	rjmp	.+4      	; 0x4258 <_ZN5Print5writeEPKhj+0x42>
    4254:	21 96       	adiw	r28, 0x01	; 1
    4256:	ec cf       	rjmp	.-40     	; 0x4230 <_ZN5Print5writeEPKhj+0x1a>
    else break;
  }
  return n;
}
    4258:	c7 01       	movw	r24, r14
    425a:	df 91       	pop	r29
    425c:	cf 91       	pop	r28
    425e:	1f 91       	pop	r17
    4260:	0f 91       	pop	r16
    4262:	ff 90       	pop	r15
    4264:	ef 90       	pop	r14
    4266:	df 90       	pop	r13
    4268:	cf 90       	pop	r12
    426a:	08 95       	ret

0000426c <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    426c:	61 15       	cp	r22, r1
    426e:	71 05       	cpc	r23, r1
    4270:	79 f0       	breq	.+30     	; 0x4290 <_ZN5Print5writeEPKc+0x24>
      return write((const uint8_t *)str, strlen(str));
    4272:	fb 01       	movw	r30, r22
    4274:	01 90       	ld	r0, Z+
    4276:	00 20       	and	r0, r0
    4278:	e9 f7       	brne	.-6      	; 0x4274 <_ZN5Print5writeEPKc+0x8>
    427a:	31 97       	sbiw	r30, 0x01	; 1
    427c:	af 01       	movw	r20, r30
    427e:	46 1b       	sub	r20, r22
    4280:	57 0b       	sbc	r21, r23
    4282:	dc 01       	movw	r26, r24
    4284:	ed 91       	ld	r30, X+
    4286:	fc 91       	ld	r31, X
    4288:	02 80       	ldd	r0, Z+2	; 0x02
    428a:	f3 81       	ldd	r31, Z+3	; 0x03
    428c:	e0 2d       	mov	r30, r0
    428e:	09 94       	ijmp
    }
    4290:	80 e0       	ldi	r24, 0x00	; 0
    4292:	90 e0       	ldi	r25, 0x00	; 0
    4294:	08 95       	ret

00004296 <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    4296:	0c 94 36 21 	jmp	0x426c	; 0x426c <_ZN5Print5writeEPKc>

0000429a <_ZN5Print5printEc>:
}

size_t Print::print(char c)
{
  return write(c);
    429a:	dc 01       	movw	r26, r24
    429c:	ed 91       	ld	r30, X+
    429e:	fc 91       	ld	r31, X
    42a0:	01 90       	ld	r0, Z+
    42a2:	f0 81       	ld	r31, Z
    42a4:	e0 2d       	mov	r30, r0
    42a6:	09 94       	ijmp

000042a8 <_ZN5Print7printlnEv>:
  return x.printTo(*this);
}

size_t Print::println(void)
{
  return write("\r\n");
    42a8:	61 ef       	ldi	r22, 0xF1	; 241
    42aa:	71 e0       	ldi	r23, 0x01	; 1
    42ac:	0c 94 36 21 	jmp	0x426c	; 0x426c <_ZN5Print5writeEPKc>

000042b0 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    42b0:	0f 93       	push	r16
    42b2:	1f 93       	push	r17
    42b4:	cf 93       	push	r28
    42b6:	df 93       	push	r29
    42b8:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    42ba:	0e 94 36 21 	call	0x426c	; 0x426c <_ZN5Print5writeEPKc>
    42be:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    42c0:	ce 01       	movw	r24, r28
    42c2:	0e 94 54 21 	call	0x42a8	; 0x42a8 <_ZN5Print7printlnEv>
  return n;
}
    42c6:	80 0f       	add	r24, r16
    42c8:	91 1f       	adc	r25, r17
    42ca:	df 91       	pop	r29
    42cc:	cf 91       	pop	r28
    42ce:	1f 91       	pop	r17
    42d0:	0f 91       	pop	r16
    42d2:	08 95       	ret

000042d4 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    42d4:	8f 92       	push	r8
    42d6:	9f 92       	push	r9
    42d8:	af 92       	push	r10
    42da:	bf 92       	push	r11
    42dc:	cf 92       	push	r12
    42de:	df 92       	push	r13
    42e0:	ef 92       	push	r14
    42e2:	ff 92       	push	r15
    42e4:	0f 93       	push	r16
    42e6:	1f 93       	push	r17
    42e8:	cf 93       	push	r28
    42ea:	df 93       	push	r29
    42ec:	cd b7       	in	r28, 0x3d	; 61
    42ee:	de b7       	in	r29, 0x3e	; 62
    42f0:	a1 97       	sbiw	r28, 0x21	; 33
    42f2:	0f b6       	in	r0, 0x3f	; 63
    42f4:	f8 94       	cli
    42f6:	de bf       	out	0x3e, r29	; 62
    42f8:	0f be       	out	0x3f, r0	; 63
    42fa:	cd bf       	out	0x3d, r28	; 61
    42fc:	7c 01       	movw	r14, r24
    42fe:	d4 2e       	mov	r13, r20
    4300:	c5 2e       	mov	r12, r21
    4302:	db 01       	movw	r26, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    4304:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    4306:	22 30       	cpi	r18, 0x02	; 2
    4308:	08 f4       	brcc	.+2      	; 0x430c <_ZN5Print11printNumberEmh+0x38>
    430a:	2a e0       	ldi	r18, 0x0A	; 10
    430c:	8e 01       	movw	r16, r28
    430e:	0f 5d       	subi	r16, 0xDF	; 223
    4310:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
    4312:	82 2e       	mov	r8, r18
    4314:	91 2c       	mov	r9, r1
    4316:	a1 2c       	mov	r10, r1
    4318:	b1 2c       	mov	r11, r1
    431a:	6d 2d       	mov	r22, r13
    431c:	7c 2d       	mov	r23, r12
    431e:	cd 01       	movw	r24, r26
    4320:	a5 01       	movw	r20, r10
    4322:	94 01       	movw	r18, r8
    4324:	0e 94 0c 24 	call	0x4818	; 0x4818 <__udivmodsi4>
    n /= base;
    4328:	d2 2e       	mov	r13, r18
    432a:	c3 2e       	mov	r12, r19
    432c:	da 01       	movw	r26, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    432e:	01 50       	subi	r16, 0x01	; 1
    4330:	11 09       	sbc	r17, r1
    4332:	6a 30       	cpi	r22, 0x0A	; 10
    4334:	71 05       	cpc	r23, r1
    4336:	81 05       	cpc	r24, r1
    4338:	91 05       	cpc	r25, r1
    433a:	10 f4       	brcc	.+4      	; 0x4340 <_ZN5Print11printNumberEmh+0x6c>
    433c:	60 5d       	subi	r22, 0xD0	; 208
    433e:	01 c0       	rjmp	.+2      	; 0x4342 <_ZN5Print11printNumberEmh+0x6e>
    4340:	69 5c       	subi	r22, 0xC9	; 201
    4342:	f8 01       	movw	r30, r16
    4344:	60 83       	st	Z, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    4346:	23 2b       	or	r18, r19
    4348:	24 2b       	or	r18, r20
    434a:	25 2b       	or	r18, r21
    434c:	31 f7       	brne	.-52     	; 0x431a <_ZN5Print11printNumberEmh+0x46>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    434e:	b8 01       	movw	r22, r16
    4350:	c7 01       	movw	r24, r14
    4352:	0e 94 36 21 	call	0x426c	; 0x426c <_ZN5Print5writeEPKc>
}
    4356:	a1 96       	adiw	r28, 0x21	; 33
    4358:	0f b6       	in	r0, 0x3f	; 63
    435a:	f8 94       	cli
    435c:	de bf       	out	0x3e, r29	; 62
    435e:	0f be       	out	0x3f, r0	; 63
    4360:	cd bf       	out	0x3d, r28	; 61
    4362:	df 91       	pop	r29
    4364:	cf 91       	pop	r28
    4366:	1f 91       	pop	r17
    4368:	0f 91       	pop	r16
    436a:	ff 90       	pop	r15
    436c:	ef 90       	pop	r14
    436e:	df 90       	pop	r13
    4370:	cf 90       	pop	r12
    4372:	bf 90       	pop	r11
    4374:	af 90       	pop	r10
    4376:	9f 90       	pop	r9
    4378:	8f 90       	pop	r8
    437a:	08 95       	ret

0000437c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    437c:	cf 92       	push	r12
    437e:	df 92       	push	r13
    4380:	ef 92       	push	r14
    4382:	ff 92       	push	r15
    4384:	0f 93       	push	r16
    4386:	1f 93       	push	r17
    4388:	cf 93       	push	r28
    438a:	df 93       	push	r29
    438c:	ec 01       	movw	r28, r24
    438e:	6a 01       	movw	r12, r20
    4390:	7b 01       	movw	r14, r22
  if (base == 0) {
    4392:	21 15       	cp	r18, r1
    4394:	31 05       	cpc	r19, r1
    4396:	79 f4       	brne	.+30     	; 0x43b6 <_ZN5Print5printEli+0x3a>
    return write(n);
    4398:	e8 81       	ld	r30, Y
    439a:	f9 81       	ldd	r31, Y+1	; 0x01
    439c:	01 90       	ld	r0, Z+
    439e:	f0 81       	ld	r31, Z
    43a0:	e0 2d       	mov	r30, r0
    43a2:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    43a4:	df 91       	pop	r29
    43a6:	cf 91       	pop	r28
    43a8:	1f 91       	pop	r17
    43aa:	0f 91       	pop	r16
    43ac:	ff 90       	pop	r15
    43ae:	ef 90       	pop	r14
    43b0:	df 90       	pop	r13
    43b2:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    43b4:	09 94       	ijmp
  } else if (base == 10) {
    43b6:	2a 30       	cpi	r18, 0x0A	; 10
    43b8:	31 05       	cpc	r19, r1
    43ba:	e9 f4       	brne	.+58     	; 0x43f6 <_ZN5Print5printEli+0x7a>
    if (n < 0) {
    43bc:	77 ff       	sbrs	r23, 7
    43be:	1a c0       	rjmp	.+52     	; 0x43f4 <_ZN5Print5printEli+0x78>
      int t = print('-');
    43c0:	6d e2       	ldi	r22, 0x2D	; 45
    43c2:	0e 94 4d 21 	call	0x429a	; 0x429a <_ZN5Print5printEc>
    43c6:	8c 01       	movw	r16, r24
      n = -n;
    43c8:	44 27       	eor	r20, r20
    43ca:	55 27       	eor	r21, r21
    43cc:	ba 01       	movw	r22, r20
    43ce:	4c 19       	sub	r20, r12
    43d0:	5d 09       	sbc	r21, r13
    43d2:	6e 09       	sbc	r22, r14
    43d4:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
    43d6:	2a e0       	ldi	r18, 0x0A	; 10
    43d8:	ce 01       	movw	r24, r28
    43da:	0e 94 6a 21 	call	0x42d4	; 0x42d4 <_ZN5Print11printNumberEmh>
    43de:	80 0f       	add	r24, r16
    43e0:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    43e2:	df 91       	pop	r29
    43e4:	cf 91       	pop	r28
    43e6:	1f 91       	pop	r17
    43e8:	0f 91       	pop	r16
    43ea:	ff 90       	pop	r15
    43ec:	ef 90       	pop	r14
    43ee:	df 90       	pop	r13
    43f0:	cf 90       	pop	r12
    43f2:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    43f4:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    43f6:	b7 01       	movw	r22, r14
    43f8:	a6 01       	movw	r20, r12
    43fa:	ce 01       	movw	r24, r28
  }
}
    43fc:	df 91       	pop	r29
    43fe:	cf 91       	pop	r28
    4400:	1f 91       	pop	r17
    4402:	0f 91       	pop	r16
    4404:	ff 90       	pop	r15
    4406:	ef 90       	pop	r14
    4408:	df 90       	pop	r13
    440a:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    440c:	0c 94 6a 21 	jmp	0x42d4	; 0x42d4 <_ZN5Print11printNumberEmh>

00004410 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    4410:	0f 93       	push	r16
    4412:	1f 93       	push	r17
    4414:	cf 93       	push	r28
    4416:	df 93       	push	r29
    4418:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    441a:	0e 94 be 21 	call	0x437c	; 0x437c <_ZN5Print5printEli>
    441e:	8c 01       	movw	r16, r24
  n += println();
    4420:	ce 01       	movw	r24, r28
    4422:	0e 94 54 21 	call	0x42a8	; 0x42a8 <_ZN5Print7printlnEv>
  return n;
}
    4426:	80 0f       	add	r24, r16
    4428:	91 1f       	adc	r25, r17
    442a:	df 91       	pop	r29
    442c:	cf 91       	pop	r28
    442e:	1f 91       	pop	r17
    4430:	0f 91       	pop	r16
    4432:	08 95       	ret

00004434 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    4434:	21 15       	cp	r18, r1
    4436:	31 05       	cpc	r19, r1
    4438:	41 f4       	brne	.+16     	; 0x444a <_ZN5Print5printEmi+0x16>
    443a:	dc 01       	movw	r26, r24
    443c:	ed 91       	ld	r30, X+
    443e:	fc 91       	ld	r31, X
    4440:	01 90       	ld	r0, Z+
    4442:	f0 81       	ld	r31, Z
    4444:	e0 2d       	mov	r30, r0
    4446:	64 2f       	mov	r22, r20
    4448:	09 94       	ijmp
  else return printNumber(n, base);
    444a:	0c 94 6a 21 	jmp	0x42d4	; 0x42d4 <_ZN5Print11printNumberEmh>

0000444e <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    444e:	0f 93       	push	r16
    4450:	1f 93       	push	r17
    4452:	cf 93       	push	r28
    4454:	df 93       	push	r29
    4456:	ec 01       	movw	r28, r24
    4458:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    445a:	46 2f       	mov	r20, r22
    445c:	50 e0       	ldi	r21, 0x00	; 0
    445e:	60 e0       	ldi	r22, 0x00	; 0
    4460:	70 e0       	ldi	r23, 0x00	; 0
    4462:	0e 94 1a 22 	call	0x4434	; 0x4434 <_ZN5Print5printEmi>
    4466:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    4468:	ce 01       	movw	r24, r28
    446a:	0e 94 54 21 	call	0x42a8	; 0x42a8 <_ZN5Print7printlnEv>
  return n;
}
    446e:	80 0f       	add	r24, r16
    4470:	91 1f       	adc	r25, r17
    4472:	df 91       	pop	r29
    4474:	cf 91       	pop	r28
    4476:	1f 91       	pop	r17
    4478:	0f 91       	pop	r16
    447a:	08 95       	ret

0000447c <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    447c:	0f 93       	push	r16
    447e:	1f 93       	push	r17
    4480:	cf 93       	push	r28
    4482:	df 93       	push	r29
    4484:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    4486:	0e 94 1a 22 	call	0x4434	; 0x4434 <_ZN5Print5printEmi>
    448a:	8c 01       	movw	r16, r24
  n += println();
    448c:	ce 01       	movw	r24, r28
    448e:	0e 94 54 21 	call	0x42a8	; 0x42a8 <_ZN5Print7printlnEv>
  return n;
}
    4492:	80 0f       	add	r24, r16
    4494:	91 1f       	adc	r25, r17
    4496:	df 91       	pop	r29
    4498:	cf 91       	pop	r28
    449a:	1f 91       	pop	r17
    449c:	0f 91       	pop	r16
    449e:	08 95       	ret

000044a0 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    44a0:	1f 92       	push	r1
    44a2:	0f 92       	push	r0
    44a4:	0f b6       	in	r0, 0x3f	; 63
    44a6:	0f 92       	push	r0
    44a8:	11 24       	eor	r1, r1
    44aa:	2f 93       	push	r18
    44ac:	3f 93       	push	r19
    44ae:	8f 93       	push	r24
    44b0:	9f 93       	push	r25
    44b2:	af 93       	push	r26
    44b4:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    44b6:	80 91 ef 06 	lds	r24, 0x06EF
    44ba:	90 91 f0 06 	lds	r25, 0x06F0
    44be:	a0 91 f1 06 	lds	r26, 0x06F1
    44c2:	b0 91 f2 06 	lds	r27, 0x06F2
	unsigned char f = timer0_fract;
    44c6:	30 91 ee 06 	lds	r19, 0x06EE

	m += MILLIS_INC;
	f += FRACT_INC;
    44ca:	23 e0       	ldi	r18, 0x03	; 3
    44cc:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    44ce:	2d 37       	cpi	r18, 0x7D	; 125
    44d0:	20 f4       	brcc	.+8      	; 0x44da <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    44d2:	01 96       	adiw	r24, 0x01	; 1
    44d4:	a1 1d       	adc	r26, r1
    44d6:	b1 1d       	adc	r27, r1
    44d8:	05 c0       	rjmp	.+10     	; 0x44e4 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    44da:	26 e8       	ldi	r18, 0x86	; 134
    44dc:	23 0f       	add	r18, r19
		m += 1;
    44de:	02 96       	adiw	r24, 0x02	; 2
    44e0:	a1 1d       	adc	r26, r1
    44e2:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    44e4:	20 93 ee 06 	sts	0x06EE, r18
	timer0_millis = m;
    44e8:	80 93 ef 06 	sts	0x06EF, r24
    44ec:	90 93 f0 06 	sts	0x06F0, r25
    44f0:	a0 93 f1 06 	sts	0x06F1, r26
    44f4:	b0 93 f2 06 	sts	0x06F2, r27
	timer0_overflow_count++;
    44f8:	80 91 f3 06 	lds	r24, 0x06F3
    44fc:	90 91 f4 06 	lds	r25, 0x06F4
    4500:	a0 91 f5 06 	lds	r26, 0x06F5
    4504:	b0 91 f6 06 	lds	r27, 0x06F6
    4508:	01 96       	adiw	r24, 0x01	; 1
    450a:	a1 1d       	adc	r26, r1
    450c:	b1 1d       	adc	r27, r1
    450e:	80 93 f3 06 	sts	0x06F3, r24
    4512:	90 93 f4 06 	sts	0x06F4, r25
    4516:	a0 93 f5 06 	sts	0x06F5, r26
    451a:	b0 93 f6 06 	sts	0x06F6, r27
}
    451e:	bf 91       	pop	r27
    4520:	af 91       	pop	r26
    4522:	9f 91       	pop	r25
    4524:	8f 91       	pop	r24
    4526:	3f 91       	pop	r19
    4528:	2f 91       	pop	r18
    452a:	0f 90       	pop	r0
    452c:	0f be       	out	0x3f, r0	; 63
    452e:	0f 90       	pop	r0
    4530:	1f 90       	pop	r1
    4532:	18 95       	reti

00004534 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    4534:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    4536:	f8 94       	cli
	m = timer0_millis;
    4538:	60 91 ef 06 	lds	r22, 0x06EF
    453c:	70 91 f0 06 	lds	r23, 0x06F0
    4540:	80 91 f1 06 	lds	r24, 0x06F1
    4544:	90 91 f2 06 	lds	r25, 0x06F2
	SREG = oldSREG;
    4548:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    454a:	08 95       	ret

0000454c <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    454c:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    454e:	f8 94       	cli
	m = timer0_overflow_count;
    4550:	80 91 f3 06 	lds	r24, 0x06F3
    4554:	90 91 f4 06 	lds	r25, 0x06F4
    4558:	a0 91 f5 06 	lds	r26, 0x06F5
    455c:	b0 91 f6 06 	lds	r27, 0x06F6
#if defined(TCNT0)
	t = TCNT0;
    4560:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    4562:	a8 9b       	sbis	0x15, 0	; 21
    4564:	05 c0       	rjmp	.+10     	; 0x4570 <micros+0x24>
    4566:	2f 3f       	cpi	r18, 0xFF	; 255
    4568:	19 f0       	breq	.+6      	; 0x4570 <micros+0x24>
		m++;
    456a:	01 96       	adiw	r24, 0x01	; 1
    456c:	a1 1d       	adc	r26, r1
    456e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    4570:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    4572:	ba 2f       	mov	r27, r26
    4574:	a9 2f       	mov	r26, r25
    4576:	98 2f       	mov	r25, r24
    4578:	88 27       	eor	r24, r24
    457a:	82 0f       	add	r24, r18
    457c:	91 1d       	adc	r25, r1
    457e:	a1 1d       	adc	r26, r1
    4580:	b1 1d       	adc	r27, r1
    4582:	bc 01       	movw	r22, r24
    4584:	cd 01       	movw	r24, r26
    4586:	42 e0       	ldi	r20, 0x02	; 2
    4588:	66 0f       	add	r22, r22
    458a:	77 1f       	adc	r23, r23
    458c:	88 1f       	adc	r24, r24
    458e:	99 1f       	adc	r25, r25
    4590:	4a 95       	dec	r20
    4592:	d1 f7       	brne	.-12     	; 0x4588 <micros+0x3c>
}
    4594:	08 95       	ret

00004596 <delay>:

void delay(unsigned long ms)
{
    4596:	8f 92       	push	r8
    4598:	9f 92       	push	r9
    459a:	af 92       	push	r10
    459c:	bf 92       	push	r11
    459e:	cf 92       	push	r12
    45a0:	df 92       	push	r13
    45a2:	ef 92       	push	r14
    45a4:	ff 92       	push	r15
    45a6:	6b 01       	movw	r12, r22
    45a8:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    45aa:	0e 94 a6 22 	call	0x454c	; 0x454c <micros>
    45ae:	4b 01       	movw	r8, r22
    45b0:	5c 01       	movw	r10, r24

	while (ms > 0) {
    45b2:	c1 14       	cp	r12, r1
    45b4:	d1 04       	cpc	r13, r1
    45b6:	e1 04       	cpc	r14, r1
    45b8:	f1 04       	cpc	r15, r1
    45ba:	01 f1       	breq	.+64     	; 0x45fc <delay+0x66>
		yield();
    45bc:	0e 94 0b 24 	call	0x4816	; 0x4816 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    45c0:	0e 94 a6 22 	call	0x454c	; 0x454c <micros>
    45c4:	dc 01       	movw	r26, r24
    45c6:	cb 01       	movw	r24, r22
    45c8:	88 19       	sub	r24, r8
    45ca:	99 09       	sbc	r25, r9
    45cc:	aa 09       	sbc	r26, r10
    45ce:	bb 09       	sbc	r27, r11
    45d0:	88 3e       	cpi	r24, 0xE8	; 232
    45d2:	93 40       	sbci	r25, 0x03	; 3
    45d4:	a1 05       	cpc	r26, r1
    45d6:	b1 05       	cpc	r27, r1
    45d8:	60 f3       	brcs	.-40     	; 0x45b2 <delay+0x1c>
			ms--;
    45da:	21 e0       	ldi	r18, 0x01	; 1
    45dc:	c2 1a       	sub	r12, r18
    45de:	d1 08       	sbc	r13, r1
    45e0:	e1 08       	sbc	r14, r1
    45e2:	f1 08       	sbc	r15, r1
			start += 1000;
    45e4:	88 ee       	ldi	r24, 0xE8	; 232
    45e6:	88 0e       	add	r8, r24
    45e8:	83 e0       	ldi	r24, 0x03	; 3
    45ea:	98 1e       	adc	r9, r24
    45ec:	a1 1c       	adc	r10, r1
    45ee:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    45f0:	c1 14       	cp	r12, r1
    45f2:	d1 04       	cpc	r13, r1
    45f4:	e1 04       	cpc	r14, r1
    45f6:	f1 04       	cpc	r15, r1
    45f8:	19 f7       	brne	.-58     	; 0x45c0 <delay+0x2a>
    45fa:	db cf       	rjmp	.-74     	; 0x45b2 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    45fc:	ff 90       	pop	r15
    45fe:	ef 90       	pop	r14
    4600:	df 90       	pop	r13
    4602:	cf 90       	pop	r12
    4604:	bf 90       	pop	r11
    4606:	af 90       	pop	r10
    4608:	9f 90       	pop	r9
    460a:	8f 90       	pop	r8
    460c:	08 95       	ret

0000460e <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    460e:	82 30       	cpi	r24, 0x02	; 2
    4610:	91 05       	cpc	r25, r1
    4612:	38 f0       	brcs	.+14     	; 0x4622 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    4614:	88 0f       	add	r24, r24
    4616:	99 1f       	adc	r25, r25
    4618:	88 0f       	add	r24, r24
    461a:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    461c:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    461e:	01 97       	sbiw	r24, 0x01	; 1
    4620:	f1 f7       	brne	.-4      	; 0x461e <delayMicroseconds+0x10>
    4622:	08 95       	ret

00004624 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    4624:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    4626:	84 b5       	in	r24, 0x24	; 36
    4628:	82 60       	ori	r24, 0x02	; 2
    462a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    462c:	84 b5       	in	r24, 0x24	; 36
    462e:	81 60       	ori	r24, 0x01	; 1
    4630:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    4632:	85 b5       	in	r24, 0x25	; 37
    4634:	82 60       	ori	r24, 0x02	; 2
    4636:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    4638:	85 b5       	in	r24, 0x25	; 37
    463a:	81 60       	ori	r24, 0x01	; 1
    463c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    463e:	ee e6       	ldi	r30, 0x6E	; 110
    4640:	f0 e0       	ldi	r31, 0x00	; 0
    4642:	80 81       	ld	r24, Z
    4644:	81 60       	ori	r24, 0x01	; 1
    4646:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    4648:	e1 e8       	ldi	r30, 0x81	; 129
    464a:	f0 e0       	ldi	r31, 0x00	; 0
    464c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    464e:	80 81       	ld	r24, Z
    4650:	82 60       	ori	r24, 0x02	; 2
    4652:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    4654:	80 81       	ld	r24, Z
    4656:	81 60       	ori	r24, 0x01	; 1
    4658:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    465a:	e0 e8       	ldi	r30, 0x80	; 128
    465c:	f0 e0       	ldi	r31, 0x00	; 0
    465e:	80 81       	ld	r24, Z
    4660:	81 60       	ori	r24, 0x01	; 1
    4662:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    4664:	e1 eb       	ldi	r30, 0xB1	; 177
    4666:	f0 e0       	ldi	r31, 0x00	; 0
    4668:	80 81       	ld	r24, Z
    466a:	84 60       	ori	r24, 0x04	; 4
    466c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    466e:	e0 eb       	ldi	r30, 0xB0	; 176
    4670:	f0 e0       	ldi	r31, 0x00	; 0
    4672:	80 81       	ld	r24, Z
    4674:	81 60       	ori	r24, 0x01	; 1
    4676:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    4678:	ea e7       	ldi	r30, 0x7A	; 122
    467a:	f0 e0       	ldi	r31, 0x00	; 0
    467c:	80 81       	ld	r24, Z
    467e:	84 60       	ori	r24, 0x04	; 4
    4680:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    4682:	80 81       	ld	r24, Z
    4684:	82 60       	ori	r24, 0x02	; 2
    4686:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    4688:	80 81       	ld	r24, Z
    468a:	81 60       	ori	r24, 0x01	; 1
    468c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    468e:	80 81       	ld	r24, Z
    4690:	80 68       	ori	r24, 0x80	; 128
    4692:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    4694:	10 92 c1 00 	sts	0x00C1, r1
    4698:	08 95       	ret

0000469a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    469a:	83 30       	cpi	r24, 0x03	; 3
    469c:	81 f0       	breq	.+32     	; 0x46be <turnOffPWM+0x24>
    469e:	28 f4       	brcc	.+10     	; 0x46aa <turnOffPWM+0x10>
    46a0:	81 30       	cpi	r24, 0x01	; 1
    46a2:	99 f0       	breq	.+38     	; 0x46ca <turnOffPWM+0x30>
    46a4:	82 30       	cpi	r24, 0x02	; 2
    46a6:	a1 f0       	breq	.+40     	; 0x46d0 <turnOffPWM+0x36>
    46a8:	08 95       	ret
    46aa:	87 30       	cpi	r24, 0x07	; 7
    46ac:	a9 f0       	breq	.+42     	; 0x46d8 <turnOffPWM+0x3e>
    46ae:	88 30       	cpi	r24, 0x08	; 8
    46b0:	b9 f0       	breq	.+46     	; 0x46e0 <turnOffPWM+0x46>
    46b2:	84 30       	cpi	r24, 0x04	; 4
    46b4:	d1 f4       	brne	.+52     	; 0x46ea <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    46b6:	80 91 80 00 	lds	r24, 0x0080
    46ba:	8f 7d       	andi	r24, 0xDF	; 223
    46bc:	03 c0       	rjmp	.+6      	; 0x46c4 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    46be:	80 91 80 00 	lds	r24, 0x0080
    46c2:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    46c4:	80 93 80 00 	sts	0x0080, r24
    46c8:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    46ca:	84 b5       	in	r24, 0x24	; 36
    46cc:	8f 77       	andi	r24, 0x7F	; 127
    46ce:	02 c0       	rjmp	.+4      	; 0x46d4 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    46d0:	84 b5       	in	r24, 0x24	; 36
    46d2:	8f 7d       	andi	r24, 0xDF	; 223
    46d4:	84 bd       	out	0x24, r24	; 36
    46d6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    46d8:	80 91 b0 00 	lds	r24, 0x00B0
    46dc:	8f 77       	andi	r24, 0x7F	; 127
    46de:	03 c0       	rjmp	.+6      	; 0x46e6 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    46e0:	80 91 b0 00 	lds	r24, 0x00B0
    46e4:	8f 7d       	andi	r24, 0xDF	; 223
    46e6:	80 93 b0 00 	sts	0x00B0, r24
    46ea:	08 95       	ret

000046ec <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    46ec:	cf 93       	push	r28
    46ee:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    46f0:	90 e0       	ldi	r25, 0x00	; 0
    46f2:	fc 01       	movw	r30, r24
    46f4:	e4 57       	subi	r30, 0x74	; 116
    46f6:	ff 4f       	sbci	r31, 0xFF	; 255
    46f8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    46fa:	fc 01       	movw	r30, r24
    46fc:	e0 56       	subi	r30, 0x60	; 96
    46fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4700:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    4702:	88 23       	and	r24, r24
    4704:	61 f1       	breq	.+88     	; 0x475e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    4706:	90 e0       	ldi	r25, 0x00	; 0
    4708:	88 0f       	add	r24, r24
    470a:	99 1f       	adc	r25, r25
    470c:	fc 01       	movw	r30, r24
    470e:	e8 53       	subi	r30, 0x38	; 56
    4710:	ff 4f       	sbci	r31, 0xFF	; 255
    4712:	c5 91       	lpm	r28, Z+
    4714:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    4716:	fc 01       	movw	r30, r24
    4718:	e2 54       	subi	r30, 0x42	; 66
    471a:	ff 4f       	sbci	r31, 0xFF	; 255
    471c:	a5 91       	lpm	r26, Z+
    471e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    4720:	61 11       	cpse	r22, r1
    4722:	09 c0       	rjmp	.+18     	; 0x4736 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    4724:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4726:	f8 94       	cli
		*reg &= ~bit;
    4728:	88 81       	ld	r24, Y
    472a:	20 95       	com	r18
    472c:	82 23       	and	r24, r18
    472e:	88 83       	st	Y, r24
		*out &= ~bit;
    4730:	ec 91       	ld	r30, X
    4732:	2e 23       	and	r18, r30
    4734:	0b c0       	rjmp	.+22     	; 0x474c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    4736:	62 30       	cpi	r22, 0x02	; 2
    4738:	61 f4       	brne	.+24     	; 0x4752 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    473a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    473c:	f8 94       	cli
		*reg &= ~bit;
    473e:	38 81       	ld	r19, Y
    4740:	82 2f       	mov	r24, r18
    4742:	80 95       	com	r24
    4744:	83 23       	and	r24, r19
    4746:	88 83       	st	Y, r24
		*out |= bit;
    4748:	ec 91       	ld	r30, X
    474a:	2e 2b       	or	r18, r30
    474c:	2c 93       	st	X, r18
		SREG = oldSREG;
    474e:	9f bf       	out	0x3f, r25	; 63
    4750:	06 c0       	rjmp	.+12     	; 0x475e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    4752:	8f b7       	in	r24, 0x3f	; 63
                cli();
    4754:	f8 94       	cli
		*reg |= bit;
    4756:	e8 81       	ld	r30, Y
    4758:	2e 2b       	or	r18, r30
    475a:	28 83       	st	Y, r18
		SREG = oldSREG;
    475c:	8f bf       	out	0x3f, r24	; 63
	}
}
    475e:	df 91       	pop	r29
    4760:	cf 91       	pop	r28
    4762:	08 95       	ret

00004764 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    4764:	1f 93       	push	r17
    4766:	cf 93       	push	r28
    4768:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    476a:	28 2f       	mov	r18, r24
    476c:	30 e0       	ldi	r19, 0x00	; 0
    476e:	f9 01       	movw	r30, r18
    4770:	e8 58       	subi	r30, 0x88	; 136
    4772:	ff 4f       	sbci	r31, 0xFF	; 255
    4774:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    4776:	f9 01       	movw	r30, r18
    4778:	e4 57       	subi	r30, 0x74	; 116
    477a:	ff 4f       	sbci	r31, 0xFF	; 255
    477c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    477e:	f9 01       	movw	r30, r18
    4780:	e0 56       	subi	r30, 0x60	; 96
    4782:	ff 4f       	sbci	r31, 0xFF	; 255
    4784:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    4786:	cc 23       	and	r28, r28
    4788:	c9 f0       	breq	.+50     	; 0x47bc <digitalWrite+0x58>
    478a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    478c:	81 11       	cpse	r24, r1
    478e:	0e 94 4d 23 	call	0x469a	; 0x469a <turnOffPWM>

	out = portOutputRegister(port);
    4792:	ec 2f       	mov	r30, r28
    4794:	f0 e0       	ldi	r31, 0x00	; 0
    4796:	ee 0f       	add	r30, r30
    4798:	ff 1f       	adc	r31, r31
    479a:	e2 54       	subi	r30, 0x42	; 66
    479c:	ff 4f       	sbci	r31, 0xFF	; 255
    479e:	a5 91       	lpm	r26, Z+
    47a0:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    47a2:	8f b7       	in	r24, 0x3f	; 63
	cli();
    47a4:	f8 94       	cli

	if (val == LOW) {
    47a6:	11 11       	cpse	r17, r1
    47a8:	05 c0       	rjmp	.+10     	; 0x47b4 <digitalWrite+0x50>
		*out &= ~bit;
    47aa:	9c 91       	ld	r25, X
    47ac:	ed 2f       	mov	r30, r29
    47ae:	e0 95       	com	r30
    47b0:	e9 23       	and	r30, r25
    47b2:	02 c0       	rjmp	.+4      	; 0x47b8 <digitalWrite+0x54>
	} else {
		*out |= bit;
    47b4:	ec 91       	ld	r30, X
    47b6:	ed 2b       	or	r30, r29
    47b8:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    47ba:	8f bf       	out	0x3f, r24	; 63
}
    47bc:	df 91       	pop	r29
    47be:	cf 91       	pop	r28
    47c0:	1f 91       	pop	r17
    47c2:	08 95       	ret

000047c4 <digitalRead>:

int digitalRead(uint8_t pin)
{
    47c4:	cf 93       	push	r28
    47c6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    47c8:	28 2f       	mov	r18, r24
    47ca:	30 e0       	ldi	r19, 0x00	; 0
    47cc:	f9 01       	movw	r30, r18
    47ce:	e8 58       	subi	r30, 0x88	; 136
    47d0:	ff 4f       	sbci	r31, 0xFF	; 255
    47d2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    47d4:	f9 01       	movw	r30, r18
    47d6:	e4 57       	subi	r30, 0x74	; 116
    47d8:	ff 4f       	sbci	r31, 0xFF	; 255
    47da:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    47dc:	f9 01       	movw	r30, r18
    47de:	e0 56       	subi	r30, 0x60	; 96
    47e0:	ff 4f       	sbci	r31, 0xFF	; 255
    47e2:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    47e4:	cc 23       	and	r28, r28
    47e6:	91 f0       	breq	.+36     	; 0x480c <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    47e8:	81 11       	cpse	r24, r1
    47ea:	0e 94 4d 23 	call	0x469a	; 0x469a <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    47ee:	ec 2f       	mov	r30, r28
    47f0:	f0 e0       	ldi	r31, 0x00	; 0
    47f2:	ee 0f       	add	r30, r30
    47f4:	ff 1f       	adc	r31, r31
    47f6:	ec 54       	subi	r30, 0x4C	; 76
    47f8:	ff 4f       	sbci	r31, 0xFF	; 255
    47fa:	a5 91       	lpm	r26, Z+
    47fc:	b4 91       	lpm	r27, Z
    47fe:	ec 91       	ld	r30, X
    4800:	ed 23       	and	r30, r29
    4802:	81 e0       	ldi	r24, 0x01	; 1
    4804:	90 e0       	ldi	r25, 0x00	; 0
    4806:	21 f4       	brne	.+8      	; 0x4810 <digitalRead+0x4c>
    4808:	80 e0       	ldi	r24, 0x00	; 0
    480a:	02 c0       	rjmp	.+4      	; 0x4810 <digitalRead+0x4c>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    480c:	80 e0       	ldi	r24, 0x00	; 0
    480e:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    4810:	df 91       	pop	r29
    4812:	cf 91       	pop	r28
    4814:	08 95       	ret

00004816 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    4816:	08 95       	ret

00004818 <__udivmodsi4>:
    4818:	a1 e2       	ldi	r26, 0x21	; 33
    481a:	1a 2e       	mov	r1, r26
    481c:	aa 1b       	sub	r26, r26
    481e:	bb 1b       	sub	r27, r27
    4820:	fd 01       	movw	r30, r26
    4822:	0d c0       	rjmp	.+26     	; 0x483e <__udivmodsi4_ep>

00004824 <__udivmodsi4_loop>:
    4824:	aa 1f       	adc	r26, r26
    4826:	bb 1f       	adc	r27, r27
    4828:	ee 1f       	adc	r30, r30
    482a:	ff 1f       	adc	r31, r31
    482c:	a2 17       	cp	r26, r18
    482e:	b3 07       	cpc	r27, r19
    4830:	e4 07       	cpc	r30, r20
    4832:	f5 07       	cpc	r31, r21
    4834:	20 f0       	brcs	.+8      	; 0x483e <__udivmodsi4_ep>
    4836:	a2 1b       	sub	r26, r18
    4838:	b3 0b       	sbc	r27, r19
    483a:	e4 0b       	sbc	r30, r20
    483c:	f5 0b       	sbc	r31, r21

0000483e <__udivmodsi4_ep>:
    483e:	66 1f       	adc	r22, r22
    4840:	77 1f       	adc	r23, r23
    4842:	88 1f       	adc	r24, r24
    4844:	99 1f       	adc	r25, r25
    4846:	1a 94       	dec	r1
    4848:	69 f7       	brne	.-38     	; 0x4824 <__udivmodsi4_loop>
    484a:	60 95       	com	r22
    484c:	70 95       	com	r23
    484e:	80 95       	com	r24
    4850:	90 95       	com	r25
    4852:	9b 01       	movw	r18, r22
    4854:	ac 01       	movw	r20, r24
    4856:	bd 01       	movw	r22, r26
    4858:	cf 01       	movw	r24, r30
    485a:	08 95       	ret

0000485c <__muluhisi3>:
    485c:	0e 94 3f 24 	call	0x487e	; 0x487e <__umulhisi3>
    4860:	a5 9f       	mul	r26, r21
    4862:	90 0d       	add	r25, r0
    4864:	b4 9f       	mul	r27, r20
    4866:	90 0d       	add	r25, r0
    4868:	a4 9f       	mul	r26, r20
    486a:	80 0d       	add	r24, r0
    486c:	91 1d       	adc	r25, r1
    486e:	11 24       	eor	r1, r1
    4870:	08 95       	ret

00004872 <__tablejump2__>:
    4872:	ee 0f       	add	r30, r30
    4874:	ff 1f       	adc	r31, r31
    4876:	05 90       	lpm	r0, Z+
    4878:	f4 91       	lpm	r31, Z
    487a:	e0 2d       	mov	r30, r0
    487c:	09 94       	ijmp

0000487e <__umulhisi3>:
    487e:	a2 9f       	mul	r26, r18
    4880:	b0 01       	movw	r22, r0
    4882:	b3 9f       	mul	r27, r19
    4884:	c0 01       	movw	r24, r0
    4886:	a3 9f       	mul	r26, r19
    4888:	70 0d       	add	r23, r0
    488a:	81 1d       	adc	r24, r1
    488c:	11 24       	eor	r1, r1
    488e:	91 1d       	adc	r25, r1
    4890:	b2 9f       	mul	r27, r18
    4892:	70 0d       	add	r23, r0
    4894:	81 1d       	adc	r24, r1
    4896:	11 24       	eor	r1, r1
    4898:	91 1d       	adc	r25, r1
    489a:	08 95       	ret

0000489c <malloc>:
    489c:	cf 93       	push	r28
    489e:	df 93       	push	r29
    48a0:	82 30       	cpi	r24, 0x02	; 2
    48a2:	91 05       	cpc	r25, r1
    48a4:	10 f4       	brcc	.+4      	; 0x48aa <malloc+0xe>
    48a6:	82 e0       	ldi	r24, 0x02	; 2
    48a8:	90 e0       	ldi	r25, 0x00	; 0
    48aa:	e0 91 f9 06 	lds	r30, 0x06F9
    48ae:	f0 91 fa 06 	lds	r31, 0x06FA
    48b2:	20 e0       	ldi	r18, 0x00	; 0
    48b4:	30 e0       	ldi	r19, 0x00	; 0
    48b6:	c0 e0       	ldi	r28, 0x00	; 0
    48b8:	d0 e0       	ldi	r29, 0x00	; 0
    48ba:	30 97       	sbiw	r30, 0x00	; 0
    48bc:	11 f1       	breq	.+68     	; 0x4902 <malloc+0x66>
    48be:	40 81       	ld	r20, Z
    48c0:	51 81       	ldd	r21, Z+1	; 0x01
    48c2:	48 17       	cp	r20, r24
    48c4:	59 07       	cpc	r21, r25
    48c6:	c0 f0       	brcs	.+48     	; 0x48f8 <malloc+0x5c>
    48c8:	48 17       	cp	r20, r24
    48ca:	59 07       	cpc	r21, r25
    48cc:	61 f4       	brne	.+24     	; 0x48e6 <malloc+0x4a>
    48ce:	82 81       	ldd	r24, Z+2	; 0x02
    48d0:	93 81       	ldd	r25, Z+3	; 0x03
    48d2:	20 97       	sbiw	r28, 0x00	; 0
    48d4:	19 f0       	breq	.+6      	; 0x48dc <malloc+0x40>
    48d6:	9b 83       	std	Y+3, r25	; 0x03
    48d8:	8a 83       	std	Y+2, r24	; 0x02
    48da:	2b c0       	rjmp	.+86     	; 0x4932 <malloc+0x96>
    48dc:	90 93 fa 06 	sts	0x06FA, r25
    48e0:	80 93 f9 06 	sts	0x06F9, r24
    48e4:	26 c0       	rjmp	.+76     	; 0x4932 <malloc+0x96>
    48e6:	21 15       	cp	r18, r1
    48e8:	31 05       	cpc	r19, r1
    48ea:	19 f0       	breq	.+6      	; 0x48f2 <malloc+0x56>
    48ec:	42 17       	cp	r20, r18
    48ee:	53 07       	cpc	r21, r19
    48f0:	18 f4       	brcc	.+6      	; 0x48f8 <malloc+0x5c>
    48f2:	9a 01       	movw	r18, r20
    48f4:	be 01       	movw	r22, r28
    48f6:	df 01       	movw	r26, r30
    48f8:	ef 01       	movw	r28, r30
    48fa:	02 80       	ldd	r0, Z+2	; 0x02
    48fc:	f3 81       	ldd	r31, Z+3	; 0x03
    48fe:	e0 2d       	mov	r30, r0
    4900:	dc cf       	rjmp	.-72     	; 0x48ba <malloc+0x1e>
    4902:	21 15       	cp	r18, r1
    4904:	31 05       	cpc	r19, r1
    4906:	09 f1       	breq	.+66     	; 0x494a <malloc+0xae>
    4908:	28 1b       	sub	r18, r24
    490a:	39 0b       	sbc	r19, r25
    490c:	24 30       	cpi	r18, 0x04	; 4
    490e:	31 05       	cpc	r19, r1
    4910:	90 f4       	brcc	.+36     	; 0x4936 <malloc+0x9a>
    4912:	12 96       	adiw	r26, 0x02	; 2
    4914:	8d 91       	ld	r24, X+
    4916:	9c 91       	ld	r25, X
    4918:	13 97       	sbiw	r26, 0x03	; 3
    491a:	61 15       	cp	r22, r1
    491c:	71 05       	cpc	r23, r1
    491e:	21 f0       	breq	.+8      	; 0x4928 <malloc+0x8c>
    4920:	fb 01       	movw	r30, r22
    4922:	93 83       	std	Z+3, r25	; 0x03
    4924:	82 83       	std	Z+2, r24	; 0x02
    4926:	04 c0       	rjmp	.+8      	; 0x4930 <malloc+0x94>
    4928:	90 93 fa 06 	sts	0x06FA, r25
    492c:	80 93 f9 06 	sts	0x06F9, r24
    4930:	fd 01       	movw	r30, r26
    4932:	32 96       	adiw	r30, 0x02	; 2
    4934:	44 c0       	rjmp	.+136    	; 0x49be <malloc+0x122>
    4936:	fd 01       	movw	r30, r26
    4938:	e2 0f       	add	r30, r18
    493a:	f3 1f       	adc	r31, r19
    493c:	81 93       	st	Z+, r24
    493e:	91 93       	st	Z+, r25
    4940:	22 50       	subi	r18, 0x02	; 2
    4942:	31 09       	sbc	r19, r1
    4944:	2d 93       	st	X+, r18
    4946:	3c 93       	st	X, r19
    4948:	3a c0       	rjmp	.+116    	; 0x49be <malloc+0x122>
    494a:	20 91 f7 06 	lds	r18, 0x06F7
    494e:	30 91 f8 06 	lds	r19, 0x06F8
    4952:	23 2b       	or	r18, r19
    4954:	41 f4       	brne	.+16     	; 0x4966 <malloc+0xca>
    4956:	20 91 02 01 	lds	r18, 0x0102
    495a:	30 91 03 01 	lds	r19, 0x0103
    495e:	30 93 f8 06 	sts	0x06F8, r19
    4962:	20 93 f7 06 	sts	0x06F7, r18
    4966:	20 91 00 01 	lds	r18, 0x0100
    496a:	30 91 01 01 	lds	r19, 0x0101
    496e:	21 15       	cp	r18, r1
    4970:	31 05       	cpc	r19, r1
    4972:	41 f4       	brne	.+16     	; 0x4984 <malloc+0xe8>
    4974:	2d b7       	in	r18, 0x3d	; 61
    4976:	3e b7       	in	r19, 0x3e	; 62
    4978:	40 91 04 01 	lds	r20, 0x0104
    497c:	50 91 05 01 	lds	r21, 0x0105
    4980:	24 1b       	sub	r18, r20
    4982:	35 0b       	sbc	r19, r21
    4984:	e0 91 f7 06 	lds	r30, 0x06F7
    4988:	f0 91 f8 06 	lds	r31, 0x06F8
    498c:	e2 17       	cp	r30, r18
    498e:	f3 07       	cpc	r31, r19
    4990:	a0 f4       	brcc	.+40     	; 0x49ba <malloc+0x11e>
    4992:	2e 1b       	sub	r18, r30
    4994:	3f 0b       	sbc	r19, r31
    4996:	28 17       	cp	r18, r24
    4998:	39 07       	cpc	r19, r25
    499a:	78 f0       	brcs	.+30     	; 0x49ba <malloc+0x11e>
    499c:	ac 01       	movw	r20, r24
    499e:	4e 5f       	subi	r20, 0xFE	; 254
    49a0:	5f 4f       	sbci	r21, 0xFF	; 255
    49a2:	24 17       	cp	r18, r20
    49a4:	35 07       	cpc	r19, r21
    49a6:	48 f0       	brcs	.+18     	; 0x49ba <malloc+0x11e>
    49a8:	4e 0f       	add	r20, r30
    49aa:	5f 1f       	adc	r21, r31
    49ac:	50 93 f8 06 	sts	0x06F8, r21
    49b0:	40 93 f7 06 	sts	0x06F7, r20
    49b4:	81 93       	st	Z+, r24
    49b6:	91 93       	st	Z+, r25
    49b8:	02 c0       	rjmp	.+4      	; 0x49be <malloc+0x122>
    49ba:	e0 e0       	ldi	r30, 0x00	; 0
    49bc:	f0 e0       	ldi	r31, 0x00	; 0
    49be:	cf 01       	movw	r24, r30
    49c0:	df 91       	pop	r29
    49c2:	cf 91       	pop	r28
    49c4:	08 95       	ret

000049c6 <free>:
    49c6:	0f 93       	push	r16
    49c8:	1f 93       	push	r17
    49ca:	cf 93       	push	r28
    49cc:	df 93       	push	r29
    49ce:	00 97       	sbiw	r24, 0x00	; 0
    49d0:	09 f4       	brne	.+2      	; 0x49d4 <free+0xe>
    49d2:	8c c0       	rjmp	.+280    	; 0x4aec <free+0x126>
    49d4:	fc 01       	movw	r30, r24
    49d6:	32 97       	sbiw	r30, 0x02	; 2
    49d8:	13 82       	std	Z+3, r1	; 0x03
    49da:	12 82       	std	Z+2, r1	; 0x02
    49dc:	00 91 f9 06 	lds	r16, 0x06F9
    49e0:	10 91 fa 06 	lds	r17, 0x06FA
    49e4:	01 15       	cp	r16, r1
    49e6:	11 05       	cpc	r17, r1
    49e8:	81 f4       	brne	.+32     	; 0x4a0a <free+0x44>
    49ea:	20 81       	ld	r18, Z
    49ec:	31 81       	ldd	r19, Z+1	; 0x01
    49ee:	82 0f       	add	r24, r18
    49f0:	93 1f       	adc	r25, r19
    49f2:	20 91 f7 06 	lds	r18, 0x06F7
    49f6:	30 91 f8 06 	lds	r19, 0x06F8
    49fa:	28 17       	cp	r18, r24
    49fc:	39 07       	cpc	r19, r25
    49fe:	79 f5       	brne	.+94     	; 0x4a5e <free+0x98>
    4a00:	f0 93 f8 06 	sts	0x06F8, r31
    4a04:	e0 93 f7 06 	sts	0x06F7, r30
    4a08:	71 c0       	rjmp	.+226    	; 0x4aec <free+0x126>
    4a0a:	d8 01       	movw	r26, r16
    4a0c:	40 e0       	ldi	r20, 0x00	; 0
    4a0e:	50 e0       	ldi	r21, 0x00	; 0
    4a10:	ae 17       	cp	r26, r30
    4a12:	bf 07       	cpc	r27, r31
    4a14:	50 f4       	brcc	.+20     	; 0x4a2a <free+0x64>
    4a16:	12 96       	adiw	r26, 0x02	; 2
    4a18:	2d 91       	ld	r18, X+
    4a1a:	3c 91       	ld	r19, X
    4a1c:	13 97       	sbiw	r26, 0x03	; 3
    4a1e:	ad 01       	movw	r20, r26
    4a20:	21 15       	cp	r18, r1
    4a22:	31 05       	cpc	r19, r1
    4a24:	09 f1       	breq	.+66     	; 0x4a68 <free+0xa2>
    4a26:	d9 01       	movw	r26, r18
    4a28:	f3 cf       	rjmp	.-26     	; 0x4a10 <free+0x4a>
    4a2a:	9d 01       	movw	r18, r26
    4a2c:	da 01       	movw	r26, r20
    4a2e:	33 83       	std	Z+3, r19	; 0x03
    4a30:	22 83       	std	Z+2, r18	; 0x02
    4a32:	60 81       	ld	r22, Z
    4a34:	71 81       	ldd	r23, Z+1	; 0x01
    4a36:	86 0f       	add	r24, r22
    4a38:	97 1f       	adc	r25, r23
    4a3a:	82 17       	cp	r24, r18
    4a3c:	93 07       	cpc	r25, r19
    4a3e:	69 f4       	brne	.+26     	; 0x4a5a <free+0x94>
    4a40:	ec 01       	movw	r28, r24
    4a42:	28 81       	ld	r18, Y
    4a44:	39 81       	ldd	r19, Y+1	; 0x01
    4a46:	26 0f       	add	r18, r22
    4a48:	37 1f       	adc	r19, r23
    4a4a:	2e 5f       	subi	r18, 0xFE	; 254
    4a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a4e:	31 83       	std	Z+1, r19	; 0x01
    4a50:	20 83       	st	Z, r18
    4a52:	8a 81       	ldd	r24, Y+2	; 0x02
    4a54:	9b 81       	ldd	r25, Y+3	; 0x03
    4a56:	93 83       	std	Z+3, r25	; 0x03
    4a58:	82 83       	std	Z+2, r24	; 0x02
    4a5a:	45 2b       	or	r20, r21
    4a5c:	29 f4       	brne	.+10     	; 0x4a68 <free+0xa2>
    4a5e:	f0 93 fa 06 	sts	0x06FA, r31
    4a62:	e0 93 f9 06 	sts	0x06F9, r30
    4a66:	42 c0       	rjmp	.+132    	; 0x4aec <free+0x126>
    4a68:	13 96       	adiw	r26, 0x03	; 3
    4a6a:	fc 93       	st	X, r31
    4a6c:	ee 93       	st	-X, r30
    4a6e:	12 97       	sbiw	r26, 0x02	; 2
    4a70:	ed 01       	movw	r28, r26
    4a72:	49 91       	ld	r20, Y+
    4a74:	59 91       	ld	r21, Y+
    4a76:	9e 01       	movw	r18, r28
    4a78:	24 0f       	add	r18, r20
    4a7a:	35 1f       	adc	r19, r21
    4a7c:	e2 17       	cp	r30, r18
    4a7e:	f3 07       	cpc	r31, r19
    4a80:	71 f4       	brne	.+28     	; 0x4a9e <free+0xd8>
    4a82:	80 81       	ld	r24, Z
    4a84:	91 81       	ldd	r25, Z+1	; 0x01
    4a86:	84 0f       	add	r24, r20
    4a88:	95 1f       	adc	r25, r21
    4a8a:	02 96       	adiw	r24, 0x02	; 2
    4a8c:	11 96       	adiw	r26, 0x01	; 1
    4a8e:	9c 93       	st	X, r25
    4a90:	8e 93       	st	-X, r24
    4a92:	82 81       	ldd	r24, Z+2	; 0x02
    4a94:	93 81       	ldd	r25, Z+3	; 0x03
    4a96:	13 96       	adiw	r26, 0x03	; 3
    4a98:	9c 93       	st	X, r25
    4a9a:	8e 93       	st	-X, r24
    4a9c:	12 97       	sbiw	r26, 0x02	; 2
    4a9e:	e0 e0       	ldi	r30, 0x00	; 0
    4aa0:	f0 e0       	ldi	r31, 0x00	; 0
    4aa2:	d8 01       	movw	r26, r16
    4aa4:	12 96       	adiw	r26, 0x02	; 2
    4aa6:	8d 91       	ld	r24, X+
    4aa8:	9c 91       	ld	r25, X
    4aaa:	13 97       	sbiw	r26, 0x03	; 3
    4aac:	00 97       	sbiw	r24, 0x00	; 0
    4aae:	19 f0       	breq	.+6      	; 0x4ab6 <free+0xf0>
    4ab0:	f8 01       	movw	r30, r16
    4ab2:	8c 01       	movw	r16, r24
    4ab4:	f6 cf       	rjmp	.-20     	; 0x4aa2 <free+0xdc>
    4ab6:	8d 91       	ld	r24, X+
    4ab8:	9c 91       	ld	r25, X
    4aba:	98 01       	movw	r18, r16
    4abc:	2e 5f       	subi	r18, 0xFE	; 254
    4abe:	3f 4f       	sbci	r19, 0xFF	; 255
    4ac0:	82 0f       	add	r24, r18
    4ac2:	93 1f       	adc	r25, r19
    4ac4:	20 91 f7 06 	lds	r18, 0x06F7
    4ac8:	30 91 f8 06 	lds	r19, 0x06F8
    4acc:	28 17       	cp	r18, r24
    4ace:	39 07       	cpc	r19, r25
    4ad0:	69 f4       	brne	.+26     	; 0x4aec <free+0x126>
    4ad2:	30 97       	sbiw	r30, 0x00	; 0
    4ad4:	29 f4       	brne	.+10     	; 0x4ae0 <free+0x11a>
    4ad6:	10 92 fa 06 	sts	0x06FA, r1
    4ada:	10 92 f9 06 	sts	0x06F9, r1
    4ade:	02 c0       	rjmp	.+4      	; 0x4ae4 <free+0x11e>
    4ae0:	13 82       	std	Z+3, r1	; 0x03
    4ae2:	12 82       	std	Z+2, r1	; 0x02
    4ae4:	10 93 f8 06 	sts	0x06F8, r17
    4ae8:	00 93 f7 06 	sts	0x06F7, r16
    4aec:	df 91       	pop	r29
    4aee:	cf 91       	pop	r28
    4af0:	1f 91       	pop	r17
    4af2:	0f 91       	pop	r16
    4af4:	08 95       	ret

00004af6 <abort>:
    4af6:	81 e0       	ldi	r24, 0x01	; 1
    4af8:	90 e0       	ldi	r25, 0x00	; 0
    4afa:	f8 94       	cli
    4afc:	0c 94 a7 25 	jmp	0x4b4e	; 0x4b4e <_exit>

00004b00 <memcmp>:
    4b00:	fb 01       	movw	r30, r22
    4b02:	dc 01       	movw	r26, r24
    4b04:	04 c0       	rjmp	.+8      	; 0x4b0e <memcmp+0xe>
    4b06:	8d 91       	ld	r24, X+
    4b08:	01 90       	ld	r0, Z+
    4b0a:	80 19       	sub	r24, r0
    4b0c:	21 f4       	brne	.+8      	; 0x4b16 <memcmp+0x16>
    4b0e:	41 50       	subi	r20, 0x01	; 1
    4b10:	50 40       	sbci	r21, 0x00	; 0
    4b12:	c8 f7       	brcc	.-14     	; 0x4b06 <memcmp+0x6>
    4b14:	88 1b       	sub	r24, r24
    4b16:	99 0b       	sbc	r25, r25
    4b18:	08 95       	ret

00004b1a <strchr>:
    4b1a:	fc 01       	movw	r30, r24
    4b1c:	81 91       	ld	r24, Z+
    4b1e:	86 17       	cp	r24, r22
    4b20:	21 f0       	breq	.+8      	; 0x4b2a <strchr+0x10>
    4b22:	88 23       	and	r24, r24
    4b24:	d9 f7       	brne	.-10     	; 0x4b1c <strchr+0x2>
    4b26:	99 27       	eor	r25, r25
    4b28:	08 95       	ret
    4b2a:	31 97       	sbiw	r30, 0x01	; 1
    4b2c:	cf 01       	movw	r24, r30
    4b2e:	08 95       	ret

00004b30 <strncpy>:
    4b30:	fb 01       	movw	r30, r22
    4b32:	dc 01       	movw	r26, r24
    4b34:	41 50       	subi	r20, 0x01	; 1
    4b36:	50 40       	sbci	r21, 0x00	; 0
    4b38:	48 f0       	brcs	.+18     	; 0x4b4c <strncpy+0x1c>
    4b3a:	01 90       	ld	r0, Z+
    4b3c:	0d 92       	st	X+, r0
    4b3e:	00 20       	and	r0, r0
    4b40:	c9 f7       	brne	.-14     	; 0x4b34 <strncpy+0x4>
    4b42:	01 c0       	rjmp	.+2      	; 0x4b46 <strncpy+0x16>
    4b44:	1d 92       	st	X+, r1
    4b46:	41 50       	subi	r20, 0x01	; 1
    4b48:	50 40       	sbci	r21, 0x00	; 0
    4b4a:	e0 f7       	brcc	.-8      	; 0x4b44 <strncpy+0x14>
    4b4c:	08 95       	ret

00004b4e <_exit>:
    4b4e:	f8 94       	cli

00004b50 <__stop_program>:
    4b50:	ff cf       	rjmp	.-2      	; 0x4b50 <__stop_program>
